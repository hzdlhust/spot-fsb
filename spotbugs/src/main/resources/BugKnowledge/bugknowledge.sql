-- MySQL dump 10.13  Distrib 5.7.19, for Win64 (x86_64)
--
-- Host: localhost    Database: bugknowledge
-- ------------------------------------------------------
-- Server version	5.7.19-log

/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8 */;
/*!40103 SET @OLD_TIME_ZONE=@@TIME_ZONE */;
/*!40103 SET TIME_ZONE='+00:00' */;
/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;

--
-- Table structure for table `bug_category`
--

DROP TABLE IF EXISTS `bug_category`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `bug_category` (
  `CATEGORY_ID` int(11) NOT NULL AUTO_INCREMENT,
  `CATEGORY_NAME` varchar(100) NOT NULL,
  `DESCRIPTION` varchar(4000) DEFAULT NULL,
  PRIMARY KEY (`CATEGORY_ID`)
) ENGINE=InnoDB AUTO_INCREMENT=11 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `bug_category`
--

LOCK TABLES `bug_category` WRITE;
/*!40000 ALTER TABLE `bug_category` DISABLE KEYS */;
INSERT INTO `bug_category` VALUES (1,'Bad practice (BAD_PRACTICE)','Violations of recommended and essential\ncoding practice. Examples include hash code and equals\nproblems, cloneable idiom, dropped exceptions,\nSerializable problems, and misuse of finalize.\nWe strive to make this analysis accurate,\nalthough some groups may\nnot care about some of the bad practices.\n'),(2,'Correctness (CORRECTNESS)','Probable bug - an apparent coding mistake\nresulting in code that was probably not what the\ndeveloper intended. We strive for a low false positive rate.\n'),(3,'Experimental (EXPERIMENTAL)','Experimental and not fully vetted bug patterns\n'),(4,'Internationalization (I18N)','code flaws having to do with internationalization and locale\n'),(5,'Malicious code vulnerability (MALICIOUS_CODE)','code that is vulnerable to attacks from untrusted code\n'),(6,'Multithreaded correctness (MT_CORRECTNESS)','code flaws having to do with threads, locks, and volatiles\n'),(7,'Bogus random noise (NOISE)','Bogus random noise: intended to be useful\nas a control in data mining experiments, not in finding actual bugs in software\n\n'),(8,'Performance (PERFORMANCE)','code that is not necessarily incorrect but may be inefficient\n'),(9,'Security (SECURITY)','A use of untrusted input in a way that could create a remotely exploitable security vulnerability.\n\n'),(10,'Dodgy code (STYLE)','code that is confusing, anomalous, or\nwritten in a way that leads itself to errors.\nExamples include dead local stores, switch fall through,\nunconfirmed casts, and redundant null check of value\nknown to be null.\nMore false positives accepted.\nIn previous versions of SpotBugs, this category was known as Style.\n');
/*!40000 ALTER TABLE `bug_category` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `bug_information`
--

DROP TABLE IF EXISTS `bug_information`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `bug_information` (
  `ID` int(11) NOT NULL AUTO_INCREMENT,
  `NAME` varchar(200) NOT NULL,
  `CWE` int(11) DEFAULT NULL,
  `CATEGORY_ID` int(11) NOT NULL,
  `DESCRIPTION` varchar(4000) NOT NULL,
  `CREATE_TIME` datetime NOT NULL,
  PRIMARY KEY (`ID`),
  KEY `FK_CATE` (`CATEGORY_ID`),
  CONSTRAINT `bug_information_ibfk_1` FOREIGN KEY (`CATEGORY_ID`) REFERENCES `bug_category` (`CATEGORY_ID`) ON UPDATE CASCADE
) ENGINE=InnoDB AUTO_INCREMENT=570 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `bug_information`
--

LOCK TABLES `bug_information` WRITE;
/*!40000 ALTER TABLE `bug_information` DISABLE KEYS */;
INSERT INTO `bug_information` VALUES (1,'CNT_ROUGH_CONSTANT_VALUE',0,1,'\n      \n    <p>It\'s recommended to use the predefined library constant for code clarity and better precision.</p>\n\n    \n','2019-10-15 16:02:23'),(2,'NP_BOOLEAN_RETURN_NULL',0,1,'\n       \n       <p>\n    A method that returns either Boolean.TRUE, Boolean.FALSE or null is an accident waiting to happen.\n    This method can be invoked as though it returned a value of type boolean, and\n    the compiler will insert automatic unboxing of the Boolean value. If a null value is returned,\n    this will result in a NullPointerException.\n       </p>\n       \n       \n','2019-10-15 16:02:23'),(3,'SW_SWING_METHODS_INVOKED_IN_SWING_THREAD',0,1,'\n\n<p>(<a href=\"http://web.archive.org/web/20090526170426/http://java.sun.com/developer/JDCTechTips/2003/tt1208.html\">From JDC Tech Tip</a>): The Swing methods\nshow(), setVisible(), and pack() will create the associated peer for the frame.\nWith the creation of the peer, the system creates the event dispatch thread.\nThis makes things problematic because the event dispatch thread could be notifying\nlisteners while pack and validate are still processing. This situation could result in\ntwo threads going through the Swing component-based GUI -- it\'s a serious flaw that\ncould result in deadlocks or other related threading issues. A pack call causes\ncomponents to be realized. As they are being realized (that is, not necessarily\nvisible), they could trigger listener notification on the event dispatch thread.</p>\n\n\n    \n','2019-10-15 16:02:23'),(4,'FI_FINALIZER_ONLY_NULLS_FIELDS',0,1,'\n\n  <p> This finalizer does nothing except null out fields. This is completely pointless, and requires that\nthe object be garbage collected, finalized, and then garbage collected again. You should just remove the finalize\nmethod.</p>\n\n    \n','2019-10-15 16:02:23'),(5,'FI_FINALIZER_NULLS_FIELDS',0,1,'\n\n  <p> This finalizer nulls out fields.  This is usually an error, as it does not aid garbage collection,\n  and the object is going to be garbage collected anyway.</p>\n\n    \n','2019-10-15 16:02:23'),(6,'UI_INHERITANCE_UNSAFE_GETRESOURCE',0,1,'\n\n<p>Calling <code>this.getClass().getResource(...)</code> could give\nresults other than expected if this class is extended by a class in\nanother package.</p>\n\n    \n','2019-10-15 16:02:23'),(7,'AM_CREATES_EMPTY_ZIP_FILE_ENTRY',0,1,'\n\n<p>The code calls <code>putNextEntry()</code>, immediately\nfollowed by a call to <code>closeEntry()</code>. This results\nin an empty ZipFile entry. The contents of the entry\nshould be written to the ZipFile between the calls to\n<code>putNextEntry()</code> and\n<code>closeEntry()</code>.</p>\n\n    \n','2019-10-15 16:02:23'),(8,'AM_CREATES_EMPTY_JAR_FILE_ENTRY',0,1,'\n\n<p>The code calls <code>putNextEntry()</code>, immediately\nfollowed by a call to <code>closeEntry()</code>. This results\nin an empty JarFile entry. The contents of the entry\nshould be written to the JarFile between the calls to\n<code>putNextEntry()</code> and\n<code>closeEntry()</code>.</p>\n\n    \n','2019-10-15 16:02:23'),(9,'IMSE_DONT_CATCH_IMSE',0,1,'\n\n<p>IllegalMonitorStateException is generally only\n   thrown in case of a design flaw in your code (calling wait or\n   notify on an object you do not hold a lock on).</p>\n\n    \n','2019-10-15 16:02:23'),(10,'CN_IMPLEMENTS_CLONE_BUT_NOT_CLONEABLE',0,1,'\n\n<p> This class defines a clone() method but the class doesn\'t implement Cloneable.\nThere are some situations in which this is OK (e.g., you want to control how subclasses\ncan clone themselves), but just make sure that this is what you intended.\n</p>\n\n    \n','2019-10-15 16:02:23'),(11,'CN_IDIOM',0,1,'\n\n<p>\n   Class implements Cloneable but does not define or\n   use the clone method.</p>\n\n    \n','2019-10-15 16:02:23'),(12,'CN_IDIOM_NO_SUPER_CALL',0,1,'\n\n<p> This non-final class defines a clone() method that does not call super.clone().\nIf this class (\"<i>A</i>\") is extended by a subclass (\"<i>B</i>\"),\nand the subclass <i>B</i> calls super.clone(), then it is likely that\n<i>B</i>\'s clone() method will return an object of type <i>A</i>,\nwhich violates the standard contract for clone().</p>\n\n<p> If all clone() methods call super.clone(), then they are guaranteed\nto use Object.clone(), which always returns an object of the correct type.</p>\n\n    \n','2019-10-15 16:02:23'),(13,'DE_MIGHT_DROP',0,1,'\n\n  <p> This method might drop an exception.&nbsp; In general, exceptions\n  should be handled or reported in some way, or they should be thrown\n  out of the method.</p>\n\n    \n','2019-10-15 16:02:23'),(14,'DE_MIGHT_IGNORE',0,1,'\n\n  <p> This method might ignore an exception.&nbsp; In general, exceptions\n  should be handled or reported in some way, or they should be thrown\n  out of the method.</p>\n\n    \n','2019-10-15 16:02:23'),(15,'DM_EXIT',382,1,'\n\n  <p> Invoking System.exit shuts down the entire Java virtual machine. This\n   should only been done when it is appropriate. Such calls make it\n   hard or impossible for your code to be invoked by other code.\n   Consider throwing a RuntimeException instead.</p>\n\n    \n','2019-10-15 16:02:23'),(16,'NM_FUTURE_KEYWORD_USED_AS_IDENTIFIER',0,1,'\n\n<p>The identifier is a word that is reserved as a keyword in later versions of Java, and your code will need to be changed\nin order to compile it in later versions of Java.</p>\n\n\n    \n','2019-10-15 16:02:23'),(17,'NM_FUTURE_KEYWORD_USED_AS_MEMBER_IDENTIFIER',0,1,'\n\n<p>This identifier is used as a keyword in later versions of Java. This code, and\nany code that references this API,\nwill need to be changed in order to compile it in later versions of Java.</p>\n\n\n    \n','2019-10-15 16:02:23'),(18,'JCIP_FIELD_ISNT_FINAL_IN_IMMUTABLE_CLASS',0,1,'\n\n  <p> The class is annotated with net.jcip.annotations.Immutable or javax.annotation.concurrent.Immutable,\n  and the rules for those annotations require that all fields are final.\n   .</p>\n\n    \n','2019-10-15 16:02:23'),(19,'DM_RUN_FINALIZERS_ON_EXIT',0,1,'\n\n  <p> <em>Never call System.runFinalizersOnExit\nor Runtime.runFinalizersOnExit for any reason: they are among the most\ndangerous methods in the Java libraries.</em> -- Joshua Bloch</p>\n\n    \n','2019-10-15 16:02:23'),(20,'NP_EQUALS_SHOULD_HANDLE_NULL_ARGUMENT',0,1,'\n      \n      <p>\n      This implementation of equals(Object) violates the contract defined\n      by java.lang.Object.equals() because it does not check for null\n      being passed as the argument.  All equals() methods should return\n      false if passed a null value.\n      </p>\n      \n   \n','2019-10-15 16:02:23'),(21,'FI_EMPTY',0,1,'\n\n  <p> Empty <code>finalize()</code> methods are useless, so they should\n  be deleted.</p>\n\n    \n','2019-10-15 16:02:23'),(22,'FI_NULLIFY_SUPER',0,1,'\n\n  <p> This empty <code>finalize()</code> method explicitly negates the\n  effect of any finalizer defined by its superclass.&nbsp; Any finalizer\n  actions defined for the superclass will not be performed.&nbsp;\n  Unless this is intended, delete this method.</p>\n\n    \n','2019-10-15 16:02:23'),(23,'FI_USELESS',0,1,'\n\n  <p> The only thing this <code>finalize()</code> method does is call\n  the superclass\'s <code>finalize()</code> method, making it\n  redundant.&nbsp; Delete it.</p>\n\n    \n','2019-10-15 16:02:23'),(24,'FI_MISSING_SUPER_CALL',0,1,'\n\n  <p> This <code>finalize()</code> method does not make a call to its\n  superclass\'s <code>finalize()</code> method.&nbsp; So, any finalizer\n  actions defined for the superclass will not be performed.&nbsp;\n  Add a call to <code>super.finalize()</code>.</p>\n\n    \n','2019-10-15 16:02:23'),(25,'FI_EXPLICIT_INVOCATION',586,1,'\n\n  <p> This method contains an explicit invocation of the <code>finalize()</code>\n  method on an object.&nbsp; Because finalizer methods are supposed to be\n  executed once, and only by the VM, this is a bad idea.</p>\n<p>If a connected set of objects beings finalizable, then the VM will invoke the\nfinalize method on all the finalizable object, possibly at the same time in different threads.\nThus, it is a particularly bad idea, in the finalize method for a class X, invoke finalize\non objects referenced by X, because they may already be getting finalized in a separate thread.</p>\n\n    \n','2019-10-15 16:02:23'),(26,'EQ_CHECK_FOR_OPERAND_NOT_COMPATIBLE_WITH_THIS',0,1,'\n\n  <p> This equals method is checking to see if the argument is some incompatible type\n(i.e., a class that is neither a supertype nor subtype of the class that defines\nthe equals method). For example, the Foo class might have an equals method\nthat looks like:\n</p>\n<pre><code>public boolean equals(Object o) {\n    if (o instanceof Foo)\n        return name.equals(((Foo)o).name);\n    else if (o instanceof String)\n        return name.equals(o);\n    else return false;\n}\n</code></pre>\n\n<p>This is considered bad practice, as it makes it very hard to implement an equals method that\nis symmetric and transitive. Without those properties, very unexpected behaviors are possible.\n</p>\n\n    \n','2019-10-15 16:02:23'),(27,'EQ_GETCLASS_AND_CLASS_CONSTANT',0,1,'\n\n  <p> This class has an equals method that will be broken if it is inherited by subclasses.\nIt compares a class literal with the class of the argument (e.g., in class <code>Foo</code>\nit might check if <code>Foo.class == o.getClass()</code>).\nIt is better to check if <code>this.getClass() == o.getClass()</code>.\n</p>\n\n    \n','2019-10-15 16:02:23'),(28,'EQ_SELF_NO_OBJECT',0,1,'\n\n  <p> This class defines a covariant version of <code>equals()</code>.&nbsp;\n  To correctly override the <code>equals()</code> method in\n  <code>java.lang.Object</code>, the parameter of <code>equals()</code>\n  must have type <code>java.lang.Object</code>.</p>\n\n    \n','2019-10-15 16:02:23'),(29,'CO_SELF_NO_OBJECT',0,1,'\n\n  <p> This class defines a covariant version of <code>compareTo()</code>.&nbsp;\n  To correctly override the <code>compareTo()</code> method in the\n  <code>Comparable</code> interface, the parameter of <code>compareTo()</code>\n  must have type <code>java.lang.Object</code>.</p>\n\n    \n','2019-10-15 16:02:23'),(30,'CO_COMPARETO_RESULTS_MIN_VALUE',0,1,'\n\n  <p> In some situation, this compareTo or compare method returns\nthe  constant Integer.MIN_VALUE, which is an exceptionally bad practice.\n  The only thing that matters about the return value of compareTo is the sign of the result.\n    But people will sometimes negate the return value of compareTo, expecting that this will negate\n    the sign of the result. And it will, except in the case where the value returned is Integer.MIN_VALUE.\n    So just return -1 rather than Integer.MIN_VALUE.\n\n    \n','2019-10-15 16:02:23'),(31,'CO_COMPARETO_INCORRECT_FLOATING',0,1,'\n\n  <p>This method compares double or float values using pattern like this: val1 &gt; val2 ? 1 : val1 &lt; val2 ? -1 : 0.\nThis pattern works incorrectly for -0.0 and NaN values which may result in incorrect sorting result or broken collection\n(if compared values are used as keys). Consider using Double.compare or Float.compare static methods which handle all\nthe special cases correctly.</p>\n\n    \n','2019-10-15 16:02:23'),(32,'RV_NEGATING_RESULT_OF_COMPARETO',0,1,'\n\n  <p> This code negatives the return value of a compareTo or compare method.\nThis is a questionable or bad programming practice, since if the return\nvalue is Integer.MIN_VALUE, negating the return value won\'t\nnegate the sign of the result. You can achieve the same intended result\nby reversing the order of the operands rather than by negating the results.\n</p>\n\n    \n','2019-10-15 16:02:23'),(33,'ES_COMPARING_STRINGS_WITH_EQ',0,1,'\n\n  <p>This code compares <code>java.lang.String</code> objects for reference\nequality using the == or != operators.\nUnless both strings are either constants in a source file, or have been\ninterned using the <code>String.intern()</code> method, the same string\nvalue may be represented by two different String objects. Consider\nusing the <code>equals(Object)</code> method instead.</p>\n\n    \n','2019-10-15 16:02:23'),(34,'ES_COMPARING_PARAMETER_STRING_WITH_EQ',0,1,'\n\n  <p>This code compares a <code>java.lang.String</code> parameter for reference\nequality using the == or != operators. Requiring callers to\npass only String constants or interned strings to a method is unnecessarily\nfragile, and rarely leads to measurable performance gains. Consider\nusing the <code>equals(Object)</code> method instead.</p>\n\n    \n','2019-10-15 16:02:23'),(35,'EQ_COMPARETO_USE_OBJECT_EQUALS',0,1,'\n\n  <p> This class defines a <code>compareTo(...)</code> method but inherits its\n  <code>equals()</code> method from <code>java.lang.Object</code>.\n    Generally, the value of compareTo should return zero if and only if\n    equals returns true. If this is violated, weird and unpredictable\n    failures will occur in classes such as PriorityQueue.\n    In Java 5 the PriorityQueue.remove method uses the compareTo method,\n    while in Java 6 it uses the equals method.</p>\n\n<p>From the JavaDoc for the compareTo method in the Comparable interface:\n<blockquote>\nIt is strongly recommended, but not strictly required that <code>(x.compareTo(y)==0) == (x.equals(y))</code>.\nGenerally speaking, any class that implements the Comparable interface and violates this condition\nshould clearly indicate this fact. The recommended language\nis \"Note: this class has a natural ordering that is inconsistent with equals.\"\n</blockquote></p>\n\n    \n','2019-10-15 16:02:23'),(36,'HE_HASHCODE_USE_OBJECT_EQUALS',0,1,'\n\n  <p> This class defines a <code>hashCode()</code> method but inherits its\n  <code>equals()</code> method from <code>java.lang.Object</code>\n  (which defines equality by comparing object references).&nbsp; Although\n  this will probably satisfy the contract that equal objects must have\n  equal hashcodes, it is probably not what was intended by overriding\n  the <code>hashCode()</code> method.&nbsp; (Overriding <code>hashCode()</code>\n  implies that the object\'s identity is based on criteria more complicated\n  than simple reference equality.)</p>\n<p>If you don\'t think instances of this class will ever be inserted into a HashMap/HashTable,\nthe recommended <code>hashCode</code> implementation to use is:</p>\n<pre><code>public int hashCode() {\n    assert false : \"hashCode not designed\";\n    return 42; // any arbitrary constant will do\n}\n</code></pre>\n\n    \n','2019-10-15 16:02:23'),(37,'HE_HASHCODE_NO_EQUALS',0,1,'\n\n  <p> This class defines a <code>hashCode()</code> method but not an\n  <code>equals()</code> method.&nbsp; Therefore, the class may\n  violate the invariant that equal objects must have equal hashcodes.</p>\n\n    \n','2019-10-15 16:02:23'),(38,'HE_EQUALS_USE_HASHCODE',0,1,'\n\n  <p> This class overrides <code>equals(Object)</code>, but does not\n  override <code>hashCode()</code>, and inherits the implementation of\n  <code>hashCode()</code> from <code>java.lang.Object</code> (which returns\n  the identity hash code, an arbitrary value assigned to the object\n  by the VM).&nbsp; Therefore, the class is very likely to violate the\n  invariant that equal objects must have equal hashcodes.</p>\n\n<p>If you don\'t think instances of this class will ever be inserted into a HashMap/HashTable,\nthe recommended <code>hashCode</code> implementation to use is:</p>\n<pre><code>public int hashCode() {\n    assert false : \"hashCode not designed\";\n    return 42; // any arbitrary constant will do\n}\n</code></pre>\n\n    \n','2019-10-15 16:02:23'),(39,'HE_INHERITS_EQUALS_USE_HASHCODE',0,1,'\n\n  <p> This class inherits <code>equals(Object)</code> from an abstract\n  superclass, and <code>hashCode()</code> from\n<code>java.lang.Object</code> (which returns\n  the identity hash code, an arbitrary value assigned to the object\n  by the VM).&nbsp; Therefore, the class is very likely to violate the\n  invariant that equal objects must have equal hashcodes.</p>\n\n  <p>If you don\'t want to define a hashCode method, and/or don\'t\n   believe the object will ever be put into a HashMap/Hashtable,\n   define the <code>hashCode()</code> method\n   to throw <code>UnsupportedOperationException</code>.</p>\n\n    \n','2019-10-15 16:02:23'),(40,'HE_EQUALS_NO_HASHCODE',0,1,'\n\n  <p> This class overrides <code>equals(Object)</code>, but does not\n  override <code>hashCode()</code>.&nbsp; Therefore, the class may violate the\n  invariant that equal objects must have equal hashcodes.</p>\n\n    \n','2019-10-15 16:02:23'),(41,'EQ_ABSTRACT_SELF',0,1,'\n\n  <p> This class defines a covariant version of <code>equals()</code>.&nbsp;\n  To correctly override the <code>equals()</code> method in\n  <code>java.lang.Object</code>, the parameter of <code>equals()</code>\n  must have type <code>java.lang.Object</code>.</p>\n\n    \n','2019-10-15 16:02:23'),(42,'CO_ABSTRACT_SELF',0,1,'\n\n  <p> This class defines a covariant version of <code>compareTo()</code>.&nbsp;\n  To correctly override the <code>compareTo()</code> method in the\n  <code>Comparable</code> interface, the parameter of <code>compareTo()</code>\n  must have type <code>java.lang.Object</code>.</p>\n\n    \n','2019-10-15 16:02:23'),(43,'IC_SUPERCLASS_USES_SUBCLASS_DURING_INITIALIZATION',0,1,'\n\n  <p> During the initialization of a class, the class makes an active use of a subclass.\nThat subclass will not yet be initialized at the time of this use.\nFor example, in the following code, <code>foo</code> will be null.</p>\n<pre><code>public class CircularClassInitialization {\n    static class InnerClassSingleton extends CircularClassInitialization {\n        static InnerClassSingleton singleton = new InnerClassSingleton();\n    }\n\n    static CircularClassInitialization foo = InnerClassSingleton.singleton;\n}\n</code></pre>\n\n    \n','2019-10-15 16:02:23'),(44,'SI_INSTANCE_BEFORE_FINALS_ASSIGNED',0,1,'\n\n<p> The class\'s static initializer creates an instance of the class\nbefore all of the static final fields are assigned.</p>\n\n    \n','2019-10-15 16:02:23'),(45,'IT_NO_SUCH_ELEMENT',0,1,'\n\n  <p> This class implements the <code>java.util.Iterator</code> interface.&nbsp;\n  However, its <code>next()</code> method is not capable of throwing\n  <code>java.util.NoSuchElementException</code>.&nbsp; The <code>next()</code>\n  method should be changed so it throws <code>NoSuchElementException</code>\n  if is called when there are no more elements to return.</p>\n\n    \n','2019-10-15 16:02:23'),(46,'ME_MUTABLE_ENUM_FIELD',0,1,'\n\n  <p>A mutable public field is defined inside a public enum, thus can be changed by malicious code or by accident from another package.\n  Though mutable enum fields may be used for lazy initialization, it\'s a bad practice to expose them to the outer world.\n  Consider declaring this field final and/or package-private.</p>\n\n    \n','2019-10-15 16:02:23'),(47,'ME_ENUM_FIELD_SETTER',0,1,'\n\n  <p>This public method declared in public enum unconditionally sets enum field, thus this field can be changed by malicious code\n  or by accident from another package. Though mutable enum fields may be used for lazy initialization, it\'s a bad practice to expose them to the outer world.\n  Consider removing this method or declaring it package-private.</p>\n\n    \n','2019-10-15 16:02:23'),(48,'NM_METHOD_NAMING_CONVENTION',0,1,'\n\n  <p>\nMethods should be verbs, in mixed case with the first letter lowercase, with the first letter of each internal word capitalized.\n</p>\n\n    \n','2019-10-15 16:02:23'),(49,'NM_FIELD_NAMING_CONVENTION',0,1,'\n\n  <p>\nNames of fields that are not final should be in mixed case with a lowercase first letter and the first letters of subsequent words capitalized.\n</p>\n\n    \n','2019-10-15 16:02:23'),(50,'NM_SAME_SIMPLE_NAME_AS_INTERFACE',0,1,'\n\n  <p> This class/interface has a simple name that is identical to that of an implemented/extended interface, except\nthat the interface is in a different package (e.g., <code>alpha.Foo</code> extends <code>beta.Foo</code>).\nThis can be exceptionally confusing, create lots of situations in which you have to look at import statements\nto resolve references and creates many\nopportunities to accidentally define methods that do not override methods in their superclasses.\n</p>\n\n    \n','2019-10-15 16:02:23'),(51,'NM_SAME_SIMPLE_NAME_AS_SUPERCLASS',0,1,'\n\n  <p> This class has a simple name that is identical to that of its superclass, except\nthat its superclass is in a different package (e.g., <code>alpha.Foo</code> extends <code>beta.Foo</code>).\nThis can be exceptionally confusing, create lots of situations in which you have to look at import statements\nto resolve references and creates many\nopportunities to accidentally define methods that do not override methods in their superclasses.\n</p>\n\n    \n','2019-10-15 16:02:23'),(52,'NM_CLASS_NAMING_CONVENTION',0,1,'\n\n  <p> Class names should be nouns, in mixed case with the first letter of each internal word capitalized. Try to keep your class names simple and descriptive. Use whole words-avoid acronyms and abbreviations (unless the abbreviation is much more widely used than the long form, such as URL or HTML).\n</p>\n\n    \n','2019-10-15 16:02:23'),(53,'NM_VERY_CONFUSING_INTENTIONAL',0,1,'\n\n  <p> The referenced methods have names that differ only by capitalization.\nThis is very confusing because if the capitalization were\nidentical then one of the methods would override the other. From the existence of other methods, it\nseems that the existence of both of these methods is intentional, but is sure is confusing.\nYou should try hard to eliminate one of them, unless you are forced to have both due to frozen APIs.\n</p>\n\n    \n','2019-10-15 16:02:23'),(54,'NM_WRONG_PACKAGE_INTENTIONAL',0,1,'\n\n  <p> The method in the subclass doesn\'t override a similar method in a superclass because the type of a parameter doesn\'t exactly match\nthe type of the corresponding parameter in the superclass. For example, if you have:</p>\n<pre><code>import alpha.Foo;\n\npublic class A {\n    public int f(Foo x) { return 17; }\n}\n----\nimport beta.Foo;\n\npublic class B extends A {\n    public int f(Foo x) { return 42; }\n    public int f(alpha.Foo x) { return 27; }\n}\n</code></pre>\n<p>The <code>f(Foo)</code> method defined in class <code>B</code> doesn\'t\noverride the\n<code>f(Foo)</code> method defined in class <code>A</code>, because the argument\ntypes are <code>Foo</code>\'s from different packages.\n</p>\n\n<p>In this case, the subclass does define a method with a signature identical to the method in the superclass,\nso this is presumably understood. However, such methods are exceptionally confusing. You should strongly consider\nremoving or deprecating the method with the similar but not identical signature.\n</p>\n\n    \n','2019-10-15 16:02:23'),(55,'NM_CONFUSING',0,1,'\n\n  <p> The referenced methods have names that differ only by capitalization.</p>\n\n    \n','2019-10-15 16:02:23'),(56,'NM_CLASS_NOT_EXCEPTION',0,1,'\n\n<p> This class is not derived from another exception, but ends with \'Exception\'. This will\nbe confusing to users of this class.</p>\n\n    \n','2019-10-15 16:02:23'),(57,'RR_NOT_CHECKED',0,1,'\n\n  <p> This method ignores the return value of one of the variants of\n  <code>java.io.InputStream.read()</code> which can return multiple bytes.&nbsp;\n  If the return value is not checked, the caller will not be able to correctly\n  handle the case where fewer bytes were read than the caller requested.&nbsp;\n  This is a particularly insidious kind of bug, because in many programs,\n  reads from input streams usually do read the full amount of data requested,\n  causing the program to fail only sporadically.</p>\n\n    \n','2019-10-15 16:02:23'),(58,'SR_NOT_CHECKED',0,1,'\n\n  <p> This method ignores the return value of\n  <code>java.io.InputStream.skip()</code> which can skip multiple bytes.&nbsp;\n  If the return value is not checked, the caller will not be able to correctly\n  handle the case where fewer bytes were skipped than the caller requested.&nbsp;\n  This is a particularly insidious kind of bug, because in many programs,\n  skips from input streams usually do skip the full amount of data requested,\n  causing the program to fail only sporadically. With Buffered streams, however,\n  skip() will only skip data in the buffer, and will routinely fail to skip the\n  requested number of bytes.</p>\n\n    \n','2019-10-15 16:02:23'),(59,'SE_NO_SUITABLE_CONSTRUCTOR',0,1,'\n\n  <p> This class implements the <code>Serializable</code> interface\n   and its superclass does not. When such an object is deserialized,\n   the fields of the superclass need to be initialized by\n   invoking the void constructor of the superclass.\n   Since the superclass does not have one,\n   serialization and deserialization will fail at runtime.</p>\n\n    \n','2019-10-15 16:02:23'),(60,'SE_NO_SUITABLE_CONSTRUCTOR_FOR_EXTERNALIZATION',0,1,'\n\n  <p> This class implements the <code>Externalizable</code> interface, but does\n  not define a void constructor. When Externalizable objects are deserialized,\n   they first need to be constructed by invoking the void\n   constructor. Since this class does not have one,\n   serialization and deserialization will fail at runtime.</p>\n\n    \n','2019-10-15 16:02:23'),(61,'SE_COMPARATOR_SHOULD_BE_SERIALIZABLE',0,1,'\n\n  <p> This class implements the <code>Comparator</code> interface. You\nshould consider whether or not it should also implement the <code>Serializable</code>\ninterface. If a comparator is used to construct an ordered collection\nsuch as a <code>TreeMap</code>, then the <code>TreeMap</code>\nwill be serializable only if the comparator is also serializable.\nAs most comparators have little or no state, making them serializable\nis generally easy and good defensive programming.\n</p>\n\n    \n','2019-10-15 16:02:23'),(62,'SE_NO_SERIALVERSIONID',0,1,'\n\n  <p> This class implements the <code>Serializable</code> interface, but does\n  not define a <code>serialVersionUID</code> field.&nbsp;\n  A change as simple as adding a reference to a .class object\n    will add synthetic fields to the class,\n   which will unfortunately change the implicit\n   serialVersionUID (e.g., adding a reference to <code>String.class</code>\n   will generate a static field <code>class$java$lang$String</code>).\n   Also, different source code to bytecode compilers may use different\n   naming conventions for synthetic variables generated for\n   references to class objects or inner classes.\n   To ensure interoperability of Serializable across versions,\n   consider adding an explicit serialVersionUID.</p>\n\n    \n','2019-10-15 16:02:23'),(63,'SE_READ_RESOLVE_MUST_RETURN_OBJECT',0,1,'\n\n  <p> In order for the readResolve method to be recognized by the serialization\nmechanism, it must be declared to have a return type of Object.\n</p>\n\n    \n','2019-10-15 16:02:23'),(64,'SE_TRANSIENT_FIELD_NOT_RESTORED',0,1,'\n\n  <p> This class contains a field that is updated at multiple places in the class, thus it seems to be part of the state of the class. However, since the field is marked as transient and not set in readObject or readResolve, it will contain the default value in any\ndeserialized instance of the class.\n</p>\n\n    \n','2019-10-15 16:02:23'),(65,'SE_NONFINAL_SERIALVERSIONID',0,1,'\n\n  <p> This class defines a <code>serialVersionUID</code> field that is not final.&nbsp;\n  The field should be made final\n   if it is intended to specify\n   the version UID for purposes of serialization.</p>\n\n    \n','2019-10-15 16:02:23'),(66,'SE_NONSTATIC_SERIALVERSIONID',0,1,'\n\n  <p> This class defines a <code>serialVersionUID</code> field that is not static.&nbsp;\n  The field should be made static\n   if it is intended to specify\n   the version UID for purposes of serialization.</p>\n\n    \n','2019-10-15 16:02:23'),(67,'SE_NONLONG_SERIALVERSIONID',0,1,'\n\n  <p> This class defines a <code>serialVersionUID</code> field that is not long.&nbsp;\n  The field should be made long\n   if it is intended to specify\n   the version UID for purposes of serialization.</p>\n\n    \n','2019-10-15 16:02:23'),(68,'SE_BAD_FIELD',0,1,'\n\n<p> This Serializable class defines a non-primitive instance field which is neither transient,\nSerializable, or <code>java.lang.Object</code>, and does not appear to implement\nthe <code>Externalizable</code> interface or the\n<code>readObject()</code> and <code>writeObject()</code> methods.&nbsp;\nObjects of this class will not be deserialized correctly if a non-Serializable\nobject is stored in this field.</p>\n\n    \n','2019-10-15 16:02:23'),(69,'SE_INNER_CLASS',0,1,'\n\n<p> This Serializable class is an inner class.  Any attempt to serialize\nit will also serialize the associated outer instance. The outer instance is serializable,\nso this won\'t fail, but it might serialize a lot more data than intended.\nIf possible, making the inner class a static inner class (also known as a nested class) should solve the\nproblem.\n\n    \n','2019-10-15 16:02:23'),(70,'SE_BAD_FIELD_INNER_CLASS',0,1,'\n\n<p> This Serializable class is an inner class of a non-serializable class.\nThus, attempts to serialize it will also attempt to associate instance of the outer\nclass with which it is associated, leading to a runtime error.\n</p>\n<p>If possible, making the inner class a static inner class should solve the\nproblem. Making the outer class serializable might also work, but that would\nmean serializing an instance of the inner class would always also serialize the instance\nof the outer class, which it often not what you really want.\n\n    \n','2019-10-15 16:02:23'),(71,'SE_BAD_FIELD_STORE',0,1,'\n\n<p> A non-serializable value is stored into a non-transient field\nof a serializable class.</p>\n\n    \n','2019-10-15 16:02:23'),(72,'RV_RETURN_VALUE_IGNORED_BAD_PRACTICE',253,1,'\n\n   <p> This method returns a value that is not checked. The return value should be checked\nsince it can indicate an unusual or unexpected function execution. For\nexample, the <code>File.delete()</code> method returns false\nif the file could not be successfully deleted (rather than\nthrowing an Exception).\nIf you don\'t check the result, you won\'t notice if the method invocation\nsignals unexpected behavior by returning an atypical return value.\n</p>\n\n    \n','2019-10-15 16:02:23'),(73,'NP_TOSTRING_COULD_RETURN_NULL',0,1,'\n      \n      <p>\n    This toString method seems to return null in some circumstances. A liberal reading of the\n    spec could be interpreted as allowing this, but it is probably a bad idea and could cause\n    other code to break. Return the empty string or some other appropriate string rather than null.\n      </p>\n      \n   \n','2019-10-15 16:02:23'),(74,'NP_CLONE_COULD_RETURN_NULL',0,1,'\n      \n      <p>\n    This clone method seems to return null in some circumstances, but clone is never\n    allowed to return a null value.  If you are convinced this path is unreachable, throw an AssertionError\n    instead.\n      </p>\n      \n   \n','2019-10-15 16:02:23'),(75,'OS_OPEN_STREAM',0,1,'\n\n<p> The method creates an IO stream object, does not assign it to any\nfields, pass it to other methods that might close it,\nor return it, and does not appear to close\nthe stream on all paths out of the method.&nbsp; This may result in\na file descriptor leak.&nbsp; It is generally a good\nidea to use a <code>finally</code> block to ensure that streams are\nclosed.</p>\n\n    \n','2019-10-15 16:02:23'),(76,'OS_OPEN_STREAM_EXCEPTION_PATH',0,1,'\n\n<p> The method creates an IO stream object, does not assign it to any\nfields, pass it to other methods, or return it, and does not appear to close\nit on all possible exception paths out of the method.&nbsp;\nThis may result in a file descriptor leak.&nbsp; It is generally a good\nidea to use a <code>finally</code> block to ensure that streams are\nclosed.</p>\n\n    \n','2019-10-15 16:02:23'),(77,'RC_REF_COMPARISON_BAD_PRACTICE',0,1,'\n\n<p> This method compares a reference value to a constant using the == or != operator,\nwhere the correct way to compare instances of this type is generally\nwith the equals() method.\nIt is possible to create distinct instances that are equal but do not compare as == since\nthey are different objects.\nExamples of classes which should generally\nnot be compared by reference are java.lang.Integer, java.lang.Float, etc.</p>\n\n    \n','2019-10-15 16:02:23'),(78,'RC_REF_COMPARISON_BAD_PRACTICE_BOOLEAN',0,1,'\n\n<p> This method compares two Boolean values using the == or != operator.\nNormally, there are only two Boolean values (Boolean.TRUE and Boolean.FALSE),\nbut it is possible to create other Boolean objects using the <code>new Boolean(b)</code>\nconstructor. It is best to avoid such objects, but if they do exist,\nthen checking Boolean objects for equality using == or != will give results\nthan are different than you would get using <code>.equals(...)</code>.\n</p>\n\n    \n','2019-10-15 16:02:23'),(79,'VA_FORMAT_STRING_USES_NEWLINE',0,1,'\n\n<p>\nThis format string includes a newline character (\\n). In format strings, it is generally\n preferable to use %n, which will produce the platform-specific line separator.\n</p>\n\n     \n','2019-10-15 16:02:23'),(80,'BIT_SIGNED_CHECK',0,1,'\n\n<p> This method compares an expression such as\n<code>((event.detail &amp; SWT.SELECTED) &gt; 0)</code>.\nUsing bit arithmetic and then comparing with the greater than operator can\nlead to unexpected results (of course depending on the value of\nSWT.SELECTED). If SWT.SELECTED is a negative number, this is a candidate\nfor a bug. Even when SWT.SELECTED is not negative, it seems good practice\nto use \'!= 0\' instead of \'&gt; 0\'.\n</p>\n\n    \n','2019-10-15 16:02:23'),(81,'ODR_OPEN_DATABASE_RESOURCE',0,1,'\n\n<p> The method creates a database resource (such as a database connection\nor row set), does not assign it to any\nfields, pass it to other methods, or return it, and does not appear to close\nthe object on all paths out of the method.&nbsp; Failure to\nclose database resources on all paths out of a method may\nresult in poor performance, and could cause the application to\nhave problems communicating with the database.\n</p>\n\n    \n','2019-10-15 16:02:23'),(82,'ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH',0,1,'\n\n<p> The method creates a database resource (such as a database connection\nor row set), does not assign it to any\nfields, pass it to other methods, or return it, and does not appear to close\nthe object on all exception paths out of the method.&nbsp; Failure to\nclose database resources on all paths out of a method may\nresult in poor performance, and could cause the application to\nhave problems communicating with the database.</p>\n\n    \n','2019-10-15 16:02:23'),(83,'ISC_INSTANTIATE_STATIC_CLASS',0,1,'\n\n<p> This class allocates an object that is based on a class that only supplies static methods. This object\ndoes not need to be created, just access the static methods directly using the class name as a qualifier.</p>\n\n        \n','2019-10-15 16:02:23'),(84,'DMI_RANDOM_USED_ONLY_ONCE',0,1,'\n\n<p> This code creates a java.util.Random object, uses it to generate one random number, and then discards\nthe Random object. This produces mediocre quality random numbers and is inefficient.\nIf possible, rewrite the code so that the Random object is created once and saved, and each time a new random number\nis required invoke a method on the existing Random object to obtain it.\n</p>\n\n<p>If it is important that the generated Random numbers not be guessable, you <em>must</em> not create a new Random for each random\nnumber; the values are too easily guessable. You should strongly consider using a java.security.SecureRandom instead\n(and avoid allocating a new SecureRandom for each random number needed).\n</p>\n\n    \n','2019-10-15 16:02:23'),(85,'BC_EQUALS_METHOD_SHOULD_WORK_FOR_ALL_OBJECTS',0,1,'\n\n<p>\nThe <code>equals(Object o)</code> method shouldn\'t make any assumptions\nabout the type of <code>o</code>. It should simply return\nfalse if <code>o</code> is not the same type as <code>this</code>.\n</p>\n\n    \n','2019-10-15 16:02:23'),(86,'J2EE_STORE_OF_NON_SERIALIZABLE_OBJECT_INTO_SESSION',579,1,'\n\n<p>\nThis code seems to be storing a non-serializable object into an HttpSession.\nIf this session is passivated or migrated, an error will result.\n</p>\n\n    \n','2019-10-15 16:02:23'),(87,'GC_UNCHECKED_TYPE_IN_GENERIC_CALL',0,1,'\n     \n     <p> This call to a generic collection method passes an argument\n    while compile type Object where a specific type from\n    the generic type parameters is expected.\n    Thus, neither the standard Java type system nor static analysis\n    can provide useful information on whether the\n    object being passed as a parameter is of an appropriate type.\n    </p>\n     \n    \n','2019-10-15 16:02:23'),(88,'PZ_DONT_REUSE_ENTRY_OBJECTS_IN_ITERATORS',0,1,'\n     \n     <p> The entrySet() method is allowed to return a view of the\n     underlying Map in which an Iterator and Map.Entry. This clever\n     idea was used in several Map implementations, but introduces the possibility\n     of nasty coding mistakes. If a map <code>m</code> returns\n     such an iterator for an entrySet, then\n     <code>c.addAll(m.entrySet())</code> will go badly wrong. All of\n     the Map implementations in OpenJDK 1.7 have been rewritten to avoid this,\n     you should to.\n    </p>\n     \n    \n','2019-10-15 16:02:23'),(89,'DMI_ENTRY_SETS_MAY_REUSE_ENTRY_OBJECTS',0,1,'\n     \n     <p> The entrySet() method is allowed to return a view of the\n     underlying Map in which a single Entry object is reused and returned\n     during the iteration.  As of Java 1.6, both IdentityHashMap\n     and EnumMap did so. When iterating through such a Map,\n     the Entry value is only valid until you advance to the next iteration.\n     If, for example, you try to pass such an entrySet to an addAll method,\n     things will go badly wrong.\n    </p>\n     \n    \n','2019-10-15 16:02:23'),(90,'DMI_USING_REMOVEALL_TO_CLEAR_COLLECTION',0,1,'\n     \n     <p> If you want to remove all elements from a collection <code>c</code>, use <code>c.clear</code>,\nnot <code>c.removeAll(c)</code>. Calling  <code>c.removeAll(c)</code> to clear a collection\nis less clear, susceptible to errors from typos, less efficient and\nfor some collections, might throw a <code>ConcurrentModificationException</code>.\n    </p>\n     \n    \n','2019-10-15 16:02:23'),(91,'NP_OPTIONAL_RETURN_NULL',0,2,'\n       \n       <p>\n    The usage of Optional return type (java.util.Optional or com.google.common.base.Optional)\n    always means that explicit null returns were not desired by design.\n    Returning a null value in such case is a contract violation and will most likely break client code.\n       </p>\n       \n       \n','2019-10-15 16:02:23'),(92,'NP_NONNULL_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR',0,2,'\n       \n       <p> The field is marked as non-null, but isn\'t written to by the constructor.\n    The field might be initialized elsewhere during constructor, or might always\n    be initialized before use.\n       </p>\n       \n       \n','2019-10-15 16:02:23'),(93,'VR_UNRESOLVABLE_REFERENCE',0,2,'\n      \n      <p>\n      This class makes a reference to a class or method that can not be\n    resolved using against the libraries it is being analyzed with.\n      </p>\n      \n    \n','2019-10-15 16:02:23'),(94,'IL_INFINITE_LOOP',0,2,'\n\n<p>This loop doesn\'t seem to have a way to terminate (other than by perhaps\nthrowing an exception).</p>\n\n    \n','2019-10-15 16:02:23'),(95,'IO_APPENDING_TO_OBJECT_OUTPUT_STREAM',0,2,'\n      \n      <p>\n     This code opens a file in append mode and then wraps the result in an object output stream.\n     This won\'t allow you to append to an existing object output stream stored in a file. If you want to be\n     able to append to an object output stream, you need to keep the object output stream open.\n      </p>\n      <p>The only situation in which opening a file in append mode and the writing an object output stream\n      could work is if on reading the file you plan to open it in random access mode and seek to the byte offset\n      where the append started.\n      </p>\n\n      <p>\n      TODO: example.\n      </p>\n      \n    \n','2019-10-15 16:02:23'),(96,'IL_INFINITE_RECURSIVE_LOOP',674,2,'\n\n<p>This method unconditionally invokes itself. This would seem to indicate\nan infinite recursive loop that will result in a stack overflow.</p>\n\n    \n','2019-10-15 16:02:23'),(97,'IL_CONTAINER_ADDED_TO_ITSELF',0,2,'\n\n<p>A collection is added to itself. As a result, computing the hashCode of this\nset will throw a StackOverflowException.\n</p>\n\n    \n','2019-10-15 16:02:23'),(98,'RpC_REPEATED_CONDITIONAL_TEST',0,2,'\n\n<p>The code contains a conditional test is performed twice, one right after the other\n(e.g., <code>x == 0 || x == 0</code>). Perhaps the second occurrence is intended to be something else\n(e.g., <code>x == 0 || y == 0</code>).\n</p>\n\n    \n','2019-10-15 16:02:23'),(99,'FL_MATH_USING_FLOAT_PRECISION',0,2,'\n\n<p>\n   The method performs math operations using floating point precision.\n   Floating point precision is very imprecise. For example,\n   16777216.0f + 1.0f = 16777216.0f. Consider using double math instead.</p>\n\n    \n','2019-10-15 16:02:23'),(100,'CAA_COVARIANT_ARRAY_ELEMENT_STORE',0,2,'\n\n<p>Value is stored into the array and the value type doesn\'t match the array type.\nIt\'s known from the analysis that actual array type is narrower than the declared type of its variable or field\nand this assignment doesn\'t satisfy the original array type. This assignment may cause ArrayStoreException\nat runtime.\n</p>\n\n    \n','2019-10-15 16:02:23'),(101,'DMI_VACUOUS_CALL_TO_EASYMOCK_METHOD',0,2,'\n      \n    <p>This call doesn\'t pass any objects to the EasyMock method, so the call doesn\'t do anything.\n</p>\n\n\n    \n','2019-10-15 16:02:23'),(102,'DMI_FUTILE_ATTEMPT_TO_CHANGE_MAXPOOL_SIZE_OF_SCHEDULED_THREAD_POOL_EXECUTOR',0,2,'\n      \n    <p>(<a href=\"http://docs.oracle.com/javase/6/docs/api/java/util/concurrent/ScheduledThreadPoolExecutor.html\">Javadoc</a>)\nWhile ScheduledThreadPoolExecutor inherits from ThreadPoolExecutor, a few of the inherited tuning methods are not useful for it. In particular, because it acts as a fixed-sized pool using corePoolSize threads and an unbounded queue, adjustments to maximumPoolSize have no useful effect.\n    </p>\n\n\n    \n','2019-10-15 16:02:23'),(103,'DMI_BIGDECIMAL_CONSTRUCTED_FROM_DOUBLE',0,2,'\n      \n    <p>\nThis code creates a BigDecimal from a double value that doesn\'t translate well to a\ndecimal number.\nFor example, one might assume that writing new BigDecimal(0.1) in Java creates a BigDecimal which is exactly equal to 0.1 (an unscaled value of 1, with a scale of 1), but it is actually equal to 0.1000000000000000055511151231257827021181583404541015625.\nYou probably want to use the BigDecimal.valueOf(double d) method, which uses the String representation\nof the double to create the BigDecimal (e.g., BigDecimal.valueOf(0.1) gives 0.1).\n</p>\n\n\n    \n','2019-10-15 16:02:23'),(104,'DMI_SCHEDULED_THREAD_POOL_EXECUTOR_WITH_ZERO_CORE_THREADS',0,2,'\n      \n    <p>(<a href=\"http://docs.oracle.com/javase/6/docs/api/java/util/concurrent/ScheduledThreadPoolExecutor.html#ScheduledThreadPoolExecutor%28int%29\">Javadoc</a>)\nA ScheduledThreadPoolExecutor with zero core threads will never execute anything; changes to the max pool size are ignored.\n</p>\n\n\n    \n','2019-10-15 16:02:23'),(105,'DMI_ANNOTATION_IS_NOT_VISIBLE_TO_REFLECTION',0,2,'\n\n  <p> Unless an annotation has itself been annotated with  @Retention(RetentionPolicy.RUNTIME), the annotation can\'t be observed using reflection\n(e.g., by using the isAnnotationPresent method).\n   .</p>\n\n    \n','2019-10-15 16:02:23'),(106,'NP_ARGUMENT_MIGHT_BE_NULL',0,2,'\n      \n      <p>\n    A parameter to this method has been identified as a value that should\n    always be checked to see whether or not it is null, but it is being dereferenced\n    without a preceding null check.\n      </p>\n      \n   \n','2019-10-15 16:02:23'),(107,'RV_ABSOLUTE_VALUE_OF_RANDOM_INT',0,2,'\n\n<p> This code generates a random signed integer and then computes\nthe absolute value of that random integer.  If the number returned by the random number\ngenerator is <code>Integer.MIN_VALUE</code>, then the result will be negative as well (since\n<code>Math.abs(Integer.MIN_VALUE) == Integer.MIN_VALUE</code>). (Same problem arises for long values as well).\n</p>\n\n    \n','2019-10-15 16:02:23'),(108,'RV_ABSOLUTE_VALUE_OF_HASHCODE',0,2,'\n\n<p> This code generates a hashcode and then computes\nthe absolute value of that hashcode.  If the hashcode\nis <code>Integer.MIN_VALUE</code>, then the result will be negative as well (since\n<code>Math.abs(Integer.MIN_VALUE) == Integer.MIN_VALUE</code>).\n</p>\n<p>One out of 2^32 strings have a hashCode of Integer.MIN_VALUE,\nincluding \"polygenelubricants\" \"GydZG_\" and \"\"DESIGNING WORKHOUSES\".\n</p>\n\n    \n','2019-10-15 16:02:23'),(109,'RV_01_TO_INT',0,2,'\n\n  <p>A random value from 0 to 1 is being coerced to the integer value 0. You probably\nwant to multiply the random value by something else before coercing it to an integer, or use the <code>Random.nextInt(n)</code> method.\n</p>\n\n    \n','2019-10-15 16:02:23'),(110,'DM_INVALID_MIN_MAX',0,2,'\n\n  <p>This code tries to limit the value bounds using the construct like Math.min(0, Math.max(100, value)). However the order of\n  the constants is incorrect: it should be Math.min(100, Math.max(0, value)). As the result this code always produces the same result\n  (or NaN if the value is NaN).</p>\n\n    \n','2019-10-15 16:02:23'),(111,'EQ_COMPARING_CLASS_NAMES',0,2,'\n\n  <p> This method checks to see if two objects are the same class by checking to see if the names\nof their classes are equal. You can have different classes with the same name if they are loaded by\ndifferent class loaders. Just check to see if the class objects are the same.\n</p>\n\n    \n','2019-10-15 16:02:23'),(112,'EQ_ALWAYS_TRUE',0,2,'\n\n  <p> This class defines an equals method that always returns true. This is imaginative, but not very smart.\nPlus, it means that the equals method is not symmetric.\n</p>\n\n    \n','2019-10-15 16:02:23'),(113,'EQ_ALWAYS_FALSE',0,2,'\n\n  <p> This class defines an equals method that always returns false. This means that an object is not equal to itself, and it is impossible to create useful Maps or Sets of this class. More fundamentally, it means\nthat equals is not reflexive, one of the requirements of the equals method.</p>\n<p>The likely intended semantics are object identity: that an object is equal to itself. This is the behavior inherited from class <code>Object</code>. If you need to override an equals inherited from a different\nsuperclass, you can use:</p>\n<pre><code>public boolean equals(Object o) {\n    return this == o;\n}\n</code></pre>\n\n    \n','2019-10-15 16:02:23'),(114,'EQ_OVERRIDING_EQUALS_NOT_SYMMETRIC',0,2,'\n\n  <p> This class defines an equals method that overrides an equals method in a superclass. Both equals methods\nmethods use <code>instanceof</code> in the determination of whether two objects are equal. This is fraught with peril,\nsince it is important that the equals method is symmetrical (in other words, <code>a.equals(b) == b.equals(a)</code>).\nIf B is a subtype of A, and A\'s equals method checks that the argument is an instanceof A, and B\'s equals method\nchecks that the argument is an instanceof B, it is quite likely that the equivalence relation defined by these\nmethods is not symmetric.\n</p>\n\n    \n','2019-10-15 16:02:23'),(115,'EQ_DONT_DEFINE_EQUALS_FOR_ENUM',0,2,'\n\n  <p> This class defines an enumeration, and equality on enumerations are defined\nusing object identity. Defining a covariant equals method for an enumeration\nvalue is exceptionally bad practice, since it would likely result\nin having two different enumeration values that compare as equals using\nthe covariant enum method, and as not equal when compared normally.\nDon\'t do it.\n</p>\n\n    \n','2019-10-15 16:02:23'),(116,'EQ_SELF_USE_OBJECT',0,2,'\n\n  <p> This class defines a covariant version of the <code>equals()</code>\n  method, but inherits the normal <code>equals(Object)</code> method\n  defined in the base <code>java.lang.Object</code> class.&nbsp;\n  The class should probably define a <code>boolean equals(Object)</code> method.\n  </p>\n\n    \n','2019-10-15 16:02:23'),(117,'EQ_OTHER_USE_OBJECT',0,2,'\n\n  <p> This class defines an <code>equals()</code>\n  method, that doesn\'t override the normal <code>equals(Object)</code> method\n  defined in the base <code>java.lang.Object</code> class.&nbsp;\n  The class should probably define a <code>boolean equals(Object)</code> method.\n  </p>\n\n    \n','2019-10-15 16:02:23'),(118,'EQ_OTHER_NO_OBJECT',0,2,'\n\n  <p> This class defines an <code>equals()</code>\n  method, that doesn\'t override the normal <code>equals(Object)</code> method\n  defined in the base <code>java.lang.Object</code> class.&nbsp; Instead, it\n  inherits an <code>equals(Object)</code> method from a superclass.\n  The class should probably define a <code>boolean equals(Object)</code> method.\n  </p>\n\n    \n','2019-10-15 16:02:23'),(119,'HE_SIGNATURE_DECLARES_HASHING_OF_UNHASHABLE_CLASS',0,2,'\n\n  <p> A method, field or class declares a generic signature where a non-hashable class\nis used in context where a hashable class is required.\nA class that declares an equals method but inherits a hashCode() method\nfrom Object is unhashable, since it doesn\'t fulfill the requirement that\nequal objects have equal hashCodes.\n</p>\n\n    \n','2019-10-15 16:02:23'),(120,'HE_USE_OF_UNHASHABLE_CLASS',0,2,'\n\n  <p> A class defines an equals(Object)  method but not a hashCode() method,\nand thus doesn\'t fulfill the requirement that equal objects have equal hashCodes.\nAn instance of this class is used in a hash data structure, making the need to\nfix this problem of highest importance.\n\n    \n','2019-10-15 16:02:23'),(121,'UR_UNINIT_READ',0,2,'\n\n  <p> This constructor reads a field which has not yet been assigned a value.&nbsp;\n  This is often caused when the programmer mistakenly uses the field instead\n  of one of the constructor\'s parameters.</p>\n\n    \n','2019-10-15 16:02:23'),(122,'UR_UNINIT_READ_CALLED_FROM_SUPER_CONSTRUCTOR',0,2,'\n\n  <p> This method is invoked in the constructor of the superclass. At this point,\n    the fields of the class have not yet initialized.</p>\n<p>To make this more concrete, consider the following classes:</p>\n<pre><code>abstract class A {\n    int hashCode;\n    abstract Object getValue();\n\n    A() {\n        hashCode = getValue().hashCode();\n    }\n}\n\nclass B extends A {\n    Object value;\n\n    B(Object v) {\n        this.value = v;\n    }\n\n    Object getValue() {\n        return value;\n    }\n}\n</code></pre>\n<p>When a <code>B</code> is constructed,\nthe constructor for the <code>A</code> class is invoked\n<em>before</em> the constructor for <code>B</code> sets <code>value</code>.\nThus, when the constructor for <code>A</code> invokes <code>getValue</code>,\nan uninitialized value is read for <code>value</code>.\n</p>\n\n    \n','2019-10-15 16:02:23'),(123,'NM_VERY_CONFUSING',0,2,'\n\n  <p> The referenced methods have names that differ only by capitalization.\nThis is very confusing because if the capitalization were\nidentical then one of the methods would override the other.\n</p>\n\n    \n','2019-10-15 16:02:23'),(124,'NM_WRONG_PACKAGE',0,2,'\n\n  <p> The method in the subclass doesn\'t override a similar method in a superclass because the type of a parameter doesn\'t exactly match\nthe type of the corresponding parameter in the superclass. For example, if you have:</p>\n<pre><code>import alpha.Foo;\n\npublic class A {\n    public int f(Foo x) { return 17; }\n}\n----\nimport beta.Foo;\n\npublic class B extends A {\n    public int f(Foo x) { return 42; }\n}\n</code></pre>\n<p>The <code>f(Foo)</code> method defined in class <code>B</code> doesn\'t\noverride the\n<code>f(Foo)</code> method defined in class <code>A</code>, because the argument\ntypes are <code>Foo</code>\'s from different packages.\n</p>\n\n    \n','2019-10-15 16:02:23'),(125,'NM_METHOD_CONSTRUCTOR_CONFUSION',0,2,'\n\n  <p> This regular method has the same name as the class it is defined in. It is likely that this was intended to be a constructor.\n      If it was intended to be a constructor, remove the declaration of a void return value.\n    If you had accidentally defined this method, realized the mistake, defined a proper constructor\n    but can\'t get rid of this method due to backwards compatibility, deprecate the method.\n</p>\n\n    \n','2019-10-15 16:02:23'),(126,'NM_LCASE_HASHCODE',0,2,'\n\n  <p> This class defines a method called <code>hashcode()</code>.&nbsp; This method\n  does not override the <code>hashCode()</code> method in <code>java.lang.Object</code>,\n  which is probably what was intended.</p>\n\n    \n','2019-10-15 16:02:23'),(127,'NM_LCASE_TOSTRING',0,2,'\n\n  <p> This class defines a method called <code>tostring()</code>.&nbsp; This method\n  does not override the <code>toString()</code> method in <code>java.lang.Object</code>,\n  which is probably what was intended.</p>\n\n    \n','2019-10-15 16:02:23'),(128,'NM_BAD_EQUAL',0,2,'\n\n<p> This class defines a method <code>equal(Object)</code>.&nbsp; This method does\nnot override the <code>equals(Object)</code> method in <code>java.lang.Object</code>,\nwhich is probably what was intended.</p>\n\n    \n','2019-10-15 16:02:23'),(129,'SE_READ_RESOLVE_IS_STATIC',0,2,'\n\n  <p> In order for the readResolve method to be recognized by the serialization\nmechanism, it must not be declared as a static method.\n</p>\n\n    \n','2019-10-15 16:02:23'),(130,'SE_METHOD_MUST_BE_PRIVATE',0,2,'\n\n  <p> This class implements the <code>Serializable</code> interface, and defines a method\n  for custom serialization/deserialization. But since that method isn\'t declared private,\n  it will be silently ignored by the serialization/deserialization API.</p>\n\n    \n','2019-10-15 16:02:23'),(131,'SF_DEAD_STORE_DUE_TO_SWITCH_FALLTHROUGH',484,2,'\n\n  <p> A value stored in the previous switch case is overwritten here due to a switch fall through. It is likely that\n    you forgot to put a break or return at the end of the previous case.\n</p>\n\n    \n','2019-10-15 16:02:23'),(132,'SF_DEAD_STORE_DUE_TO_SWITCH_FALLTHROUGH_TO_THROW',484,2,'\n\n  <p> A value stored in the previous switch case is ignored here due to a switch fall through to a place where\n    an exception is thrown. It is likely that\n    you forgot to put a break or return at the end of the previous case.\n</p>\n\n    \n','2019-10-15 16:02:23'),(133,'NP_UNWRITTEN_FIELD',0,2,'\n\n  <p> The program is dereferencing a field that does not seem to ever have a non-null value written to it.\nUnless the field is initialized via some mechanism not seen by the analysis,\ndereferencing this value will generate a null pointer exception.\n</p>\n\n    \n','2019-10-15 16:02:23'),(134,'UWF_NULL_FIELD',0,2,'\n\n  <p> All writes to this field are of the constant value null, and thus\nall reads of the field will return null.\nCheck for errors, or remove it if it is useless.</p>\n\n    \n','2019-10-15 16:02:23'),(135,'UWF_UNWRITTEN_FIELD',0,2,'\n\n  <p> This field is never written.&nbsp; All reads of it will return the default\nvalue. Check for errors (should it have been initialized?), or remove it if it is useless.</p>\n\n    \n','2019-10-15 16:02:23'),(136,'SIC_THREADLOCAL_DEADLY_EMBRACE',0,2,'\n\n  <p> This class is an inner class, but should probably be a static inner class.\n  As it is, there is a serious danger of a deadly embrace between the inner class\n  and the thread local in the outer class. Because the inner class isn\'t static,\n  it retains a reference to the outer class.\n  If the thread local contains a reference to an instance of the inner\n  class, the inner and outer instance will both be reachable\n  and not eligible for garbage collection.\n</p>\n\n    \n','2019-10-15 16:02:23'),(137,'RANGE_ARRAY_INDEX',0,2,'\n\n   <p> Array operation is performed, but array index is out of bounds, which will result in ArrayIndexOutOfBoundsException at runtime.</p>\n\n    \n','2019-10-15 16:02:23'),(138,'RANGE_ARRAY_OFFSET',0,2,'\n\n   <p> Method is called with array parameter and offset parameter, but the offset is out of bounds. This will result in IndexOutOfBoundsException at runtime. </p>\n\n    \n','2019-10-15 16:02:23'),(139,'RANGE_ARRAY_LENGTH',0,2,'\n\n   <p> Method is called with array parameter and length parameter, but the length is out of bounds. This will result in IndexOutOfBoundsException at runtime. </p>\n\n    \n','2019-10-15 16:02:23'),(140,'RANGE_STRING_INDEX',0,2,'\n\n   <p> String method is called and specified string index is out of bounds. This will result in StringIndexOutOfBoundsException at runtime. </p>\n\n    \n','2019-10-15 16:02:23'),(141,'RV_RETURN_VALUE_IGNORED',0,2,'\n\n   <p> The return value of this method should be checked. One common\ncause of this warning is to invoke a method on an immutable object,\nthinking that it updates the object. For example, in the following code\nfragment,</p>\n<pre><code>String dateString = getHeaderField(name);\ndateString.trim();\n</code></pre>\n<p>the programmer seems to be thinking that the trim() method will update\nthe String referenced by dateString. But since Strings are immutable, the trim()\nfunction returns a new String value, which is being ignored here. The code\nshould be corrected to: </p>\n<pre><code>String dateString = getHeaderField(name);\ndateString = dateString.trim();\n</code></pre>\n\n    \n','2019-10-15 16:02:23'),(142,'RV_EXCEPTION_NOT_THROWN',0,2,'\n\n   <p> This code creates an exception (or error) object, but doesn\'t do anything with it. For example,\nsomething like </p>\n<pre><code>if (x &lt; 0) {\n    new IllegalArgumentException(\"x must be nonnegative\");\n}\n</code></pre>\n<p>It was probably the intent of the programmer to throw the created exception:</p>\n<pre><code>if (x &lt; 0) {\n    throw new IllegalArgumentException(\"x must be nonnegative\");\n}\n</code></pre>\n\n    \n','2019-10-15 16:02:23'),(143,'RV_CHECK_COMPARETO_FOR_SPECIFIC_RETURN_VALUE',0,2,'\n\n   <p> This code invoked a compareTo or compare method, and checks to see if the return value is a specific value,\nsuch as 1 or -1. When invoking these methods, you should only check the sign of the result, not for any specific\nnon-zero value. While many or most compareTo and compare methods only return -1, 0 or 1, some of them\nwill return other values.\n\n    \n','2019-10-15 16:02:23'),(144,'NP_ALWAYS_NULL',0,2,'\n\n<p> A null pointer is dereferenced here.&nbsp; This will lead to a\n<code>NullPointerException</code> when the code is executed.</p>\n\n    \n','2019-10-15 16:02:23'),(145,'NP_CLOSING_NULL',0,2,'\n\n<p> close() is being invoked on a value that is always null. If this statement is executed,\na null pointer exception will occur. But the big risk here you never close\nsomething that should be closed.\n\n    \n','2019-10-15 16:02:23'),(146,'NP_STORE_INTO_NONNULL_FIELD',0,2,'\n      \n<p> A value that could be null is stored into a field that has been annotated as @Nonnull. </p>\n\n    \n','2019-10-15 16:02:23'),(147,'NP_ALWAYS_NULL_EXCEPTION',0,2,'\n\n<p> A pointer which is null on an exception path is dereferenced here.&nbsp;\nThis will lead to a <code>NullPointerException</code> when the code is executed.&nbsp;\nNote that because SpotBugs currently does not prune infeasible exception paths,\nthis may be a false warning.</p>\n\n<p> Also note that SpotBugs considers the default case of a switch statement to\nbe an exception path, since the default case is often infeasible.</p>\n\n    \n','2019-10-15 16:02:23'),(148,'NP_NULL_ON_SOME_PATH',0,2,'\n\n<p> There is a branch of statement that, <em>if executed,</em>  guarantees that\na null value will be dereferenced, which\nwould generate a <code>NullPointerException</code> when the code is executed.\nOf course, the problem might be that the branch or statement is infeasible and that\nthe null pointer exception can\'t ever be executed; deciding that is beyond the ability of SpotBugs.\n</p>\n\n    \n','2019-10-15 16:02:23'),(149,'NP_NULL_ON_SOME_PATH_EXCEPTION',0,2,'\n\n<p> A reference value which is null on some exception control path is\ndereferenced here.&nbsp; This may lead to a <code>NullPointerException</code>\nwhen the code is executed.&nbsp;\nNote that because SpotBugs currently does not prune infeasible exception paths,\nthis may be a false warning.</p>\n\n<p> Also note that SpotBugs considers the default case of a switch statement to\nbe an exception path, since the default case is often infeasible.</p>\n\n    \n','2019-10-15 16:02:23'),(150,'NP_NULL_PARAM_DEREF',0,2,'\n      \n      <p>\n      This method call passes a null value for a non-null method parameter.\n    Either the parameter is annotated as a parameter that should\n    always be non-null, or analysis has shown that it will always be\n    dereferenced.\n      </p>\n      \n   \n','2019-10-15 16:02:23'),(151,'NP_NULL_PARAM_DEREF_NONVIRTUAL',0,2,'\n      \n      <p>\n      A possibly-null value is passed to a non-null method parameter.\n    Either the parameter is annotated as a parameter that should\n    always be non-null, or analysis has shown that it will always be\n    dereferenced.\n      </p>\n      \n   \n','2019-10-15 16:02:23'),(152,'NP_NULL_PARAM_DEREF_ALL_TARGETS_DANGEROUS',0,2,'\n      \n      <p>\n      A possibly-null value is passed at a call site where all known\n      target methods require the parameter to be non-null.\n    Either the parameter is annotated as a parameter that should\n    always be non-null, or analysis has shown that it will always be\n    dereferenced.\n      </p>\n      \n   \n','2019-10-15 16:02:23'),(153,'NP_NONNULL_PARAM_VIOLATION',0,2,'\n      \n      <p>\n      This method passes a null value as the parameter of a method which\n    must be non-null. Either this parameter has been explicitly marked\n    as @Nonnull, or analysis has determined that this parameter is\n    always dereferenced.\n      </p>\n      \n   \n','2019-10-15 16:02:23'),(154,'NP_NONNULL_RETURN_VIOLATION',0,2,'\n      \n      <p>\n      This method may return a null value, but the method (or a superclass method\n      which it overrides) is declared to return @Nonnull.\n      </p>\n      \n   \n','2019-10-15 16:02:23'),(155,'NP_GUARANTEED_DEREF',0,2,'\n          \n              <p>\n              There is a statement or branch that if executed guarantees that\n              a value is null at this point, and that\n              value that is guaranteed to be dereferenced\n              (except on forward paths involving runtime exceptions).\n              </p>\n        <p>Note that a check such as\n            <code>if (x == null) throw new NullPointerException();</code>\n            is treated as a dereference of <code>x</code>.</p>\n          \n      \n','2019-10-15 16:02:23'),(156,'NP_GUARANTEED_DEREF_ON_EXCEPTION_PATH',0,2,'\n          \n              <p>\n              There is a statement or branch on an exception path\n                that if executed guarantees that\n              a value is null at this point, and that\n              value that is guaranteed to be dereferenced\n              (except on forward paths involving runtime exceptions).\n              </p>\n          \n      \n','2019-10-15 16:02:23'),(157,'DMI_ARGUMENTS_WRONG_ORDER',0,2,'\n\n<p> The arguments to this method call seem to be in the wrong order.\nFor example, a call <code>Preconditions.checkNotNull(\"message\", message)</code>\nhas reserved arguments: the value to be checked is the first argument.\n</p>\n\n    \n','2019-10-15 16:02:23'),(158,'RCN_REDUNDANT_NULLCHECK_WOULD_HAVE_BEEN_A_NPE',0,2,'\n\n<p> A value is checked here to see whether it is null, but this value can\'t\nbe null because it was previously dereferenced and if it were null a null pointer\nexception would have occurred at the earlier dereference.\nEssentially, this code and the previous dereference\ndisagree as to whether this value is allowed to be null. Either the check is redundant\nor the previous dereference is erroneous.</p>\n\n    \n','2019-10-15 16:02:23'),(159,'RC_REF_COMPARISON',0,2,'\n\n<p> This method compares two reference values using the == or != operator,\nwhere the correct way to compare instances of this type is generally\nwith the equals() method.\nIt is possible to create distinct instances that are equal but do not compare as == since\nthey are different objects.\nExamples of classes which should generally\nnot be compared by reference are java.lang.Integer, java.lang.Float, etc.</p>\n\n    \n','2019-10-15 16:02:23'),(160,'VA_PRIMITIVE_ARRAY_PASSED_TO_OBJECT_VARARG',0,2,'\n\n<p>\nThis code passes a primitive array to a function that takes a variable number of object arguments.\nThis creates an array of length one to hold the primitive array and passes it to the function.\n</p>\n\n    \n','2019-10-15 16:02:23'),(161,'EC_UNRELATED_TYPES_USING_POINTER_EQUALITY',0,2,'\n\n<p> This method uses using pointer equality to compare two references that seem to be of\ndifferent types.  The result of this comparison will always be false at runtime.\n</p>\n\n    \n','2019-10-15 16:02:23'),(162,'EC_UNRELATED_TYPES',0,2,'\n\n<p> This method calls equals(Object) on two references of different\nclass types and analysis suggests they will be to objects of different classes\nat runtime. Further, examination of the equals methods that would be invoked suggest that either\nthis call will always return false, or else the equals method is not be symmetric (which is\na property required by the contract\nfor equals in class Object).\n</p>\n\n    \n','2019-10-15 16:02:23'),(163,'EC_ARRAY_AND_NONARRAY',0,2,'\n\n<p>\nThis method invokes the .equals(Object o) to compare an array and a reference that doesn\'t seem\nto be an array. If things being compared are of different types, they are guaranteed to be unequal\nand the comparison is almost certainly an error. Even if they are both arrays, the equals method\non arrays only determines of the two arrays are the same object.\nTo compare the\ncontents of the arrays, use java.util.Arrays.equals(Object[], Object[]).\n</p>\n\n    \n','2019-10-15 16:02:23'),(164,'EC_NULL_ARG',0,2,'\n\n<p> This method calls equals(Object), passing a null value as\nthe argument. According to the contract of the equals() method,\nthis call should always return <code>false</code>.</p>\n\n    \n','2019-10-15 16:02:23'),(165,'EC_UNRELATED_INTERFACES',0,2,'\n\n<p> This method calls equals(Object) on two references of unrelated\ninterface types, where neither is a subtype of the other,\nand there are no known non-abstract classes which implement both interfaces.\nTherefore, the objects being compared\nare unlikely to be members of the same class at runtime\n(unless some application classes were not analyzed, or dynamic class\nloading can occur at runtime).\nAccording to the contract of equals(),\nobjects of different\nclasses should always compare as unequal; therefore, according to the\ncontract defined by java.lang.Object.equals(Object),\nthe result of this comparison will always be false at runtime.\n</p>\n\n    \n','2019-10-15 16:02:23'),(166,'EC_UNRELATED_CLASS_AND_INTERFACE',0,2,'\n      \n<p>\nThis method calls equals(Object) on two references,  one of which is a class\nand the other an interface, where neither the class nor any of its\nnon-abstract subclasses implement the interface.\nTherefore, the objects being compared\nare unlikely to be members of the same class at runtime\n(unless some application classes were not analyzed, or dynamic class\nloading can occur at runtime).\nAccording to the contract of equals(),\nobjects of different\nclasses should always compare as unequal; therefore, according to the\ncontract defined by java.lang.Object.equals(Object),\nthe result of this comparison will always be false at runtime.\n</p>\n      \n   \n','2019-10-15 16:02:23'),(167,'SA_LOCAL_SELF_ASSIGNMENT_INSTEAD_OF_FIELD',0,2,'\n\n<p> This method contains a self assignment of a local variable, and there\nis a field with an identical name.\nassignment appears to have been ; e.g.</p>\n<pre><code>    int foo;\n    public void setFoo(int foo) {\n        foo = foo;\n    }\n</code></pre>\n<p>The assignment is useless. Did you mean to assign to the field instead?</p>\n\n    \n','2019-10-15 16:02:23'),(168,'INT_BAD_COMPARISON_WITH_INT_VALUE',0,2,'\n\n<p> This code compares an int value with a long constant that is outside\nthe range of values that can be represented as an int value.\nThis comparison is vacuous and possibly incorrect.\n</p>\n\n    \n','2019-10-15 16:02:23'),(169,'INT_BAD_COMPARISON_WITH_SIGNED_BYTE',0,2,'\n\n<p> Signed bytes can only have a value in the range -128 to 127. Comparing\na signed byte with a value outside that range is vacuous and likely to be incorrect.\nTo convert a signed byte <code>b</code> to an unsigned value in the range 0..255,\nuse <code>0xff &amp; b</code>.\n</p>\n\n    \n','2019-10-15 16:02:23'),(170,'INT_BAD_COMPARISON_WITH_NONNEGATIVE_VALUE',0,2,'\n\n<p> This code compares a value that is guaranteed to be non-negative with a negative constant or zero.\n</p>\n\n    \n','2019-10-15 16:02:23'),(171,'BIT_ADD_OF_SIGNED_BYTE',0,2,'\n\n<p> Adds a byte value and a value which is known to have the 8 lower bits clear.\nValues loaded from a byte array are sign extended to 32 bits\nbefore any bitwise operations are performed on the value.\nThus, if <code>b[0]</code> contains the value <code>0xff</code>, and\n<code>x</code> is initially 0, then the code\n<code>((x &lt;&lt; 8) + b[0])</code>  will sign extend <code>0xff</code>\nto get <code>0xffffffff</code>, and thus give the value\n<code>0xffffffff</code> as the result.\n</p>\n\n<p>In particular, the following code for packing a byte array into an int is badly wrong: </p>\n<pre><code>int result = 0;\nfor(int i = 0; i &lt; 4; i++)\n    result = ((result &lt;&lt; 8) + b[i]);\n</code></pre>\n<p>The following idiom will work instead: </p>\n<pre><code>int result = 0;\nfor(int i = 0; i &lt; 4; i++)\n    result = ((result &lt;&lt; 8) + (b[i] &amp; 0xff));\n</code></pre>\n\n    \n','2019-10-15 16:02:23'),(172,'BIT_IOR_OF_SIGNED_BYTE',0,2,'\n\n<p> Loads a byte value (e.g., a value loaded from a byte array or returned by a method\nwith return type byte)  and performs a bitwise OR with\nthat value. Byte values are sign extended to 32 bits\nbefore any bitwise operations are performed on the value.\nThus, if <code>b[0]</code> contains the value <code>0xff</code>, and\n<code>x</code> is initially 0, then the code\n<code>((x &lt;&lt; 8) | b[0])</code>  will sign extend <code>0xff</code>\nto get <code>0xffffffff</code>, and thus give the value\n<code>0xffffffff</code> as the result.\n</p>\n\n<p>In particular, the following code for packing a byte array into an int is badly wrong: </p>\n<pre><code>int result = 0;\nfor(int i = 0; i &lt; 4; i++) {\n    result = ((result &lt;&lt; 8) | b[i]);\n}\n</code></pre>\n<p>The following idiom will work instead: </p>\n<pre><code>int result = 0;\nfor(int i = 0; i &lt; 4; i++) {\n    result = ((result &lt;&lt; 8) | (b[i] &amp; 0xff));\n}\n</code></pre>\n\n    \n','2019-10-15 16:02:23'),(173,'BIT_SIGNED_CHECK_HIGH_BIT',0,2,'\n\n<p> This method compares a bitwise expression such as\n<code>((val &amp; CONSTANT) &gt; 0)</code> where CONSTANT is the negative number.\nUsing bit arithmetic and then comparing with the greater than operator can\nlead to unexpected results. This comparison is unlikely to work as expected. The good practice is\nto use \'!= 0\' instead of \'&gt; 0\'.\n</p>\n\n    \n','2019-10-15 16:02:23'),(174,'BIT_AND',0,2,'\n\n<p> This method compares an expression of the form (e &amp; C) to D,\nwhich will always compare unequal\ndue to the specific values of constants C and D.\nThis may indicate a logic error or typo.</p>\n\n    \n','2019-10-15 16:02:23'),(175,'BIT_AND_ZZ',0,2,'\n\n<p> This method compares an expression of the form <code>(e &amp; 0)</code> to 0,\nwhich will always compare equal.\nThis may indicate a logic error or typo.</p>\n\n    \n','2019-10-15 16:02:23'),(176,'BIT_IOR',0,2,'\n\n<p> This method compares an expression of the form <code>(e | C)</code> to D.\nwhich will always compare unequal\ndue to the specific values of constants C and D.\nThis may indicate a logic error or typo.</p>\n\n<p> Typically, this bug occurs because the code wants to perform\na membership test in a bit set, but uses the bitwise OR\noperator (\"|\") instead of bitwise AND (\"&amp;\").</p>\n\n<p>Also such bug may appear in expressions like <code>(e &amp; A | B) == C</code>\nwhich is parsed like <code>((e &amp; A) | B) == C</code> while <code>(e &amp; (A | B)) == C</code> was intended.</p>\n\n    \n','2019-10-15 16:02:23'),(177,'SA_FIELD_SELF_ASSIGNMENT',0,2,'\n\n<p> This method contains a self assignment of a field; e.g.\n</p>\n<pre><code>int x;\npublic void foo() {\n    x = x;\n}\n</code></pre>\n<p>Such assignments are useless, and may indicate a logic error or typo.</p>\n\n    \n','2019-10-15 16:02:23'),(178,'SA_FIELD_SELF_COMPUTATION',0,2,'\n\n<p> This method performs a nonsensical computation of a field with another\nreference to the same field (e.g., x&x or x-x). Because of the nature\nof the computation, this operation doesn\'t seem to make sense,\nand may indicate a typo or\na logic error.  Double check the computation.\n</p>\n\n    \n','2019-10-15 16:02:23'),(179,'SA_LOCAL_SELF_COMPUTATION',0,2,'\n\n<p> This method performs a nonsensical computation of a local variable with another\nreference to the same variable (e.g., x&x or x-x). Because of the nature\nof the computation, this operation doesn\'t seem to make sense,\nand may indicate a typo or\na logic error.  Double check the computation.\n</p>\n\n    \n','2019-10-15 16:02:23'),(180,'SA_FIELD_SELF_COMPARISON',0,2,'\n\n<p> This method compares a field with itself, and may indicate a typo or\na logic error.  Make sure that you are comparing the right things.\n</p>\n\n    \n','2019-10-15 16:02:23'),(181,'SA_LOCAL_SELF_COMPARISON',0,2,'\n\n<p> This method compares a local variable with itself, and may indicate a typo or\na logic error.  Make sure that you are comparing the right things.\n</p>\n\n    \n','2019-10-15 16:02:23'),(182,'UMAC_UNCALLABLE_METHOD_OF_ANONYMOUS_CLASS',0,2,'\n\n<p> This anonymous class defines a method that is not directly invoked and does not override\na method in a superclass. Since methods in other classes cannot directly invoke methods\ndeclared in an anonymous class, it seems that this method is uncallable. The method\nmight simply be dead code, but it is also possible that the method is intended to\noverride a method declared in a superclass, and due to a typo or other error the method does not,\nin fact, override the method it is intended to.\n</p>\n\n','2019-10-15 16:02:23'),(183,'IJU_ASSERT_METHOD_INVOKED_FROM_RUN_METHOD',0,2,'\n\n<p> A JUnit assertion is performed in a run method. Failed JUnit assertions\njust result in exceptions being thrown.\nThus, if this exception occurs in a thread other than the thread that invokes\nthe test method, the exception will terminate the thread but not result\nin the test failing.\n</p>\n\n    \n','2019-10-15 16:02:23'),(184,'IJU_BAD_SUITE_METHOD',0,2,'\n\n<p> Class is a JUnit TestCase and defines a suite() method.\nHowever, the suite method needs to be declared as either</p>\n<pre><code>public static junit.framework.Test suite()\n</code></pre>\n<p>\nor\n</p>\n<pre><code>public static junit.framework.TestSuite suite()\n</code></pre>\n\n    \n','2019-10-15 16:02:23'),(185,'IJU_SETUP_NO_SUPER',0,2,'\n\n<p> Class is a JUnit TestCase and implements the setUp method. The setUp method should call\nsuper.setUp(), but doesn\'t.</p>\n\n    \n','2019-10-15 16:02:23'),(186,'IJU_TEARDOWN_NO_SUPER',0,2,'\n\n<p> Class is a JUnit TestCase and implements the tearDown method. The tearDown method should call\nsuper.tearDown(), but doesn\'t.</p>\n\n    \n','2019-10-15 16:02:23'),(187,'IJU_SUITE_NOT_STATIC',0,2,'\n\n<p> Class is a JUnit TestCase and implements the suite() method.\n The suite method should be declared as being static, but isn\'t.</p>\n\n    \n','2019-10-15 16:02:23'),(188,'IJU_NO_TESTS',0,2,'\n\n<p> Class is a JUnit TestCase but has not implemented any test methods.</p>\n\n    \n','2019-10-15 16:02:23'),(189,'BOA_BADLY_OVERRIDDEN_ADAPTER',0,2,'\n\n<p> This method overrides a method found in a parent class, where that class is an Adapter that implements\na listener defined in the java.awt.event or javax.swing.event package. As a result, this method will not\nget called when the event occurs.</p>\n\n    \n','2019-10-15 16:02:23'),(190,'SQL_BAD_RESULTSET_ACCESS',0,2,'\n\n<p> A call to getXXX or updateXXX methods of a result set was made where the\nfield index is 0. As ResultSet fields start at index 1, this is always a mistake.</p>\n\n    \n','2019-10-15 16:02:23'),(191,'SQL_BAD_PREPARED_STATEMENT_ACCESS',0,2,'\n\n<p> A call to a setXXX method of a prepared statement was made where the\nparameter index is 0. As parameter indexes start at index 1, this is always a mistake.</p>\n\n    \n','2019-10-15 16:02:23'),(192,'SIO_SUPERFLUOUS_INSTANCEOF',0,2,'\n\n<p> Type check performed using the instanceof operator where it can be statically determined whether the object\nis of the type requested. </p>\n\n    \n','2019-10-15 16:02:23'),(193,'BAC_BAD_APPLET_CONSTRUCTOR',0,2,'\n\n<p>\nThis constructor calls methods in the parent Applet that rely on the AppletStub. Since the AppletStub\nisn\'t initialized until the init() method of this applet is called, these methods will not perform\ncorrectly.\n</p>\n\n    \n','2019-10-15 16:02:23'),(194,'EC_INCOMPATIBLE_ARRAY_COMPARE',0,2,'\n\n<p>\nThis method invokes the .equals(Object o) to compare two arrays, but the arrays of\nof incompatible types (e.g., String[] and StringBuffer[], or String[] and int[]).\nThey will never be equal. In addition, when equals(...) is used to compare arrays it\nonly checks to see if they are the same array, and ignores the contents of the arrays.\n</p>\n\n    \n','2019-10-15 16:02:23'),(195,'EC_BAD_ARRAY_COMPARE',0,2,'\n\n<p>\nThis method invokes the .equals(Object o) method on an array. Since arrays do not override the equals\nmethod of Object, calling equals on an array is the same as comparing their addresses. To compare the\ncontents of the arrays, use <code>java.util.Arrays.equals(Object[], Object[])</code>.\nTo compare the addresses of the arrays, it would be\nless confusing to explicitly check pointer equality using <code>==</code>.\n</p>\n\n    \n','2019-10-15 16:02:23'),(196,'STI_INTERRUPTED_ON_CURRENTTHREAD',0,2,'\n\n<p>\nThis method invokes the Thread.currentThread() call, just to call the interrupted() method. As interrupted() is a\nstatic method, is more simple and clear to use Thread.interrupted().\n</p>\n\n    \n','2019-10-15 16:02:23'),(197,'STI_INTERRUPTED_ON_UNKNOWNTHREAD',0,2,'\n\n<p>\nThis method invokes the Thread.interrupted() method on a Thread object that appears to be a Thread object that is\nnot the current thread. As the interrupted() method is static, the interrupted method will be called on a different\nobject than the one the author intended.\n</p>\n\n    \n','2019-10-15 16:02:23'),(198,'DLS_DEAD_LOCAL_INCREMENT_IN_RETURN',0,2,'\n      \n<p>This statement has a return such as <code>return x++;</code>.\nA postfix increment/decrement does not impact the value of the expression,\nso this increment/decrement has no effect.\nPlease verify that this statement does the right thing.\n</p>\n\n    \n','2019-10-15 16:02:23'),(199,'DLS_DEAD_STORE_OF_CLASS_LITERAL',0,2,'\n\n<p>\nThis instruction assigns a class literal to a variable and then never uses it.\n<a href=\"http://www.oracle.com/technetwork/java/javase/compatibility-137462.html#literal\">The behavior of this differs in Java 1.4 and in Java 5.</a>\nIn Java 1.4 and earlier, a reference to <code>Foo.class</code> would force the static initializer\nfor <code>Foo</code> to be executed, if it has not been executed already.\nIn Java 5 and later, it does not.\n</p>\n<p>See Sun\'s <a href=\"http://www.oracle.com/technetwork/java/javase/compatibility-137462.html#literal\">article on Java SE compatibility</a>\nfor more details and examples, and suggestions on how to force class initialization in Java 5.\n</p>\n\n    \n','2019-10-15 16:02:23'),(200,'IP_PARAMETER_IS_DEAD_BUT_OVERWRITTEN',563,2,'\n\n<p>\nThe initial value of this parameter is ignored, and the parameter\nis overwritten here. This often indicates a mistaken belief that\nthe write to the parameter will be conveyed back to\nthe caller.\n</p>\n\n    \n','2019-10-15 16:02:23'),(201,'MF_METHOD_MASKS_FIELD',0,2,'\n\n<p> This method defines a local variable with the same name as a field\nin this class or a superclass.  This may cause the method to\nread an uninitialized value from the field, leave the field uninitialized,\nor both.</p>\n\n    \n','2019-10-15 16:02:23'),(202,'MF_CLASS_MASKS_FIELD',0,2,'\n\n<p> This class defines a field with the same name as a visible\ninstance field in a superclass.  This is confusing, and\nmay indicate an error if methods update or access one of\nthe fields when they wanted the other.</p>\n\n    \n','2019-10-15 16:02:23'),(203,'FE_TEST_IF_EQUAL_TO_NOT_A_NUMBER',0,2,'\n   \n    <p>\n    This code checks to see if a floating point value is equal to the special\n    Not A Number value (e.g., <code>if (x == Double.NaN)</code>). However,\n    because of the special semantics of <code>NaN</code>, no value\n    is equal to <code>Nan</code>, including <code>NaN</code>. Thus,\n    <code>x == Double.NaN</code> always evaluates to false.\n\n    To check to see if a value contained in <code>x</code>\n    is the special Not A Number value, use\n    <code>Double.isNaN(x)</code> (or <code>Float.isNaN(x)</code> if\n    <code>x</code> is floating point precision).\n    </p>\n    \n     \n','2019-10-15 16:02:23'),(204,'ICAST_INT_2_LONG_AS_INSTANT',0,2,'\n\n<p>\nThis code converts a 32-bit int value to a 64-bit long value, and then\npasses that value for a method parameter that requires an absolute time value.\nAn absolute time value is the number\nof milliseconds since the standard base time known as \"the epoch\", namely January 1, 1970, 00:00:00 GMT.\nFor example, the following method, intended to convert seconds since the epoch into a Date, is badly\nbroken:</p>\n<pre><code>Date getDate(int seconds) { return new Date(seconds * 1000); }\n</code></pre>\n<p>The multiplication is done using 32-bit arithmetic, and then converted to a 64-bit value.\nWhen a 32-bit value is converted to 64-bits and used to express an absolute time\nvalue, only dates in December 1969 and January 1970 can be represented.</p>\n\n<p>Correct implementations for the above method are:</p>\n<pre><code>// Fails for dates after 2037\nDate getDate(int seconds) { return new Date(seconds * 1000L); }\n\n// better, works for all dates\nDate getDate(long seconds) { return new Date(seconds * 1000); }\n</code></pre>\n\n    \n','2019-10-15 16:02:23'),(205,'ICAST_INT_CAST_TO_DOUBLE_PASSED_TO_CEIL',0,2,'\n\n<p>\nThis code converts an integral value (e.g., int or long)\nto a double precision\nfloating point number and then\npassing the result to the Math.ceil() function, which rounds a double to\nthe next higher integer value. This operation should always be a no-op,\nsince the converting an integer to a double should give a number with no fractional part.\nIt is likely that the operation that generated the value to be passed\nto Math.ceil was intended to be performed using double precision\nfloating point arithmetic.\n</p>\n\n\n    \n','2019-10-15 16:02:23'),(206,'ICAST_INT_CAST_TO_FLOAT_PASSED_TO_ROUND',0,2,'\n\n<p>\nThis code converts an int value to a float precision\nfloating point number and then\npassing the result to the Math.round() function, which returns the int/long closest\nto the argument. This operation should always be a no-op,\nsince the converting an integer to a float should give a number with no fractional part.\nIt is likely that the operation that generated the value to be passed\nto Math.round was intended to be performed using\nfloating point arithmetic.\n</p>\n\n\n    \n','2019-10-15 16:02:23'),(207,'NP_NULL_INSTANCEOF',0,2,'\n\n<p>\nThis instanceof test will always return false, since the value being checked is guaranteed to be null.\nAlthough this is safe, make sure it isn\'t\nan indication of some misunderstanding or some other logic error.\n</p>\n\n    \n','2019-10-15 16:02:23'),(208,'DMI_LONG_BITS_TO_DOUBLE_INVOKED_ON_INT',0,2,'\n\n<p> The Double.longBitsToDouble method is invoked, but a 32 bit int value is passed\n    as an argument. This almost certainly is not intended and is unlikely\n    to give the intended result.\n</p>\n\n    \n','2019-10-15 16:02:23'),(209,'BC_IMPOSSIBLE_CAST',570,2,'\n\n<p>\nThis cast will always throw a ClassCastException.\nSpotBugs tracks type information from instanceof checks,\nand also uses more precise information about the types\nof values returned from methods and loaded from fields.\nThus, it may have more precise information that just\nthe declared type of a variable, and can use this to determine\nthat a cast will always throw an exception at runtime.\n\n</p>\n\n    \n','2019-10-15 16:02:23'),(210,'BC_IMPOSSIBLE_DOWNCAST',570,2,'\n\n<p>\nThis cast will always throw a ClassCastException.\nThe analysis believes it knows\nthe precise type of the value being cast, and the attempt to\ndowncast it to a subtype will always fail by throwing a ClassCastException.\n</p>\n\n    \n','2019-10-15 16:02:23'),(211,'BC_IMPOSSIBLE_DOWNCAST_OF_TOARRAY',570,2,'\n\n<p>\nThis code is casting the result of calling <code>toArray()</code> on a collection\nto a type more specific than <code>Object[]</code>, as in:</p>\n<pre><code>String[] getAsArray(Collection&lt;String&gt; c) {\n    return (String[]) c.toArray();\n}\n</code></pre>\n<p>This will usually fail by throwing a ClassCastException. The <code>toArray()</code>\nof almost all collections return an <code>Object[]</code>. They can\'t really do anything else,\nsince the Collection object has no reference to the declared generic type of the collection.\n<p>The correct way to do get an array of a specific type from a collection is to use\n  <code>c.toArray(new String[]);</code>\n  or <code>c.toArray(new String[c.size()]);</code> (the latter is slightly more efficient).\n<p>There is one common/known exception to this. The <code>toArray()</code>\nmethod of lists returned by <code>Arrays.asList(...)</code> will return a covariantly\ntyped array. For example, <code>Arrays.asArray(new String[] { \"a\" }).toArray()</code>\nwill return a <code>String []</code>. SpotBugs attempts to detect and suppress\nsuch cases, but may miss some.\n</p>\n\n    \n','2019-10-15 16:02:23'),(212,'BC_IMPOSSIBLE_INSTANCEOF',570,2,'\n\n<p>\nThis instanceof test will always return false. Although this is safe, make sure it isn\'t\nan indication of some misunderstanding or some other logic error.\n</p>\n\n    \n','2019-10-15 16:02:23'),(213,'RE_POSSIBLE_UNINTENDED_PATTERN',0,2,'\n\n<p>\nA String function is being invoked and \".\" or \"|\" is being passed\nto a parameter that takes a regular expression as an argument. Is this what you intended?\nFor example\n</p>\n<ul>\n<li>s.replaceAll(\".\", \"/\") will return a String in which <em>every</em> character has been replaced by a \'/\' character</li>\n<li>s.split(\".\") <em>always</em> returns a zero length array of String</li>\n<li>\"ab|cd\".replaceAll(\"|\", \"/\") will return \"/a/b/|/c/d/\"</li>\n<li>\"ab|cd\".split(\"|\") will return array with six (!) elements: [, a, b, |, c, d]</li>\n</ul>\n\n    \n','2019-10-15 16:02:23'),(214,'RE_BAD_SYNTAX_FOR_REGULAR_EXPRESSION',0,2,'\n\n<p>\nThe code here uses a regular expression that is invalid according to the syntax\nfor regular expressions. This statement will throw a PatternSyntaxException when\nexecuted.\n</p>\n\n    \n','2019-10-15 16:02:23'),(215,'RE_CANT_USE_FILE_SEPARATOR_AS_REGULAR_EXPRESSION',0,2,'\n\n<p>\nThe code here uses <code>File.separator</code>\nwhere a regular expression is required. This will fail on Windows\nplatforms, where the <code>File.separator</code> is a backslash, which is interpreted in a\nregular expression as an escape character. Among other options, you can just use\n<code>File.separatorChar==\'\\\\\' ? \"\\\\\\\\\" : File.separator</code> instead of\n<code>File.separator</code>\n\n</p>\n\n    \n','2019-10-15 16:02:23'),(216,'DLS_OVERWRITTEN_INCREMENT',0,2,'\n\n<p>\nThe code performs an increment operation (e.g., <code>i++</code>) and then\nimmediately overwrites it. For example, <code>i = i++</code> immediately\noverwrites the incremented value with the original value.\n</p>\n\n    \n','2019-10-15 16:02:23'),(217,'ICAST_BAD_SHIFT_AMOUNT',0,2,'\n\n<p>\nThe code performs shift of a 32 bit int by a constant amount outside\nthe range -31..31.\nThe effect of this is to use the lower 5 bits of the integer\nvalue to decide how much to shift by (e.g., shifting by 40 bits is the same as shifting by 8 bits,\nand shifting by 32 bits is the same as shifting by zero bits). This probably isn\'t what was expected,\nand it is at least confusing.\n</p>\n\n    \n','2019-10-15 16:02:23'),(218,'BSHIFT_WRONG_ADD_PRIORITY',0,2,'\n\n<p>\nThe code performs an operation like (x &lt;&lt; 8 + y). Although this might be correct, probably it was meant\nto perform (x &lt;&lt; 8) + y, but shift operation has\na lower precedence, so it\'s actually parsed as x &lt;&lt; (8 + y).\n</p>\n\n    \n','2019-10-15 16:02:23'),(219,'IM_MULTIPLYING_RESULT_OF_IREM',0,2,'\n\n<p>\nThe code multiplies the result of an integer remaining by an integer constant.\nBe sure you don\'t have your operator precedence confused. For example\ni % 60 * 1000 is (i % 60) * 1000, not i % (60 * 1000).\n</p>\n\n    \n','2019-10-15 16:02:23'),(220,'DMI_INVOKING_HASHCODE_ON_ARRAY',0,2,'\n\n<p>\nThe code invokes hashCode on an array. Calling hashCode on\nan array returns the same value as System.identityHashCode, and ignores\nthe contents and length of the array. If you need a hashCode that\ndepends on the contents of an array <code>a</code>,\nuse <code>java.util.Arrays.hashCode(a)</code>.\n\n</p>\n\n    \n','2019-10-15 16:02:23'),(221,'DMI_INVOKING_TOSTRING_ON_ARRAY',0,2,'\n\n<p>\nThe code invokes toString on an array, which will generate a fairly useless result\nsuch as [C@16f0472. Consider using Arrays.toString to convert the array into a readable\nString that gives the contents of the array. See Programming Puzzlers, chapter 3, puzzle 12.\n</p>\n\n    \n','2019-10-15 16:02:23'),(222,'DMI_INVOKING_TOSTRING_ON_ANONYMOUS_ARRAY',0,2,'\n\n<p>\nThe code invokes toString on an (anonymous) array.  Calling toString on an array generates a fairly useless result\nsuch as [C@16f0472. Consider using Arrays.toString to convert the array into a readable\nString that gives the contents of the array. See Programming Puzzlers, chapter 3, puzzle 12.\n</p>\n\n    \n','2019-10-15 16:02:23'),(223,'DMI_BAD_MONTH',0,2,'\n\n<p>\nThis code passes a constant month\nvalue outside the expected range of 0..11 to a method.\n</p>\n\n    \n','2019-10-15 16:02:23'),(224,'DMI_CALLING_NEXT_FROM_HASNEXT',0,2,'\n\n<p>\nThe hasNext() method invokes the next() method. This is almost certainly wrong,\nsince the hasNext() method is not supposed to change the state of the iterator,\nand the next method is supposed to change the state of the iterator.\n</p>\n\n    \n','2019-10-15 16:02:23'),(225,'QBA_QUESTIONABLE_BOOLEAN_ASSIGNMENT',481,2,'\n      \n      <p>\n      This method assigns a literal boolean value (true or false) to a boolean variable inside\n      an if or while expression. Most probably this was supposed to be a boolean comparison using\n      ==, not an assignment using =.\n      </p>\n      \n    \n','2019-10-15 16:02:23'),(226,'GC_UNRELATED_TYPES',0,2,'\n     \n     <p> This call to a generic collection method contains an argument\n     with an incompatible class from that of the collection\'s parameter\n    (i.e., the type of the argument is neither a supertype nor a subtype\n        of the corresponding generic type argument).\n     Therefore, it is unlikely that the collection contains any objects\n    that are equal to the method argument used here.\n    Most likely, the wrong value is being passed to the method.</p>\n    <p>In general, instances of two unrelated classes are not equal.\n    For example, if the <code>Foo</code> and <code>Bar</code> classes\n    are not related by subtyping, then an instance of <code>Foo</code>\n        should not be equal to an instance of <code>Bar</code>.\n    Among other issues, doing so will likely result in an equals method\n    that is not symmetrical. For example, if you define the <code>Foo</code> class\n    so that a <code>Foo</code> can be equal to a <code>String</code>,\n    your equals method isn\'t symmetrical since a <code>String</code> can only be equal\n    to a <code>String</code>.\n    </p>\n    <p>In rare cases, people do define nonsymmetrical equals methods and still manage to make\n    their code work. Although none of the APIs document or guarantee it, it is typically\n    the case that if you check if a <code>Collection&lt;String&gt;</code> contains\n    a <code>Foo</code>, the equals method of argument (e.g., the equals method of the\n    <code>Foo</code> class) used to perform the equality checks.\n    </p>\n     \n    \n','2019-10-15 16:02:23'),(227,'DMI_VACUOUS_SELF_COLLECTION_CALL',0,2,'\n     \n     <p> This call doesn\'t make sense. For any collection <code>c</code>, calling <code>c.containsAll(c)</code> should\nalways be true, and <code>c.retainAll(c)</code> should have no effect.\n    </p>\n     \n    \n','2019-10-15 16:02:23'),(228,'DMI_DOH',0,2,'\n      \n    <p>\nThis partical method invocation doesn\'t make sense, for reasons that should be apparent from inspection.\n</p>\n\n\n    \n','2019-10-15 16:02:23'),(229,'DMI_COLLECTIONS_SHOULD_NOT_CONTAIN_THEMSELVES',0,2,'\n     \n     <p> This call to a generic collection\'s method would only make sense if a collection contained\nitself (e.g., if <code>s.contains(s)</code> were true). This is unlikely to be true and would cause\nproblems if it were true (such as the computation of the hash code resulting in infinite recursion).\nIt is likely that the wrong value is being passed as a parameter.\n    </p>\n     \n    \n','2019-10-15 16:02:23'),(230,'TQ_UNKNOWN_VALUE_USED_WHERE_ALWAYS_STRICTLY_REQUIRED',0,2,'\n      \n        <p>\n        A value is being used in a way that requires the value be annotation with a type qualifier.\n    The type qualifier is strict, so the tool rejects any values that do not have\n    the appropriate annotation.\n        </p>\n\n        <p>\n        To coerce a value to have a strict annotation, define an identity function where the return value is annotated\n    with the strict annotation.\n    This is the only way to turn a non-annotated value into a value with a strict type qualifier annotation.\n        </p>\n\n      \n    \n','2019-10-15 16:02:23'),(231,'TQ_COMPARING_VALUES_WITH_INCOMPATIBLE_TYPE_QUALIFIERS',0,2,'\n      \n        <p>\n        A value specified as carrying a type qualifier annotation is\n        compared with a value that doesn\'t ever carry that qualifier.\n        </p>\n\n        <p>\n        More precisely, a value annotated with a type qualifier specifying when=ALWAYS\n        is compared with a value that where the same type qualifier specifies when=NEVER.\n        </p>\n\n        <p>\n        For example, say that @NonNegative is a nickname for\n        the type qualifier annotation @Negative(when=When.NEVER).\n        The following code will generate this warning because\n        the return statement requires a @NonNegative value,\n        but receives one that is marked as @Negative.\n        </p>\n<pre><code>public boolean example(@Negative Integer value1, @NonNegative Integer value2) {\n    return value1.equals(value2);\n}\n</code></pre>\n      \n    \n','2019-10-15 16:02:23'),(232,'TQ_ALWAYS_VALUE_USED_WHERE_NEVER_REQUIRED',0,2,'\n      \n        <p>\n        A value specified as carrying a type qualifier annotation is\n        consumed in a location or locations requiring that the value not\n        carry that annotation.\n        </p>\n\n        <p>\n        More precisely, a value annotated with a type qualifier specifying when=ALWAYS\n        is guaranteed to reach a use or uses where the same type qualifier specifies when=NEVER.\n        </p>\n\n        <p>\n        For example, say that @NonNegative is a nickname for\n        the type qualifier annotation @Negative(when=When.NEVER).\n        The following code will generate this warning because\n        the return statement requires a @NonNegative value,\n        but receives one that is marked as @Negative.\n        </p>\n<pre><code>public @NonNegative Integer example(@Negative Integer value) {\n    return value;\n}\n</code></pre>\n      \n    \n','2019-10-15 16:02:23'),(233,'TQ_NEVER_VALUE_USED_WHERE_ALWAYS_REQUIRED',0,2,'\n      \n        <p>\n        A value specified as not carrying a type qualifier annotation is guaranteed\n        to be consumed in a location or locations requiring that the value does\n        carry that annotation.\n        </p>\n\n        <p>\n        More precisely, a value annotated with a type qualifier specifying when=NEVER\n        is guaranteed to reach a use or uses where the same type qualifier specifies when=ALWAYS.\n        </p>\n\n        <p>\n        TODO: example\n        </p>\n      \n    \n','2019-10-15 16:02:23'),(234,'TQ_MAYBE_SOURCE_VALUE_REACHES_ALWAYS_SINK',0,2,'\n      \n      <p>\n      A value that is annotated as possibility not being an instance of\n    the values denoted by the type qualifier, and the value is guaranteed to be used\n    in a way that requires values denoted by that type qualifier.\n      </p>\n      \n    \n','2019-10-15 16:02:23'),(235,'TQ_MAYBE_SOURCE_VALUE_REACHES_NEVER_SINK',0,2,'\n      \n      <p>\n      A value that is annotated as possibility being an instance of\n    the values denoted by the type qualifier, and the value is guaranteed to be used\n    in a way that prohibits values denoted by that type qualifier.\n      </p>\n      \n    \n','2019-10-15 16:02:23'),(236,'FB_UNEXPECTED_WARNING',0,2,'\n          \n          <p>SpotBugs generated a warning that, according to a @NoWarning annotated,\n            is unexpected or undesired.</p>\n          \n      \n','2019-10-15 16:02:23'),(237,'FB_MISSING_EXPECTED_WARNING',0,2,'\n          \n          <p>SpotBugs didn\'t generate generated a warning that, according to a @ExpectedWarning annotated,\n            is expected or desired.</p>\n          \n      \n','2019-10-15 16:02:23'),(238,'SKIPPED_CLASS_TOO_BIG',0,3,'\n      \n    <p>This class is bigger than can be effectively handled, and was not fully analyzed for errors.\n</p>\n\n\n    \n','2019-10-15 16:02:23'),(239,'UNKNOWN',0,3,'\n\n<p>A warning was recorded, but SpotBugs can\'t find the description of this bug pattern\nand so can\'t describe it. This should occur only in cases of a bug in SpotBugs or its configuration,\nor perhaps if an analysis was generated using a plugin, but that plugin is not currently loaded.\n.</p>\n\n    \n','2019-10-15 16:02:23'),(240,'TESTING',0,3,'\n\n<p>This bug pattern is only generated by new, incompletely implemented\nbug detectors.</p>\n\n    \n','2019-10-15 16:02:23'),(241,'TESTING1',0,3,'\n\n<p>This bug pattern is only generated by new, incompletely implemented\nbug detectors.</p>\n\n    \n','2019-10-15 16:02:23'),(242,'TESTING2',0,3,'\n\n<p>This bug pattern is only generated by new, incompletely implemented\nbug detectors.</p>\n\n    \n','2019-10-15 16:02:23'),(243,'TESTING3',0,3,'\n\n<p>This bug pattern is only generated by new, incompletely implemented\nbug detectors.</p>\n\n    \n','2019-10-15 16:02:23'),(244,'OBL_UNSATISFIED_OBLIGATION',0,3,'\n          \n          <p>\n          This method may fail to clean up (close, dispose of) a stream,\n          database object, or other\n          resource requiring an explicit cleanup operation.\n          </p>\n\n          <p>\n          In general, if a method opens a stream or other resource,\n          the method should use a try/finally block to ensure that\n          the stream or resource is cleaned up before the method\n          returns.\n          </p>\n\n          <p>\n          This bug pattern is essentially the same as the\n          OS_OPEN_STREAM and ODR_OPEN_DATABASE_RESOURCE\n          bug patterns, but is based on a different\n          (and hopefully better) static analysis technique.\n          We are interested is getting feedback about the\n          usefulness of this bug pattern.\n          For sending feedback, check:\n          </p>\n          <ul>\n            <li><a href=\"https://github.com/spotbugs/spotbugs/blob/master/CONTRIBUTING.md\">contributing guideline</a></li>\n            <li><a href=\"https://github.com/spotbugs/discuss/issues?q=\">malinglist</a></li>\n          </ul>\n\n          <p>\n          In particular,\n          the false-positive suppression heuristics for this\n          bug pattern have not been extensively tuned, so\n          reports about false positives are helpful to us.\n          </p>\n\n          <p>\n          See Weimer and Necula, <i>Finding and Preventing Run-Time Error Handling Mistakes</i>, for\n          a description of the analysis technique.\n          </p>\n          \n      \n','2019-10-15 16:02:23'),(245,'OBL_UNSATISFIED_OBLIGATION_EXCEPTION_EDGE',0,3,'\n          \n          <p>\n          This method may fail to clean up (close, dispose of) a stream,\n          database object, or other\n          resource requiring an explicit cleanup operation.\n          </p>\n\n          <p>\n          In general, if a method opens a stream or other resource,\n          the method should use a try/finally block to ensure that\n          the stream or resource is cleaned up before the method\n          returns.\n          </p>\n\n          <p>\n          This bug pattern is essentially the same as the\n          OS_OPEN_STREAM and ODR_OPEN_DATABASE_RESOURCE\n          bug patterns, but is based on a different\n          (and hopefully better) static analysis technique.\n          We are interested is getting feedback about the\n          usefulness of this bug pattern.\n          For sending feedback, check:\n          </p>\n          <ul>\n            <li><a href=\"https://github.com/spotbugs/spotbugs/blob/master/CONTRIBUTING.md\">contributing guideline</a></li>\n            <li><a href=\"https://github.com/spotbugs/discuss/issues?q=\">malinglist</a></li>\n          </ul>\n\n          <p>\n          In particular,\n          the false-positive suppression heuristics for this\n          bug pattern have not been extensively tuned, so\n          reports about false positives are helpful to us.\n          </p>\n\n          <p>\n          See Weimer and Necula, <i>Finding and Preventing Run-Time Error Handling Mistakes</i>, for\n          a description of the analysis technique.\n          </p>\n          \n      \n','2019-10-15 16:02:23'),(246,'LG_LOST_LOGGER_DUE_TO_WEAK_REFERENCE',0,3,'\n          \n<p>OpenJDK introduces a potential incompatibility.\n In particular, the java.util.logging.Logger behavior has\n  changed. Instead of using strong references, it now uses weak references\n  internally. That\'s a reasonable change, but unfortunately some code relies on\n  the old behavior - when changing logger configuration, it simply drops the\n  logger reference. That means that the garbage collector is free to reclaim\n  that memory, which means that the logger configuration is lost. For example,\nconsider:\n</p>\n<pre><code>public static void initLogging() throws Exception {\n    Logger logger = Logger.getLogger(\"edu.umd.cs\");\n    logger.addHandler(new FileHandler()); // call to change logger configuration\n    logger.setUseParentHandlers(false); // another call to change logger configuration\n}\n</code></pre>\n<p>The logger reference is lost at the end of the method (it doesn\'t\nescape the method), so if you have a garbage collection cycle just\nafter the call to initLogging, the logger configuration is lost\n(because Logger only keeps weak references).</p>\n<pre><code>public static void main(String[] args) throws Exception {\n    initLogging(); // adds a file handler to the logger\n    System.gc(); // logger configuration lost\n    Logger.getLogger(\"edu.umd.cs\").info(\"Some message\"); // this isn\'t logged to the file as expected\n}\n</code></pre>\n<p><em>Ulf Ochsenfahrt and Eric Fellheimer</em></p>\n          \n      \n','2019-10-15 16:02:23'),(247,'DM_CONVERT_CASE',0,4,'\n\n  <p> A String is being converted to upper or lowercase, using the platform\'s default encoding. This may\n      result in improper conversions when used with international characters. Use the </p>\n      <ul>\n    <li>String.toUpperCase( Locale l )</li>\n    <li>String.toLowerCase( Locale l )</li>\n    </ul>\n      <p>versions instead.</p>\n\n    \n','2019-10-15 16:02:23'),(248,'DM_DEFAULT_ENCODING',0,4,'\n\n<p> Found a call to a method which will perform a byte to String (or String to byte) conversion, and will assume that the default platform encoding is suitable. This will cause the application behaviour to vary between platforms. Use an alternative API and specify a charset name or Charset object explicitly.  </p>\n\n      \n','2019-10-15 16:02:23'),(249,'DP_DO_INSIDE_DO_PRIVILEGED',0,5,'\n\n  <p> This code invokes a method that requires a security permission check.\n  If this code will be granted security permissions, but might be invoked by code that does not\n  have security permissions, then the invocation needs to occur inside a doPrivileged block.</p>\n\n    \n','2019-10-15 16:02:23'),(250,'DP_CREATE_CLASSLOADER_INSIDE_DO_PRIVILEGED',0,5,'\n\n  <p> This code creates a classloader,  which needs permission if a security manage is installed.\n  If this code might be invoked by code that does not\n  have security permissions, then the classloader creation needs to occur inside a doPrivileged block.</p>\n\n    \n','2019-10-15 16:02:23'),(251,'FI_PUBLIC_SHOULD_BE_PROTECTED',583,5,'\n\n  <p> A class\'s <code>finalize()</code> method should have protected access,\n   not public.</p>\n\n    \n','2019-10-15 16:02:23'),(252,'MS_EXPOSE_REP',0,5,'\n\n  <p> A public static method returns a reference to\n   an array that is part of the static state of the class.\n   Any code that calls this method can freely modify\n   the underlying array.\n   One fix is to return a copy of the array.</p>\n\n    \n','2019-10-15 16:02:23'),(253,'EI_EXPOSE_REP',374,5,'\n\n  <p> Returning a reference to a mutable object value stored in one of the object\'s fields\n  exposes the internal representation of the object.&nbsp;\n   If instances\n   are accessed by untrusted code, and unchecked changes to\n   the mutable object would compromise security or other\n   important properties, you will need to do something different.\n  Returning a new copy of the object is better approach in many situations.</p>\n\n    \n','2019-10-15 16:02:23'),(254,'EI_EXPOSE_REP2',374,5,'\n\n  <p> This code stores a reference to an externally mutable object into the\n  internal representation of the object.&nbsp;\n   If instances\n   are accessed by untrusted code, and unchecked changes to\n   the mutable object would compromise security or other\n   important properties, you will need to do something different.\n  Storing a copy of the object is better approach in many situations.</p>\n\n    \n','2019-10-15 16:02:23'),(255,'EI_EXPOSE_STATIC_REP2',0,5,'\n\n  <p> This code stores a reference to an externally mutable object into a static\n   field.\n   If unchecked changes to\n   the mutable object would compromise security or other\n   important properties, you will need to do something different.\n  Storing a copy of the object is better approach in many situations.</p>\n\n    \n','2019-10-15 16:02:23'),(256,'MS_OOI_PKGPROTECT',0,5,'\n\n<p>\n A final static field that is\ndefined in an interface references a mutable\n   object such as an array or hashtable.\n   This mutable object could\n   be changed by malicious code or\n        by accident from another package.\n   To solve this, the field needs to be moved to a class\n   and made package protected\n   to avoid\n        this vulnerability.</p>\n\n    \n','2019-10-15 16:02:23'),(257,'MS_FINAL_PKGPROTECT',0,5,'\n\n <p>\n   A mutable static field could be changed by malicious code or\n        by accident from another package.\n        The field could be made package protected and/or made final\n   to avoid\n        this vulnerability.</p>\n\n    \n','2019-10-15 16:02:23'),(258,'MS_SHOULD_BE_FINAL',0,5,'\n\n   <p>\nThis static field public but not final, and\ncould be changed by malicious code or\n        by accident from another package.\n        The field could be made final to avoid\n        this vulnerability.</p>\n\n    \n','2019-10-15 16:02:23'),(259,'MS_SHOULD_BE_REFACTORED_TO_BE_FINAL',0,5,'\n\n   <p>\nThis static field public but not final, and\ncould be changed by malicious code or\nby accident from another package.\nThe field could be made final to avoid\nthis vulnerability. However, the static initializer contains more than one write\nto the field, so doing so will require some refactoring.\n</p>\n\n    \n','2019-10-15 16:02:23'),(260,'MS_PKGPROTECT',0,5,'\n\n  <p> A mutable static field could be changed by malicious code or\n   by accident.\n   The field could be made package protected to avoid\n   this vulnerability.</p>\n\n    \n','2019-10-15 16:02:23'),(261,'MS_MUTABLE_HASHTABLE',0,5,'\n\n <p>A final static field references a Hashtable\n   and can be accessed by malicious code or\n        by accident from another package.\n   This code can freely modify the contents of the Hashtable.</p>\n\n    \n','2019-10-15 16:02:23'),(262,'MS_MUTABLE_ARRAY',0,5,'\n\n<p> A final static field references an array\n   and can be accessed by malicious code or\n        by accident from another package.\n   This code can freely modify the contents of the array.</p>\n\n    \n','2019-10-15 16:02:23'),(263,'MS_MUTABLE_COLLECTION',0,5,'\n\n <p>A mutable collection instance is assigned to a final static field,\n   thus can be changed by malicious code or by accident from another package.\n   Consider wrapping this field into Collections.unmodifiableSet/List/Map/etc.\n   to avoid this vulnerability.</p>\n\n    \n','2019-10-15 16:02:23'),(264,'MS_MUTABLE_COLLECTION_PKGPROTECT',0,5,'\n\n <p>A mutable collection instance is assigned to a final static field,\n   thus can be changed by malicious code or by accident from another package.\n   The field could be made package protected to avoid this vulnerability.\n   Alternatively you may wrap this field into Collections.unmodifiableSet/List/Map/etc.\n   to avoid this vulnerability.</p>\n\n    \n','2019-10-15 16:02:23'),(265,'MS_CANNOT_BE_FINAL',0,5,'\n\n  <p>\n A mutable static field could be changed by malicious code or\n        by accident from another package.\n   Unfortunately, the way the field is used doesn\'t allow\n   any easy fix to this problem.</p>\n\n    \n','2019-10-15 16:02:23'),(266,'AT_OPERATION_SEQUENCE_ON_CONCURRENT_ABSTRACTION',0,6,'\n          \n        <p>This code contains a sequence of calls to a concurrent  abstraction\n            (such as a concurrent hash map).\n            These calls will not be executed atomically.\n          \n      \n','2019-10-15 16:02:23'),(267,'STCAL_STATIC_CALENDAR_INSTANCE',0,6,'\n\n<p>Even though the JavaDoc does not contain a hint about it, Calendars are inherently unsafe for multithreaded use.\nSharing a single instance across thread boundaries without proper synchronization will result in erratic behavior of the\napplication. Under 1.4 problems seem to surface less often than under Java 5 where you will probably see\nrandom ArrayIndexOutOfBoundsExceptions or IndexOutOfBoundsExceptions in sun.util.calendar.BaseCalendar.getCalendarDateFromFixedDate().</p>\n<p>You may also experience serialization problems.</p>\n<p>Using an instance field is recommended.</p>\n<p>For more information on this see <a href=\"http://bugs.java.com/bugdatabase/view_bug.do?bug_id=6231579\">JDK Bug #6231579</a>\nand <a href=\"http://bugs.java.com/bugdatabase/view_bug.do?bug_id=6178997\">JDK Bug #6178997</a>.</p>\n\n','2019-10-15 16:02:23'),(268,'STCAL_STATIC_SIMPLE_DATE_FORMAT_INSTANCE',0,6,'\n\n<p>As the JavaDoc states, DateFormats are inherently unsafe for multithreaded use.\nSharing a single instance across thread boundaries without proper synchronization will result in erratic behavior of the\napplication.</p>\n<p>You may also experience serialization problems.</p>\n<p>Using an instance field is recommended.</p>\n<p>For more information on this see <a href=\"http://bugs.java.com/bugdatabase/view_bug.do?bug_id=6231579\">JDK Bug #6231579</a>\nand <a href=\"http://bugs.java.com/bugdatabase/view_bug.do?bug_id=6178997\">JDK Bug #6178997</a>.</p>\n\n','2019-10-15 16:02:23'),(269,'STCAL_INVOKE_ON_STATIC_CALENDAR_INSTANCE',0,6,'\n\n<p>Even though the JavaDoc does not contain a hint about it, Calendars are inherently unsafe for multithreaded use.\nThe detector has found a call to an instance of Calendar that has been obtained via a static\nfield. This looks suspicious.</p>\n<p>For more information on this see <a href=\"http://bugs.java.com/bugdatabase/view_bug.do?bug_id=6231579\">JDK Bug #6231579</a>\nand <a href=\"http://bugs.java.com/bugdatabase/view_bug.do?bug_id=6178997\">JDK Bug #6178997</a>.</p>\n\n','2019-10-15 16:02:23'),(270,'STCAL_INVOKE_ON_STATIC_DATE_FORMAT_INSTANCE',0,6,'\n\n<p>As the JavaDoc states, DateFormats are inherently unsafe for multithreaded use.\nThe detector has found a call to an instance of DateFormat that has been obtained via a static\nfield. This looks suspicious.</p>\n<p>For more information on this see <a href=\"http://bugs.java.com/bugdatabase/view_bug.do?bug_id=6231579\">JDK Bug #6231579</a>\nand <a href=\"http://bugs.java.com/bugdatabase/view_bug.do?bug_id=6178997\">JDK Bug #6178997</a>.</p>\n\n','2019-10-15 16:02:23'),(271,'NP_SYNC_AND_NULL_CHECK_FIELD',585,6,'\n\n<p>Since the field is synchronized on, it seems not likely to be null.\nIf it is null and then synchronized on a NullPointerException will be\nthrown and the check would be pointless. Better to synchronize on\nanother field.</p>\n\n\n     \n','2019-10-15 16:02:23'),(272,'VO_VOLATILE_REFERENCE_TO_ARRAY',0,6,'\n\n<p>This declares a volatile reference to an array, which might not be what\nyou want. With a volatile reference to an array, reads and writes of\nthe reference to the array are treated as volatile, but the array elements\nare non-volatile. To get volatile array elements, you will need to use\none of the atomic array classes in java.util.concurrent (provided\nin Java 5.0).</p>\n\n    \n','2019-10-15 16:02:23'),(273,'VO_VOLATILE_INCREMENT',0,6,'\n\n<p>This code increments a volatile field. Increments of volatile fields aren\'t\natomic. If more than one thread is incrementing the field at the same time,\nincrements could be lost.\n</p>\n\n    \n','2019-10-15 16:02:23'),(274,'DM_MONITOR_WAIT_ON_CONDITION',0,6,'\n      \n      <p>\n      This method calls <code>wait()</code> on a\n      <code>java.util.concurrent.locks.Condition</code> object.&nbsp;\n      Waiting for a <code>Condition</code> should be done using one of the <code>await()</code>\n      methods defined by the <code>Condition</code> interface.\n      </p>\n      \n   \n','2019-10-15 16:02:23'),(275,'DM_USELESS_THREAD',0,6,'\n\n  <p>This method creates a thread without specifying a run method either by deriving from the Thread class, or\n  by passing a Runnable object. This thread, then, does nothing but waste time.\n</p>\n\n    \n','2019-10-15 16:02:23'),(276,'DC_DOUBLECHECK',609,6,'\n\n  <p> This method may contain an instance of double-checked locking.&nbsp;\n  This idiom is not correct according to the semantics of the Java memory\n  model.&nbsp; For more information, see the web page\n  <a href=\"http://www.cs.umd.edu/~pugh/java/memoryModel/DoubleCheckedLocking.html\"\n  >http://www.cs.umd.edu/~pugh/java/memoryModel/DoubleCheckedLocking.html</a>.</p>\n\n    \n','2019-10-15 16:02:23'),(277,'DC_PARTIALLY_CONSTRUCTED',609,6,'\n\n  <p>Looks like this method uses lazy field initialization with double-checked locking.\n  While the field is correctly declared as volatile, it\'s possible that the internal structure of\n  the object is changed after the field assignment, thus another thread may see the partially initialized object.</p>\n  <p>To fix this problem consider storing the object into the local variable first\n  and save it to the volatile field only after it\'s fully constructed.\n  </p>\n\n    \n','2019-10-15 16:02:23'),(278,'DL_SYNCHRONIZATION_ON_SHARED_CONSTANT',0,6,'\n\n  <p> The code synchronizes on interned String.</p>\n<pre><code>private static String LOCK = \"LOCK\";\n...\nsynchronized(LOCK) {\n    ...\n}\n...\n</code></pre>\n<p>Constant Strings are interned and shared across all other classes loaded by the JVM. Thus, this code\nis locking on something that other code might also be locking. This could result in very strange and hard to diagnose\nblocking and deadlock behavior. See <a href=\"http://www.javalobby.org/java/forums/t96352.html\">http://www.javalobby.org/java/forums/t96352.html</a> and <a href=\"http://jira.codehaus.org/browse/JETTY-352\">http://jira.codehaus.org/browse/JETTY-352</a>.\n</p>\n<p>See CERT <a href=\"https://www.securecoding.cert.org/confluence/display/java/CON08-J.+Do+not+synchronize+on+objects+that+may+be+reused\">CON08-J. Do not synchronize on objects that may be reused</a> for more information.</p>\n\n    \n','2019-10-15 16:02:23'),(279,'DL_SYNCHRONIZATION_ON_BOOLEAN',0,6,'\n      \n  <p> The code synchronizes on a boxed primitive constant, such as a Boolean.</p>\n<pre><code>private static Boolean inited = Boolean.FALSE;\n...\nsynchronized(inited) {\n    if (!inited) {\n        init();\n        inited = Boolean.TRUE;\n    }\n}\n...\n</code></pre>\n<p>Since there normally exist only two Boolean objects, this code could be synchronizing on the same object as other, unrelated code, leading to unresponsiveness\nand possible deadlock.</p>\n<p>See CERT <a href=\"https://www.securecoding.cert.org/confluence/display/java/CON08-J.+Do+not+synchronize+on+objects+that+may+be+reused\">CON08-J. Do not synchronize on objects that may be reused</a> for more information.</p>\n\n    \n','2019-10-15 16:02:23'),(280,'DL_SYNCHRONIZATION_ON_BOXED_PRIMITIVE',0,6,'\n      \n  <p> The code synchronizes on a boxed primitive constant, such as an Integer.</p>\n<pre><code>private static Integer count = 0;\n...\nsynchronized(count) {\n    count++;\n}\n...\n</code></pre>\n<p>Since Integer objects can be cached and shared,\nthis code could be synchronizing on the same object as other, unrelated code, leading to unresponsiveness\nand possible deadlock.</p>\n<p>See CERT <a href=\"https://www.securecoding.cert.org/confluence/display/java/CON08-J.+Do+not+synchronize+on+objects+that+may+be+reused\">CON08-J. Do not synchronize on objects that may be reused</a> for more information.</p>\n\n    \n','2019-10-15 16:02:23'),(281,'DL_SYNCHRONIZATION_ON_UNSHARED_BOXED_PRIMITIVE',0,6,'\n      \n  <p> The code synchronizes on an apparently unshared boxed primitive,\nsuch as an Integer.</p>\n<pre><code>private static final Integer fileLock = new Integer(1);\n...\nsynchronized(fileLock) {\n    .. do something ..\n}\n...\n</code></pre>\n<p>It would be much better, in this code, to redeclare fileLock as</p>\n<pre><code>private static final Object fileLock = new Object();\n</code></pre>\n<p>\nThe existing code might be OK, but it is confusing and a\nfuture refactoring, such as the \"Remove Boxing\" refactoring in IntelliJ,\nmight replace this with the use of an interned Integer object shared\nthroughout the JVM, leading to very confusing behavior and potential deadlock.\n</p>\n\n    \n','2019-10-15 16:02:23'),(282,'WL_USING_GETCLASS_RATHER_THAN_CLASS_LITERAL',0,6,'\n      \n      <p>\n     This instance method synchronizes on <code>this.getClass()</code>. If this class is subclassed,\n     subclasses will synchronize on the class object for the subclass, which isn\'t likely what was intended.\n     For example, consider this code from java.awt.Label:</p>\n<pre><code>private static final String base = \"label\";\nprivate static int nameCounter = 0;\n\nString constructComponentName() {\n    synchronized (getClass()) {\n        return base + nameCounter++;\n    }\n}\n</code></pre>\n     <p>Subclasses of <code>Label</code> won\'t synchronize on the same subclass, giving rise to a datarace.\n     Instead, this code should be synchronizing on <code>Label.class</code></p>\n<pre><code>private static final String base = \"label\";\nprivate static int nameCounter = 0;\n\nString constructComponentName() {\n    synchronized (Label.class) {\n        return base + nameCounter++;\n    }\n}\n</code></pre>\n      <p>Bug pattern contributed by Jason Mehrens</p>\n      \n    \n','2019-10-15 16:02:23'),(283,'ESync_EMPTY_SYNC',585,6,'\n\n  <p> The code contains an empty synchronized block:</p>\n<pre><code>synchronized() {\n}\n</code></pre>\n<p>Empty synchronized blocks are far more subtle and hard to use correctly\nthan most people recognize, and empty synchronized blocks\nare almost never a better solution\nthan less contrived solutions.\n</p>\n\n    \n','2019-10-15 16:02:23'),(284,'MSF_MUTABLE_SERVLET_FIELD',0,6,'\n\n<p>A web server generally only creates one instance of servlet or JSP class (i.e., treats\nthe class as a Singleton),\nand will\nhave multiple threads invoke methods on that instance to service multiple\nsimultaneous requests.\nThus, having a mutable instance field generally creates race conditions.\n\n    \n','2019-10-15 16:02:23'),(285,'IS2_INCONSISTENT_SYNC',0,6,'\n\n  <p> The fields of this class appear to be accessed inconsistently with respect\n  to synchronization.&nbsp; This bug report indicates that the bug pattern detector\n  judged that\n  </p>\n  <ul>\n  <li> The class contains a mix of locked and unlocked accesses,</li>\n  <li> The class is <b>not</b> annotated as javax.annotation.concurrent.NotThreadSafe,</li>\n  <li> At least one locked access was performed by one of the class\'s own methods, and</li>\n  <li> The number of unsynchronized field accesses (reads and writes) was no more than\n       one third of all accesses, with writes being weighed twice as high as reads</li>\n  </ul>\n\n  <p> A typical bug matching this bug pattern is forgetting to synchronize\n  one of the methods in a class that is intended to be thread-safe.</p>\n\n  <p> You can select the nodes labeled \"Unsynchronized access\" to show the\n  code locations where the detector believed that a field was accessed\n  without synchronization.</p>\n\n  <p> Note that there are various sources of inaccuracy in this detector;\n  for example, the detector cannot statically detect all situations in which\n  a lock is held.&nbsp; Also, even when the detector is accurate in\n  distinguishing locked vs. unlocked accesses, the code in question may still\n  be correct.</p>\n\n\n    \n','2019-10-15 16:02:23'),(286,'NN_NAKED_NOTIFY',0,6,'\n\n  <p> A call to <code>notify()</code> or <code>notifyAll()</code>\n  was made without any (apparent) accompanying\n  modification to mutable object state.&nbsp; In general, calling a notify\n  method on a monitor is done because some condition another thread is\n  waiting for has become true.&nbsp; However, for the condition to be meaningful,\n  it must involve a heap object that is visible to both threads.</p>\n\n  <p> This bug does not necessarily indicate an error, since the change to\n  mutable object state may have taken place in a method which then called\n  the method containing the notification.</p>\n\n    \n','2019-10-15 16:02:23'),(287,'RU_INVOKE_RUN',572,6,'\n\n  <p> This method explicitly invokes <code>run()</code> on an object.&nbsp;\n  In general, classes implement the <code>Runnable</code> interface because\n  they are going to have their <code>run()</code> method invoked in a new thread,\n  in which case <code>Thread.start()</code> is the right method to call.</p>\n\n    \n','2019-10-15 16:02:23'),(288,'SP_SPIN_ON_FIELD',0,6,'\n\n  <p> This method spins in a loop which reads a field.&nbsp; The compiler\n  may legally hoist the read out of the loop, turning the code into an\n  infinite loop.&nbsp; The class should be changed so it uses proper\n  synchronization (including wait and notify calls).</p>\n\n    \n','2019-10-15 16:02:23'),(289,'TLW_TWO_LOCK_WAIT',0,6,'\n\n  <p> Waiting on a monitor while two locks are held may cause\n  deadlock.\n   &nbsp;\n   Performing a wait only releases the lock on the object\n   being waited on, not any other locks.\n   &nbsp;\nThis not necessarily a bug, but is worth examining\n  closely.</p>\n\n    \n','2019-10-15 16:02:23'),(290,'UW_UNCOND_WAIT',0,6,'\n\n  <p> This method contains a call to <code>java.lang.Object.wait()</code> which\n  is not guarded by conditional control flow.&nbsp; The code should\n    verify that condition it intends to wait for is not already satisfied\n    before calling wait; any previous notifications will be ignored.\n  </p>\n\n    \n','2019-10-15 16:02:23'),(291,'UG_SYNC_SET_UNSYNC_GET',0,6,'\n\n  <p> This class contains similarly-named get and set\n  methods where the set method is synchronized and the get method is not.&nbsp;\n  This may result in incorrect behavior at runtime, as callers of the get\n  method will not necessarily see a consistent state for the object.&nbsp;\n  The get method should be made synchronized.</p>\n\n    \n','2019-10-15 16:02:23'),(292,'IS_FIELD_NOT_GUARDED',0,6,'\n\n  <p> This field is annotated with net.jcip.annotations.GuardedBy or javax.annotation.concurrent.GuardedBy,\nbut can be accessed in a way that seems to violate those annotations.</p>\n\n','2019-10-15 16:02:23'),(293,'ML_SYNC_ON_FIELD_TO_GUARD_CHANGING_THAT_FIELD',0,6,'\n\n  <p> This method synchronizes on a field in what appears to be an attempt\nto guard against simultaneous updates to that field. But guarding a field\ngets a lock on the referenced object, not on the field. This may not\nprovide the mutual exclusion you need, and other threads might\nbe obtaining locks on the referenced objects (for other purposes). An example\nof this pattern would be:</p>\n<pre><code>private Long myNtfSeqNbrCounter = new Long(0);\nprivate Long getNotificationSequenceNumber() {\n     Long result = null;\n     synchronized(myNtfSeqNbrCounter) {\n         result = new Long(myNtfSeqNbrCounter.longValue() + 1);\n         myNtfSeqNbrCounter = new Long(result.longValue());\n     }\n     return result;\n}\n</code></pre>\n\n    \n','2019-10-15 16:02:23'),(294,'ML_SYNC_ON_UPDATED_FIELD',0,6,'\n\n  <p> This method synchronizes on an object\n   referenced from a mutable field.\n   This is unlikely to have useful semantics, since different\nthreads may be synchronizing on different objects.</p>\n\n    \n','2019-10-15 16:02:23'),(295,'WS_WRITEOBJECT_SYNC',0,6,'\n\n  <p> This class has a <code>writeObject()</code> method which is synchronized;\n  however, no other method of the class is synchronized.</p>\n\n    \n','2019-10-15 16:02:23'),(296,'RS_READOBJECT_SYNC',0,6,'\n\n  <p> This serializable class defines a <code>readObject()</code> which is\n  synchronized.&nbsp; By definition, an object created by deserialization\n  is only reachable by one thread, and thus there is no need for\n  <code>readObject()</code> to be synchronized.&nbsp; If the <code>readObject()</code>\n  method itself is causing the object to become visible to another thread,\n  that is an example of very dubious coding style.</p>\n\n    \n','2019-10-15 16:02:23'),(297,'SC_START_IN_CTOR',0,6,'\n\n  <p> The constructor starts a thread. This is likely to be wrong if\n   the class is ever extended/subclassed, since the thread will be started\n   before the subclass constructor is started.</p>\n\n    \n','2019-10-15 16:02:23'),(298,'WA_NOT_IN_LOOP',0,6,'\n\n  <p> This method contains a call to <code>java.lang.Object.wait()</code>\n  which is not in a loop.&nbsp; If the monitor is used for multiple conditions,\n  the condition the caller intended to wait for might not be the one\n  that actually occurred.</p>\n\n    \n','2019-10-15 16:02:23'),(299,'WA_AWAIT_NOT_IN_LOOP',0,6,'\n\n  <p> This method contains a call to <code>java.util.concurrent.await()</code>\n   (or variants)\n  which is not in a loop.&nbsp; If the object is used for multiple conditions,\n  the condition the caller intended to wait for might not be the one\n  that actually occurred.</p>\n\n    \n','2019-10-15 16:02:23'),(300,'NO_NOTIFY_NOT_NOTIFYALL',0,6,'\n\n  <p> This method calls <code>notify()</code> rather than <code>notifyAll()</code>.&nbsp;\n  Java monitors are often used for multiple conditions.&nbsp; Calling <code>notify()</code>\n  only wakes up one thread, meaning that the thread woken up might not be the\n  one waiting for the condition that the caller just satisfied.</p>\n\n    \n','2019-10-15 16:02:23'),(301,'UL_UNRELEASED_LOCK',0,6,'\n\n<p> This method acquires a JSR-166 (<code>java.util.concurrent</code>) lock,\nbut does not release it on all paths out of the method.  In general, the correct idiom\nfor using a JSR-166 lock is:\n</p>\n<pre><code>Lock l = ...;\nl.lock();\ntry {\n    // do something\n} finally {\n    l.unlock();\n}\n</code></pre>\n\n    \n','2019-10-15 16:02:23'),(302,'UL_UNRELEASED_LOCK_EXCEPTION_PATH',0,6,'\n\n<p> This method acquires a JSR-166 (<code>java.util.concurrent</code>) lock,\nbut does not release it on all exception paths out of the method.  In general, the correct idiom\nfor using a JSR-166 lock is:\n</p>\n<pre><code>Lock l = ...;\nl.lock();\ntry {\n    // do something\n} finally {\n    l.unlock();\n}\n</code></pre>\n\n    \n','2019-10-15 16:02:23'),(303,'MWN_MISMATCHED_WAIT',0,6,'\n\n<p> This method calls Object.wait() without obviously holding a lock\non the object.&nbsp;  Calling wait() without a lock held will result in\nan <code>IllegalMonitorStateException</code> being thrown.</p>\n\n    \n','2019-10-15 16:02:23'),(304,'MWN_MISMATCHED_NOTIFY',0,6,'\n\n<p> This method calls Object.notify() or Object.notifyAll() without obviously holding a lock\non the object.&nbsp;  Calling notify() or notifyAll() without a lock held will result in\nan <code>IllegalMonitorStateException</code> being thrown.</p>\n\n    \n','2019-10-15 16:02:23'),(305,'LI_LAZY_INIT_STATIC',543,6,'\n\n<p> This method contains an unsynchronized lazy initialization of a non-volatile static field.\nBecause the compiler or processor may reorder instructions,\nthreads are not guaranteed to see a completely initialized object,\n<em>if the method can be called by multiple threads</em>.\nYou can make the field volatile to correct the problem.\nFor more information, see the\n<a href=\"http://www.cs.umd.edu/~pugh/java/memoryModel/\">Java Memory Model web site</a>.\n</p>\n\n    \n','2019-10-15 16:02:23'),(306,'LI_LAZY_INIT_UPDATE_STATIC',543,6,'\n\n<p> This method contains an unsynchronized lazy initialization of a static field.\nAfter the field is set, the object stored into that location is further updated or accessed.\nThe setting of the field is visible to other threads as soon as it is set. If the\nfurther accesses in the method that set the field serve to initialize the object, then\nyou have a <em>very serious</em> multithreading bug, unless something else prevents\nany other thread from accessing the stored object until it is fully initialized.\n</p>\n<p>Even if you feel confident that the method is never called by multiple\nthreads, it might be better to not set the static field until the value\nyou are setting it to is fully populated/initialized.\n\n    \n','2019-10-15 16:02:23'),(307,'JLM_JSR166_UTILCONCURRENT_MONITORENTER',0,6,'\n\n<p> This method performs synchronization on an object that is an instance of\na class from the java.util.concurrent package (or its subclasses). Instances\nof these classes have their own concurrency control mechanisms that are orthogonal to\nthe synchronization provided by the Java keyword <code>synchronized</code>. For example,\nsynchronizing on an <code>AtomicBoolean</code> will not prevent other threads\nfrom modifying the  <code>AtomicBoolean</code>.</p>\n<p>Such code may be correct, but should be carefully reviewed and documented,\nand may confuse people who have to maintain the code at a later date.\n</p>\n\n','2019-10-15 16:02:23'),(308,'JML_JSR166_CALLING_WAIT_RATHER_THAN_AWAIT',0,6,'\n\n<p> This method calls\n<code>wait()</code>,\n<code>notify()</code> or\n<code>notifyAll()()</code>\non an object that also provides an\n<code>await()</code>,\n<code>signal()</code>,\n<code>signalAll()</code> method (such as util.concurrent Condition objects).\nThis probably isn\'t what you want, and even if you do want it, you should consider changing\nyour design, as other developers will find it exceptionally confusing.\n</p>\n\n','2019-10-15 16:02:23'),(309,'JLM_JSR166_LOCK_MONITORENTER',0,6,'\n\n<p> This method performs synchronization on an object that implements\njava.util.concurrent.locks.Lock. Such an object is locked/unlocked\nusing\n<code>acquire()</code>/<code>release()</code> rather\nthan using the <code>synchronized (...)</code> construct.\n</p>\n\n','2019-10-15 16:02:23'),(310,'SWL_SLEEP_WITH_LOCK_HELD',0,6,'\n      \n      <p>\n      This method calls Thread.sleep() with a lock held.  This may result\n      in very poor performance and scalability, or a deadlock, since other threads may\n      be waiting to acquire the lock.  It is a much better idea to call\n      wait() on the lock, which releases the lock and allows other threads\n      to run.\n      </p>\n      \n   \n','2019-10-15 16:02:23'),(311,'RV_RETURN_VALUE_OF_PUTIFABSENT_IGNORED',0,6,'\n          \n        The <code>putIfAbsent</code> method is typically used to ensure that a\n        single value is associated with a given key (the first value for which put\n        if absent succeeds).\n        If you ignore the return value and retain a reference to the value passed in,\n        you run the risk of retaining a value that is not the one that is associated with the key in the map.\n        If it matters which one you use and you use the one that isn\'t stored in the map,\n        your program will behave incorrectly.\n          \n      \n','2019-10-15 16:02:23'),(312,'NOISE_NULL_DEREFERENCE',0,7,'\n      \n    <p>Bogus warning.</p>\n\n    \n','2019-10-15 16:02:23'),(313,'NOISE_METHOD_CALL',0,7,'\n      \n    <p>Bogus warning.</p>\n\n    \n','2019-10-15 16:02:23'),(314,'NOISE_FIELD_REFERENCE',0,7,'\n      \n    <p>Bogus warning.</p>\n\n    \n','2019-10-15 16:02:23'),(315,'NOISE_OPERATION',0,7,'\n      \n    <p>Bogus warning.</p>\n\n    \n','2019-10-15 16:02:23'),(316,'HSC_HUGE_SHARED_STRING_CONSTANT',0,8,'\n      \n      <p>\n    A large String constant is duplicated across multiple class files.\n    This is likely because a final field is initialized to a String constant, and the Java language\n    mandates that all references to a final field from other classes be inlined into\nthat classfile. See <a href=\"http://bugs.java.com/bugdatabase/view_bug.do?bug_id=6447475\">JDK bug 6447475</a>\n    for a description of an occurrence of this bug in the JDK and how resolving it reduced\n    the size of the JDK by 1 megabyte.\n</p>\n      \n   \n','2019-10-15 16:02:23'),(317,'DMI_BLOCKING_METHODS_ON_URL',0,8,'\n\n  <p> The equals and hashCode\nmethod of URL perform domain name resolution, this can result in a big performance hit.\nSee <a href=\"http://michaelscharf.blogspot.com/2006/11/javaneturlequals-and-hashcode-make.html\">http://michaelscharf.blogspot.com/2006/11/javaneturlequals-and-hashcode-make.html</a> for more information.\nConsider using <code>java.net.URI</code> instead.\n   </p>\n\n    \n','2019-10-15 16:02:23'),(318,'DMI_COLLECTION_OF_URLS',0,8,'\n\n  <p> This method or field is or uses a Map or Set of URLs. Since both the equals and hashCode\nmethod of URL perform domain name resolution, this can result in a big performance hit.\nSee <a href=\"http://michaelscharf.blogspot.com/2006/11/javaneturlequals-and-hashcode-make.html\">http://michaelscharf.blogspot.com/2006/11/javaneturlequals-and-hashcode-make.html</a> for more information.\nConsider using <code>java.net.URI</code> instead.\n   </p>\n\n    \n','2019-10-15 16:02:23'),(319,'DM_STRING_CTOR',0,8,'\n\n  <p> Using the <code>java.lang.String(String)</code> constructor wastes memory\n  because the object so constructed will be functionally indistinguishable\n  from the <code>String</code> passed as a parameter.&nbsp; Just use the\n  argument <code>String</code> directly.</p>\n\n    \n','2019-10-15 16:02:23'),(320,'DM_STRING_VOID_CTOR',0,8,'\n\n  <p> Creating a new <code>java.lang.String</code> object using the\n  no-argument constructor wastes memory because the object so created will\n  be functionally indistinguishable from the empty string constant\n  <code>\"\"</code>.&nbsp; Java guarantees that identical string constants\n  will be represented by the same <code>String</code> object.&nbsp; Therefore,\n  you should just use the empty string constant directly.</p>\n\n    \n','2019-10-15 16:02:23'),(321,'DM_STRING_TOSTRING',0,8,'\n\n  <p> Calling <code>String.toString()</code> is just a redundant operation.\n  Just use the String.</p>\n\n    \n','2019-10-15 16:02:23'),(322,'DM_GC',0,8,'\n\n  <p> Code explicitly invokes garbage collection.\n  Except for specific use in benchmarking, this is very dubious.</p>\n  <p>In the past, situations where people have explicitly invoked\n  the garbage collector in routines such as close or finalize methods\n  has led to huge performance black holes. Garbage collection\n   can be expensive. Any situation that forces hundreds or thousands\n   of garbage collections will bring the machine to a crawl.</p>\n\n    \n','2019-10-15 16:02:23'),(323,'DM_BOOLEAN_CTOR',0,8,'\n\n  <p> Creating new instances of <code>java.lang.Boolean</code> wastes\n  memory, since <code>Boolean</code> objects are immutable and there are\n  only two useful values of this type.&nbsp; Use the <code>Boolean.valueOf()</code>\n  method (or Java 1.5 autoboxing) to create <code>Boolean</code> objects instead.</p>\n\n    \n','2019-10-15 16:02:23'),(324,'DM_NUMBER_CTOR',0,8,'\n      \n      <p>\n      Using <code>new Integer(int)</code> is guaranteed to always result in a new object whereas\n      <code>Integer.valueOf(int)</code> allows caching of values to be done by the compiler, class library, or JVM.\n      Using of cached values avoids object allocation and the code will be faster.\n      </p>\n      <p>\n      Values between -128 and 127 are guaranteed to have corresponding cached instances\n      and using <code>valueOf</code> is approximately 3.5 times faster than using constructor.\n      For values outside the constant range the performance of both styles is the same.\n      </p>\n      <p>\n      Unless the class must be compatible with JVMs predating Java 1.5,\n      use either autoboxing or the <code>valueOf()</code> method when creating instances of\n      <code>Long</code>, <code>Integer</code>, <code>Short</code>, <code>Character</code>, and <code>Byte</code>.\n      </p>\n      \n    \n','2019-10-15 16:02:23'),(325,'DM_FP_NUMBER_CTOR',0,8,'\n      \n      <p>\n      Using <code>new Double(double)</code> is guaranteed to always result in a new object whereas\n      <code>Double.valueOf(double)</code> allows caching of values to be done by the compiler, class library, or JVM.\n      Using of cached values avoids object allocation and the code will be faster.\n      </p>\n      <p>\n      Unless the class must be compatible with JVMs predating Java 1.5,\n      use either autoboxing or the <code>valueOf()</code> method when creating instances of <code>Double</code> and <code>Float</code>.\n      </p>\n      \n    \n','2019-10-15 16:02:23'),(326,'DM_BOXED_PRIMITIVE_TOSTRING',0,8,'\n\n  <p>A boxed primitive is allocated just to call toString(). It is more effective to just use the static\n  form of toString which takes the primitive value. So,</p>\n  <table>\n     <tr><th>Replace...</th><th>With this...</th></tr>\n     <tr><td>new Integer(1).toString()</td><td>Integer.toString(1)</td></tr>\n     <tr><td>new Long(1).toString()</td><td>Long.toString(1)</td></tr>\n     <tr><td>new Float(1.0).toString()</td><td>Float.toString(1.0)</td></tr>\n     <tr><td>new Double(1.0).toString()</td><td>Double.toString(1.0)</td></tr>\n     <tr><td>new Byte(1).toString()</td><td>Byte.toString(1)</td></tr>\n     <tr><td>new Short(1).toString()</td><td>Short.toString(1)</td></tr>\n     <tr><td>new Boolean(true).toString()</td><td>Boolean.toString(true)</td></tr>\n  </table>\n\n    \n','2019-10-15 16:02:23'),(327,'DM_BOXED_PRIMITIVE_FOR_PARSING',0,8,'\n\n  <p>A boxed primitive is created from a String, just to extract the unboxed primitive value.\n  It is more efficient to just call the static parseXXX method.</p>\n\n    \n','2019-10-15 16:02:23'),(328,'DM_BOXED_PRIMITIVE_FOR_COMPARE',0,8,'\n\n  <p>A boxed primitive is created just to call compareTo method. It\'s more efficient to use static compare method\n  (for double and float since Java 1.4, for other primitive types since Java 1.7) which works on primitives directly.\n  </p>\n\n    \n','2019-10-15 16:02:23'),(329,'BX_UNBOXED_AND_COERCED_FOR_TERNARY_OPERATOR',0,8,'\n\n  <p>A wrapped primitive value is unboxed and converted to another primitive type as part of the\nevaluation of a conditional ternary operator (the <code> b ? e1 : e2</code> operator). The\nsemantics of Java mandate that if <code>e1</code> and <code>e2</code> are wrapped\nnumeric values, the values are unboxed and converted/coerced to their common type (e.g,\nif <code>e1</code> is of type <code>Integer</code>\nand <code>e2</code> is of type <code>Float</code>, then <code>e1</code> is unboxed,\nconverted to a floating point value, and boxed. See JLS Section 15.25.\n</p>\n\n    \n','2019-10-15 16:02:23'),(330,'BX_UNBOXING_IMMEDIATELY_REBOXED',0,8,'\n\n  <p>A boxed value is unboxed and then immediately reboxed.\n</p>\n\n    \n','2019-10-15 16:02:23'),(331,'BX_BOXING_IMMEDIATELY_UNBOXED',0,8,'\n\n  <p>A primitive is boxed, and then immediately unboxed. This probably is due to a manual\n    boxing in a place where an unboxed value is required, thus forcing the compiler\nto immediately undo the work of the boxing.\n</p>\n\n    \n','2019-10-15 16:02:23'),(332,'BX_BOXING_IMMEDIATELY_UNBOXED_TO_PERFORM_COERCION',192,8,'\n\n  <p>A primitive boxed value constructed and then immediately converted into a different primitive type\n(e.g., <code>new Double(d).intValue()</code>). Just perform direct primitive coercion (e.g., <code>(int) d</code>).</p>\n\n    \n','2019-10-15 16:02:23'),(333,'DM_NEW_FOR_GETCLASS',0,8,'\n\n  <p>This method allocates an object just to call getClass() on it, in order to\n  retrieve the Class object for it. It is simpler to just access the .class property of the class.</p>\n\n    \n','2019-10-15 16:02:23'),(334,'DM_NEXTINT_VIA_NEXTDOUBLE',0,8,'\n\n  <p>If <code>r</code> is a <code>java.util.Random</code>, you can generate a random number from <code>0</code> to <code>n-1</code>\nusing <code>r.nextInt(n)</code>, rather than using <code>(int)(r.nextDouble() * n)</code>.\n</p>\n<p>The argument to nextInt must be positive. If, for example, you want to generate a random\nvalue from -99 to 0, use <code>-r.nextInt(100)</code>.\n</p>\n\n    \n','2019-10-15 16:02:23'),(335,'SS_SHOULD_BE_STATIC',0,8,'\n\n  <p> This class contains an instance final field that\n   is initialized to a compile-time static value.\n   Consider making the field static.</p>\n\n    \n','2019-10-15 16:02:23'),(336,'UUF_UNUSED_FIELD',0,8,'\n\n  <p> This field is never used.&nbsp; Consider removing it from the class.</p>\n\n    \n','2019-10-15 16:02:23'),(337,'URF_UNREAD_FIELD',0,8,'\n\n  <p> This field is never read.&nbsp; Consider removing it from the class.</p>\n\n    \n','2019-10-15 16:02:23'),(338,'SIC_INNER_SHOULD_BE_STATIC',0,8,'\n\n  <p> This class is an inner class, but does not use its embedded reference\n  to the object which created it.&nbsp; This reference makes the instances\n  of the class larger, and may keep the reference to the creator object\n  alive longer than necessary.&nbsp; If possible, the class should be\n   made static.\n</p>\n\n    \n','2019-10-15 16:02:23'),(339,'SIC_INNER_SHOULD_BE_STATIC_NEEDS_THIS',0,8,'\n\n  <p> This class is an inner class, but does not use its embedded reference\n  to the object which created it except during construction of the\ninner object.&nbsp; This reference makes the instances\n  of the class larger, and may keep the reference to the creator object\n  alive longer than necessary.&nbsp; If possible, the class should be\n  made into a <em>static</em> inner class. Since the reference to the\n   outer object is required during construction of the inner instance,\n   the inner class will need to be refactored so as to\n   pass a reference to the outer instance to the constructor\n   for the inner class.</p>\n\n    \n','2019-10-15 16:02:23'),(340,'SIC_INNER_SHOULD_BE_STATIC_ANON',0,8,'\n\n  <p> This class is an inner class, but does not use its embedded reference\n  to the object which created it.&nbsp; This reference makes the instances\n  of the class larger, and may keep the reference to the creator object\n  alive longer than necessary.&nbsp; If possible, the class should be\n  made into a <em>static</em> inner class. Since anonymous inner\nclasses cannot be marked as static, doing this will require refactoring\nthe inner class so that it is a named inner class.</p>\n\n    \n','2019-10-15 16:02:23'),(341,'UPM_UNCALLED_PRIVATE_METHOD',0,8,'\n\n<p> This private method is never called. Although it is\npossible that the method will be invoked through reflection,\nit is more likely that the method is never used, and should be\nremoved.\n</p>\n\n','2019-10-15 16:02:23'),(342,'SBSC_USE_STRINGBUFFER_CONCATENATION',0,8,'\n\n<p> The method seems to be building a String using concatenation in a loop.\nIn each iteration, the String is converted to a StringBuffer/StringBuilder,\n   appended to, and converted back to a String.\n   This can lead to a cost quadratic in the number of iterations,\n   as the growing string is recopied in each iteration. </p>\n\n<p>Better performance can be obtained by using\na StringBuffer (or StringBuilder in Java 1.5) explicitly.</p>\n\n<p> For example:</p>\n<pre><code>// This is bad\nString s = \"\";\nfor (int i = 0; i &lt; field.length; ++i) {\n    s = s + field[i];\n}\n\n// This is better\nStringBuffer buf = new StringBuffer();\nfor (int i = 0; i &lt; field.length; ++i) {\n    buf.append(field[i]);\n}\nString s = buf.toString();\n</code></pre>\n\n    \n','2019-10-15 16:02:23'),(343,'IIL_ELEMENTS_GET_LENGTH_IN_LOOP',0,8,'\n\n<p> The method calls NodeList.getLength() inside the loop and NodeList was produced by getElementsByTagName call.\nThis NodeList doesn\'t store its length, but computes it every time in not very optimal way.\nConsider storing the length to the variable before the loop.\n</p>\n\n    \n','2019-10-15 16:02:23'),(344,'IIL_PREPARE_STATEMENT_IN_LOOP',0,8,'\n\n<p> The method calls Connection.prepareStatement inside the loop passing the constant arguments.\nIf the PreparedStatement should be executed several times there\'s no reason to recreate it for each loop iteration.\nMove this call outside of the loop.</p>\n\n    \n','2019-10-15 16:02:23'),(345,'IIL_PATTERN_COMPILE_IN_LOOP',0,8,'\n\n<p> The method calls Pattern.compile inside the loop passing the constant arguments.\nIf the Pattern should be used several times there\'s no reason to compile it for each loop iteration.\nMove this call outside of the loop or even into static final field.</p>\n\n    \n','2019-10-15 16:02:23'),(346,'IIL_PATTERN_COMPILE_IN_LOOP_INDIRECT',0,8,'\n\n<p> The method creates the same regular expression inside the loop, so it will be compiled every iteration.\nIt would be more optimal to precompile this regular expression using Pattern.compile outside of the loop.</p>\n\n    \n','2019-10-15 16:02:23'),(347,'IIO_INEFFICIENT_INDEX_OF',0,8,'\n\n<p> This code passes a constant string of length 1 to String.indexOf().\nIt is more efficient to use the integer implementations of String.indexOf().\nf. e. call <code>myString.indexOf(\'.\')</code> instead of <code>myString.indexOf(\".\")</code></p>\n\n    \n','2019-10-15 16:02:23'),(348,'IIO_INEFFICIENT_LAST_INDEX_OF',0,8,'\n\n<p> This code passes a constant string of length 1 to String.lastIndexOf().\nIt is more efficient to use the integer implementations of String.lastIndexOf().\nf. e. call <code>myString.lastIndexOf(\'.\')</code> instead of <code>myString.lastIndexOf(\".\")</code></p>\n\n    \n','2019-10-15 16:02:23'),(349,'ITA_INEFFICIENT_TO_ARRAY',0,8,'\n\n<p> This method uses the toArray() method of a collection derived class, and passes\nin a zero-length prototype array argument.  It is more efficient to use\n<code>myCollection.toArray(new Foo[myCollection.size()])</code>\nIf the array passed in is big enough to store all of the\nelements of the collection, then it is populated and returned\ndirectly. This avoids the need to create a second array\n(by reflection) to return as the result.</p>\n\n    \n','2019-10-15 16:02:23'),(350,'WMI_WRONG_MAP_ITERATOR',0,8,'\n\n<p> This method accesses the value of a Map entry, using a key that was retrieved from\na keySet iterator. It is more efficient to use an iterator on the entrySet of the map, to avoid the\nMap.get(key) lookup.</p>\n\n        \n','2019-10-15 16:02:23'),(351,'UM_UNNECESSARY_MATH',0,8,'\n\n<p> This method uses a static method from java.lang.Math on a constant value. This method\'s\nresult in this case, can be determined statically, and is faster and sometimes more accurate to\njust use the constant. Methods detected are:\n</p>\n<table>\n<tr>\n   <th>Method</th> <th>Parameter</th>\n</tr>\n<tr>\n   <td>abs</td> <td>-any-</td>\n</tr>\n<tr>\n   <td>acos</td> <td>0.0 or 1.0</td>\n</tr>\n<tr>\n   <td>asin</td> <td>0.0 or 1.0</td>\n</tr>\n<tr>\n   <td>atan</td> <td>0.0 or 1.0</td>\n</tr>\n<tr>\n   <td>atan2</td> <td>0.0</td>\n</tr>\n<tr>\n   <td>cbrt</td> <td>0.0 or 1.0</td>\n</tr>\n<tr>\n   <td>ceil</td> <td>-any-</td>\n</tr>\n<tr>\n   <td>cos</td> <td>0.0</td>\n</tr>\n<tr>\n   <td>cosh</td> <td>0.0</td>\n</tr>\n<tr>\n   <td>exp</td> <td>0.0 or 1.0</td>\n</tr>\n<tr>\n   <td>expm1</td> <td>0.0</td>\n</tr>\n<tr>\n   <td>floor</td> <td>-any-</td>\n</tr>\n<tr>\n   <td>log</td> <td>0.0 or 1.0</td>\n</tr>\n<tr>\n   <td>log10</td> <td>0.0 or 1.0</td>\n</tr>\n<tr>\n   <td>rint</td> <td>-any-</td>\n</tr>\n<tr>\n   <td>round</td> <td>-any-</td>\n</tr>\n<tr>\n   <td>sin</td> <td>0.0</td>\n</tr>\n<tr>\n   <td>sinh</td> <td>0.0</td>\n</tr>\n<tr>\n   <td>sqrt</td> <td>0.0 or 1.0</td>\n</tr>\n<tr>\n   <td>tan</td> <td>0.0</td>\n</tr>\n<tr>\n   <td>tanh</td> <td>0.0</td>\n</tr>\n<tr>\n   <td>toDegrees</td> <td>0.0 or 1.0</td>\n</tr>\n<tr>\n   <td>toRadians</td> <td>0.0</td>\n</tr>\n</table>\n\n    \n','2019-10-15 16:02:23'),(352,'IMA_INEFFICIENT_MEMBER_ACCESS',0,8,'\n      \n      <p>\n      This method of an inner class reads from or writes to a private member variable of the owning class,\n      or calls a private method of the owning class. The compiler must generate a special method to access this\n      private member, causing this to be less efficient. Relaxing the protection of the member variable or method\n      will allow the compiler to treat this as a normal access.\n      </p>\n      \n    \n','2019-10-15 16:02:23'),(353,'XSS_REQUEST_PARAMETER_TO_SEND_ERROR',81,9,'\n\n    <p>This code directly writes an HTTP parameter to a Server error page (using HttpServletResponse.sendError). Echoing this untrusted input allows\nfor a reflected cross site scripting\nvulnerability. See <a href=\"http://en.wikipedia.org/wiki/Cross-site_scripting\">http://en.wikipedia.org/wiki/Cross-site_scripting</a>\nfor more information.</p>\n<p>SpotBugs looks only for the most blatant, obvious cases of cross site scripting.\nIf SpotBugs found <em>any</em>, you <em>almost certainly</em> have more cross site scripting\nvulnerabilities that SpotBugs doesn\'t report. If you are concerned about cross site scripting, you should seriously\nconsider using a commercial static analysis or pen-testing tool.\n</p>\n\n\n    \n','2019-10-15 16:02:23'),(354,'XSS_REQUEST_PARAMETER_TO_SERVLET_WRITER',0,9,'\n\n    <p>This code directly writes an HTTP parameter to Servlet output, which allows for a reflected cross site scripting\nvulnerability. See <a href=\"http://en.wikipedia.org/wiki/Cross-site_scripting\">http://en.wikipedia.org/wiki/Cross-site_scripting</a>\nfor more information.</p>\n<p>SpotBugs looks only for the most blatant, obvious cases of cross site scripting.\nIf SpotBugs found <em>any</em>, you <em>almost certainly</em> have more cross site scripting\nvulnerabilities that SpotBugs doesn\'t report. If you are concerned about cross site scripting, you should seriously\nconsider using a commercial static analysis or pen-testing tool.\n</p>\n\n\n    \n','2019-10-15 16:02:23'),(355,'XSS_REQUEST_PARAMETER_TO_JSP_WRITER',0,9,'\n\n    <p>This code directly writes an HTTP parameter to JSP output, which allows for a cross site scripting\nvulnerability. See <a href=\"http://en.wikipedia.org/wiki/Cross-site_scripting\">http://en.wikipedia.org/wiki/Cross-site_scripting</a>\nfor more information.</p>\n<p>SpotBugs looks only for the most blatant, obvious cases of cross site scripting.\nIf SpotBugs found <em>any</em>, you <em>almost certainly</em> have more cross site scripting\nvulnerabilities that SpotBugs doesn\'t report. If you are concerned about cross site scripting, you should seriously\nconsider using a commercial static analysis or pen-testing tool.\n</p>\n\n    \n','2019-10-15 16:02:23'),(356,'HRS_REQUEST_PARAMETER_TO_HTTP_HEADER',113,9,'\n            \n    <p>This code directly writes an HTTP parameter to an HTTP header, which allows for a HTTP response splitting\nvulnerability. See <a href=\"http://en.wikipedia.org/wiki/HTTP_response_splitting\">http://en.wikipedia.org/wiki/HTTP_response_splitting</a>\nfor more information.</p>\n<p>SpotBugs looks only for the most blatant, obvious cases of HTTP response splitting.\nIf SpotBugs found <em>any</em>, you <em>almost certainly</em> have more\nvulnerabilities that SpotBugs doesn\'t report. If you are concerned about HTTP response splitting, you should seriously\nconsider using a commercial static analysis or pen-testing tool.\n</p>\n\n\n        \n','2019-10-15 16:02:23'),(357,'HRS_REQUEST_PARAMETER_TO_COOKIE',113,9,'\n      \n    <p>This code constructs an HTTP Cookie using an untrusted HTTP parameter. If this cookie is added to an HTTP response, it will allow a HTTP response splitting\nvulnerability. See <a href=\"http://en.wikipedia.org/wiki/HTTP_response_splitting\">http://en.wikipedia.org/wiki/HTTP_response_splitting</a>\nfor more information.</p>\n<p>SpotBugs looks only for the most blatant, obvious cases of HTTP response splitting.\nIf SpotBugs found <em>any</em>, you <em>almost certainly</em> have more\nvulnerabilities that SpotBugs doesn\'t report. If you are concerned about HTTP response splitting, you should seriously\nconsider using a commercial static analysis or pen-testing tool.\n</p>\n\n\n    \n','2019-10-15 16:02:23'),(358,'PT_ABSOLUTE_PATH_TRAVERSAL',36,9,'\n\n    <p>The software uses an HTTP request parameter to construct a pathname that should be within a restricted directory,\nbut it does not properly neutralize absolute path sequences such as \"/abs/path\" that can resolve to a location that is outside of that directory.\n\nSee <a href=\"http://cwe.mitre.org/data/definitions/36.html\">http://cwe.mitre.org/data/definitions/36.html</a>\nfor more information.</p>\n<p>SpotBugs looks only for the most blatant, obvious cases of absolute path traversal.\nIf SpotBugs found <em>any</em>, you <em>almost certainly</em> have more\nvulnerabilities that SpotBugs doesn\'t report. If you are concerned about absolute path traversal, you should seriously\nconsider using a commercial static analysis or pen-testing tool.\n</p>\n\n\n    \n','2019-10-15 16:02:23'),(359,'PT_RELATIVE_PATH_TRAVERSAL',23,9,'\n\n    <p>The software uses an HTTP request parameter to construct a pathname that should be within a restricted directory, but it does not properly neutralize sequences such as \"..\" that can resolve to a location that is outside of that directory.\n\nSee <a href=\"http://cwe.mitre.org/data/definitions/23.html\">http://cwe.mitre.org/data/definitions/23.html</a>\nfor more information.</p>\n<p>SpotBugs looks only for the most blatant, obvious cases of relative path traversal.\nIf SpotBugs found <em>any</em>, you <em>almost certainly</em> have more\nvulnerabilities that SpotBugs doesn\'t report. If you are concerned about relative path traversal, you should seriously\nconsider using a commercial static analysis or pen-testing tool.\n</p>\n\n\n    \n','2019-10-15 16:02:23'),(360,'DMI_CONSTANT_DB_PASSWORD',259,9,'\n      \n    <p>This code creates a database connect using a hardcoded, constant password. Anyone with access to either the source code or the compiled code can\n    easily learn the password.\n</p>\n\n\n    \n','2019-10-15 16:02:23'),(361,'DMI_EMPTY_DB_PASSWORD',259,9,'\n      \n    <p>This code creates a database connect using a blank or empty password. This indicates that the database is not protected by a password.\n</p>\n\n\n    \n','2019-10-15 16:02:23'),(362,'SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE',89,9,'\n\n  <p>The method invokes the execute or addBatch method on an SQL statement with a String that seems\nto be dynamically generated. Consider using\na prepared statement instead. It is more efficient and less vulnerable to\nSQL injection attacks.\n</p>\n\n    \n','2019-10-15 16:02:23'),(363,'SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING',89,9,'\n\n  <p>The code creates an SQL prepared statement from a nonconstant String.\nIf unchecked, tainted data from a user is used in building this String, SQL injection could\nbe used to make the prepared statement do something unexpected and undesirable.\n</p>\n\n    \n','2019-10-15 16:02:23'),(364,'SQL_INJECTION_JDBC',89,9,'\n      \n<p>\nThe input values included in SQL queries need to be passed in safely.\nBind variables in prepared statements can be used to easily mitigate the risk of SQL injection.\n</p>\n\n<p>\n    <b>Vulnerable Code:</b><br/>\n    <pre>Connection conn = [...];\nStatement stmt = con.createStatement();\nResultSet rs = stmt.executeQuery(\"update COFFEES set SALES = \"+nbSales+\" where COF_NAME = \'\"+coffeeName+\"\'\");</pre>\n</p>\n<p>\n    <b>Solution:</b><br/>\n    <pre>Connection conn = [...];\nconn.prepareStatement(\"update COFFEES set SALES = ? where COF_NAME = ?\");\nupdateSales.setInt(1, nbSales);\nupdateSales.setString(2, coffeeName);</pre>\n</p>\n<br/>\n\n<b>References (JDBC)</b><br/>\n<a href=\"http://docs.oracle.com/javase/tutorial/jdbc/basics/prepared.html\">Oracle Documentation: The Java Tutorials &gt; Prepared Statements</a><br/>\n<b>References (SQL injection)</b><br/>\n<a href=\"http://projects.webappsec.org/w/page/13246963/SQL%20Injection\">WASC-19: SQL Injection</a><br/>\n<a href=\"http://capec.mitre.org/data/definitions/66.html\">CAPEC-66: SQL Injection</a><br/>\n<a href=\"http://cwe.mitre.org/data/definitions/89.html\">CWE-89: Improper Neutralization of Special Elements used in an SQL Command (\'SQL Injection\')</a><br/>\n<a href=\"https://www.owasp.org/index.php/Top_10_2013-A1-Injection\">OWASP: Top 10 2013-A1-Injection</a><br/>\n<a href=\"https://www.owasp.org/index.php/SQL_Injection_Prevention_Cheat_Sheet\">OWASP: SQL Injection Prevention Cheat Sheet</a><br/>\n<a href=\"https://www.owasp.org/index.php/Query_Parameterization_Cheat_Sheet\">OWASP: Query Parameterization Cheat Sheet</a><br/>\n</p>\n\n    \n','2019-10-15 16:02:23'),(365,'XSS_JSP_PRINT',79,9,'\n      \n<p>A potential XSS was found. It could be used to execute unwanted JavaScript in a client\'s browser. (See references)\n</p>\n<p>\n    <b>Vulnerable Code:</b>\n    <pre><%\nString taintedInput = (String) request.getAttribute(\"input\");\n%>\n[...]\n&lt;%= taintedInput %&gt;</pre>\n</p>\n<p>\n    <b>Solution:</b>\n    <pre>\n&lt;%\nString taintedInput = (String) request.getAttribute(\"input\");\n%&gt;\n[...]\n&lt;%= Encode.forHtml(taintedInput) %&gt;\n    </pre>\n</p>\n<p>\nThe best defense against XSS is context sensitive output encoding like the example above. There are typically 4 contexts to consider:\nHTML, JavaScript, CSS (styles), and URLs. Please follow the XSS protection rules defined in the OWASP XSS Prevention Cheat Sheet,\nwhich explains these defenses in significant detail.\n</p>\n<br/>\n<p>\n<b>References</b><br/>\n<a href=\"http://projects.webappsec.org/w/page/13246920/Cross%20Site%20Scripting\">WASC-8: Cross Site Scripting</a><br/>\n<a href=\"https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet\">OWASP: XSS Prevention Cheat Sheet</a><br/>\n<a href=\"https://www.owasp.org/index.php/Top_10_2013-A3-Cross-Site_Scripting_%28XSS%29\">OWASP: Top 10 2013-A3: Cross-Site Scripting (XSS)</a><br/>\n<a href=\"http://cwe.mitre.org/data/definitions/79.html\">CWE-79: Improper Neutralization of Input During Web Page Generation (\'Cross-site Scripting\')</a><br/>\n<a href=\"https://code.google.com/p/owasp-java-encoder/\">OWASP Java Encoder</a><br/>\n</p>\n            \n    \n','2019-10-15 16:02:23'),(366,'XSS_SERVLET',79,9,'\n      \n<p>\nA potential XSS was found. It could be used to execute unwanted JavaScript in a client\'s browser. (See references)\n</p>\n<p>\n    <b>Vulnerable Code:</b>\n<pre>protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n    String input1 = req.getParameter(\"input1\");\n    [...]\n    resp.getWriter().write(input1);\n}</pre>\n</p>\n<p>\n    <b>Solution:</b>\n<pre>protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n    String input1 = req.getParameter(\"input1\");\n    [...]\n    resp.getWriter().write(Encode.forHtml(input1));\n}</pre>\n</p>\n<p>\nThe best defense against XSS is context sensitive output encoding like the example above. There are typically 4 contexts to consider:\nHTML, JavaScript, CSS (styles), and URLs. Please follow the XSS protection rules defined in the OWASP XSS Prevention Cheat Sheet,\nwhich explains these defenses in significant detail.\n</p>\n<p>Note that this XSS in Servlet rule looks for similar issues, but looks for them in a different way than the existing\n\'XSS: Servlet reflected cross site scripting vulnerability\' and \'XSS: Servlet reflected cross site scripting vulnerability in error page\' rules in FindBugs.\n</p>\n<br/>\n<p>\n<b>References</b><br/>\n<a href=\"http://projects.webappsec.org/w/page/13246920/Cross%20Site%20Scripting\">WASC-8: Cross Site Scripting</a><br/>\n<a href=\"https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet\">OWASP: XSS Prevention Cheat Sheet</a><br/>\n<a href=\"https://www.owasp.org/index.php/Top_10_2013-A3-Cross-Site_Scripting_%28XSS%29\">OWASP: Top 10 2013-A3: Cross-Site Scripting (XSS)</a><br/>\n<a href=\"http://cwe.mitre.org/data/definitions/79.html\">CWE-79: Improper Neutralization of Input During Web Page Generation (\'Cross-site Scripting\')</a><br/>\n<a href=\"https://code.google.com/p/owasp-java-encoder/\">OWASP Java Encoder</a><br/>\n</p>\n            \n    \n','2019-10-15 16:02:23'),(367,'SQL_INJECTION_SPRING_JDBC',89,9,'\n      \n<p>\nThe input values included in SQL queries need to be passed in safely.\nBind variables in prepared statements can be used to easily mitigate the risk of SQL injection.\n</p>\n\n<p>\n    <b>Vulnerable Code:</b><br/>\n    <pre>JdbcTemplate jdbc = new JdbcTemplate();\nint count = jdbc.queryForObject(\"select count(*) from Users where name = \'\"+paramName+\"\'\", Integer.class);\n</pre>\n</p>\n<p>\n    <b>Solution:</b><br/>\n    <pre>JdbcTemplate jdbc = new JdbcTemplate();\nint count = jdbc.queryForObject(\"select count(*) from Users where name = ?\", Integer.class, paramName);</pre>\n</p>\n<br/>\n\n<b>References (Spring JDBC)</b><br/>\n<a href=\"http://docs.spring.io/spring-framework/docs/current/spring-framework-reference/html/jdbc.html\">Spring Official Documentation: Data access with JDBC</a><br/>\n<b>References (SQL injection)</b><br/>\n<a href=\"http://projects.webappsec.org/w/page/13246963/SQL%20Injection\">WASC-19: SQL Injection</a><br/>\n<a href=\"http://capec.mitre.org/data/definitions/66.html\">CAPEC-66: SQL Injection</a><br/>\n<a href=\"http://cwe.mitre.org/data/definitions/89.html\">CWE-89: Improper Neutralization of Special Elements used in an SQL Command (\'SQL Injection\')</a><br/>\n<a href=\"https://www.owasp.org/index.php/Top_10_2013-A1-Injection\">OWASP: Top 10 2013-A1-Injection</a><br/>\n<a href=\"https://www.owasp.org/index.php/SQL_Injection_Prevention_Cheat_Sheet\">OWASP: SQL Injection Prevention Cheat Sheet</a><br/>\n<a href=\"https://www.owasp.org/index.php/Query_Parameterization_Cheat_Sheet\">OWASP: Query Parameterization Cheat Sheet</a><br/>\n</p>\n\n    \n','2019-10-15 16:02:23'),(368,'SPRING_CSRF_PROTECTION_DISABLED',352,9,'\n      \n<p>Disabling Spring Security\'s CSRF protection is unsafe for standard web applications.</p>\n<p>A valid use case for disabling this protection would be a service exposing state-changing operations\nthat is guaranteed to be used only by non-browser clients.</p>\n<p>\n    <b>Insecure configuration:</b><br/>\n<pre>@EnableWebSecurity\npublic class WebSecurityConfig extends WebSecurityConfigurerAdapter {\n\n    @Override\n    protected void configure(HttpSecurity http) throws Exception {\n        http.csrf().disable();\n    }\n}</pre>\n</p>\n<p>\n<b>References</b><br/>\n<a href=\"https://docs.spring.io/spring-security/site/docs/current/reference/html/csrf.html#when-to-use-csrf-protection\">Spring Security Official Documentation: When to use CSRF protection</a><br/>\n<a href=\"https://www.owasp.org/index.php/Cross-Site_Request_Forgery_%28CSRF%29\">OWASP: Cross-Site Request Forgery</a><br/>\n<a href=\"https://www.owasp.org/index.php/Cross-Site_Request_Forgery_%28CSRF%29_Prevention_Cheat_Sheet\">OWASP: CSRF Prevention Cheat Sheet</a><br/>\n<a href=\"https://cwe.mitre.org/data/definitions/352.html\">CWE-352: Cross-Site Request Forgery (CSRF)</a>\n</p>\n\n    \n','2019-10-15 16:02:23'),(369,'XSS_REQUEST_WRAPPER',79,9,'\n      \n<p>\nAn implementation of <code>HttpServletRequestWrapper</code> called <code>XSSRequestWrapper</code> was published through\nvarious blog sites. <sup><a href=\"http://java.dzone.com/articles/stronger-anti-cross-site\">[1]</a></sup>\n<sup><a href=\"http://www.javacodegeeks.com/2012/07/anti-cross-site-scripting-xss-filter.html\">[2]</a></sup>\n</p>\n<p>\nThe filtering is weak for a few reasons:\n<ul>\n<li>It covers only parameters not headers and side-channel inputs</li>\n<li>The replace chain can be bypassed easily (see example below)</li>\n<li>It\'s a black list of very specific bad patterns (rather than a white list of good/valid input)</li>\n</ul>\n</p>\n<p>\n<b>Example of bypass:</b><br/>\n</p>\n<pre>&lt;scrivbscript:pt&gt;alert(1)&lt;/scrivbscript:pt&gt;</pre>\n<p>\nThe previous input will be transformed into <b><code>\"&lt;script&gt;alert(1)&lt;/script&gt;\"</code></b>.\nThe removal of <code>\"vbscript:\"</code> is after the replacement of <code>\"&lt;script&gt;.*&lt;/script&gt;\"</code>.\n</p>\n<p>\nFor stronger protection, choose a solution that encodes characters automatically in the <b><u>view</u></b> (template, jsp, ...) following\nthe XSS protection rules defined in the OWASP XSS Prevention Cheat Sheet.\n</p>\n<br/>\n<p>\n<b>References</b><br/>\n<a href=\"http://projects.webappsec.org/w/page/13246920/Cross%20Site%20Scripting\">WASC-8: Cross Site Scripting</a><br/>\n<a href=\"https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet\">OWASP: XSS Prevention Cheat Sheet</a><br/>\n<a href=\"https://www.owasp.org/index.php/Top_10_2013-A3-Cross-Site_Scripting_%28XSS%29\">OWASP: Top 10 2013-A3: Cross-Site Scripting (XSS)</a><br/>\n<a href=\"http://cwe.mitre.org/data/definitions/79.html\">CWE-79: Improper Neutralization of Input During Web Page Generation (\'Cross-site Scripting\')</a>\n</p>\n\n    \n','2019-10-15 16:02:23'),(370,'COMMAND_INJECTION',78,9,'\n      \n<p>The highlighted API is used to execute a system command. If unfiltered input is passed to this API, it can lead to arbitrary command execution.</p>\n<br/>\n<p>\n    <b>Vulnerable Code:</b><br/>\n<pre>import java.lang.Runtime;\n\nRuntime r = Runtime.getRuntime();\nr.exec(\"/bin/sh -c some_tool\" + input);</pre>\n</p>\n<p>\n<b>References</b><br/>\n<a href=\"https://www.owasp.org/index.php/Command_Injection\">OWASP: Command Injection</a><br/>\n<a href=\"https://www.owasp.org/index.php/Top_10_2013-A1-Injection\">OWASP: Top 10 2013-A1-Injection</a><br/>\n<a href=\"http://cwe.mitre.org/data/definitions/78.html\">CWE-78: Improper Neutralization of Special Elements used in an OS Command (\'OS Command Injection\')</a>\n</p>\n\n    \n','2019-10-15 16:02:23'),(371,'SCALA_COMMAND_INJECTION',78,9,'\n      \n<p>The highlighted API is used to execute a system command. If unfiltered input is passed to this API, it can lead to arbitrary command execution.</p>\n<br/>\n<p>\n    <b>Vulnerable Code:</b><br/>\n<pre>def executeCommand(value:String) = Action {\n    val result = value.!\n    Ok(\"Result:\\n\"+result)\n}</pre>\n</p>\n<p>\n<b>References</b><br/>\n<a href=\"https://www.owasp.org/index.php/Command_Injection\">OWASP: Command Injection</a><br/>\n<a href=\"https://www.owasp.org/index.php/Top_10_2013-A1-Injection\">OWASP: Top 10 2013-A1-Injection</a><br/>\n<a href=\"http://cwe.mitre.org/data/definitions/78.html\">CWE-78: Improper Neutralization of Special Elements used in an OS Command (\'OS Command Injection\')</a>\n</p>\n\n    \n','2019-10-15 16:02:23'),(372,'Seesion',0,9,'\n      \n    <p>Seesion...........</p>\n\n    \n','2019-10-15 16:02:23'),(373,'Unrestricted_FileUpload',0,9,'\n      \n  <p> Unrestricted_FileUpload\n</p>\n\n    \n','2019-10-15 16:02:23'),(374,'JSON_HIJACKING',0,9,'\n      \n    <p>JSON_HIJACKING...........</p>\n\n    \n','2019-10-15 16:02:23'),(375,'RESOURCE_INJECTION',0,9,'\n      <p>\n      This attack consists of changing resource identifiers used by an application in order to perform a malicious task.\n      When an application defines a resource type or location based on user input,\n      such as a file name or port number, this data can be manipulated to execute or access different resources.\n      The resource type affected by user input indicates the content type that may be exposed.\n      For example, an application that permits input of special characters like period, slash,\n      and backslash is risky when used in conjunction with methods that interact with the filesystem.\n      </p>\n    \n','2019-10-15 16:02:23'),(376,'RACE_CONDITION',0,9,'\n      <P>\n      Many Servlet developers do not understand that a Servlet is a singleton.\n     There is only one instance of the Servlet,\n      and that single instance is used and re-used to handle multiple requests that are processed simultaneously by different threads.\nA common result of this misunderstanding is that developers use Servlet member fields in such a way\n  that one user may inadvertently see another user\'s data. In other words,\n  storing user data in Servlet member fields introduces a data access race condition.\n  </p>\n    \n','2019-10-15 16:02:23'),(377,'PRIVACY_VIOLATION',0,9,'\n      <P>\n      Mishandling private information, such as customer passwords or Social Security numbers, can compromise user privacy and is often illegal.\n      An exposure of private information does not necessarily prevent the software from working properly, and in fact it might be intended by the developer, but it can still be undesirable (or explicitly prohibited by law) for the people who are associated with this private information.\n    Privacy violations may occur when:\n      Private user information enters the program.\n      The data is written to an external location, such as the console, file system, or network.\n      Private data can enter a program in a variety of ways:\n    Directly from the user in the form of a password or personal information\n    Accessed from a database or other data store by the application.\n    Indirectly from a partner or other third party\nSome types of private information include:\n    Government identifiers, such as Social Security Numbers\n    Contact information, such as home addresses and telephone numbers Geographic location - where the user is (or was)\n    Employment history\n    Financial data - such as credit card numbers, salary, bank accounts, and debts\n    Pictures, video, or audio\n    Behavioral patterns - such as web surfing history, when certain activities are performed, etc.\n    Relationships (and types of relationships) with others - family, friends, contacts, etc.\n    Communications - e-mail addresses, private e-mail messages, SMS text messages, chat logs, etc.\n    Health - medical conditions, insurance status, prescription records\n    Credentials, such as passwords, which can be used to access other information.\n  </p>\n    \n','2019-10-15 16:02:23'),(378,'AWS_QUERY_INJECTION',0,9,'\n      \n<p>\nConstructing SimpleDB queries containing user input can allow an attacker to view unauthorized records.<br/>\nThe following example dynamically constructs and executes a SimpleDB select() query allowing the user to specify the productCategory. The attacker can modify the query, bypass the required authentication for customerID and view records matching any customer.\n</p>\n<p>\n    <b>Vulnerable Code:</b><br/>\n<pre>...\nString customerID = getAuthenticatedCustomerID(customerName, customerCredentials);\nString productCategory = request.getParameter(\"productCategory\");\n...\nAmazonSimpleDBClient sdbc = new AmazonSimpleDBClient(appAWSCredentials);\nString query = \"select * from invoices where productCategory = \'\"\n            + productCategory + \"\' and customerID = \'\"\n            + customerID + \"\' order by \'\"\n            + sortColumn + \"\' asc\";\nSelectResult sdbResult = sdbc.select(new SelectRequest(query));\n</pre>\n</p>\n<p>\n    <b>Solution:</b><br/>\nThis issue is analogical to SQL Injection. Sanitize user input before using it in a SimpleDB query.\n</p>\n<br/>\n<p>\n<b>References</b><br/>\n<a href=\"https://cwe.mitre.org/data/definitions/943.html\">CWE-943: Improper Neutralization of Special Elements in Data Query Logic</a><br/>\n</p>\n            \n    \n','2019-10-15 16:02:23'),(379,'BEAN_PROPERTY_INJECTION',0,9,'\n      \n<p>\nAn attacker can set arbitrary bean properties that can compromise system integrity. Bean population functions allow to set a bean property or a nested property. An attacker can leverage this functionality to access special bean properties like class.classLoader that will allow him to override system properties and potentially execute arbitrary code.\n</p>\n<p>\n    <b>Vulnerable Code:</b><br/>\n<pre>MyBean bean = ...;\nHashMap map = new HashMap();\nEnumeration names = request.getParameterNames();\nwhile (names.hasMoreElements()) {\n    String name = (String) names.nextElement();\n    map.put(name, request.getParameterValues(name));\n}\nBeanUtils.populate(bean, map);</pre>\n</p>\n<p>\n    <b>Solution:</b><br/>\nAvoid using user controlled values to populate Bean property names.\n</p>\n<br/>\n<p>\n<b>References</b><br/>\n<a href=\"https://cwe.mitre.org/data/definitions/15.html\">CWE-15: External Control of System or Configuration Setting</a><br/>\n</p>\n            \n    \n','2019-10-15 16:02:23'),(380,'SPRING_FILE_DISCLOSURE',0,9,'\n      \n<p>\nConstructing a server-side redirect path with user input could allow an attacker to download application binaries (including application classes or jar files) or view arbitrary files within protected directories.<br/>\nAn attacker may be able to forge a request parameter to match sensitive file locations. For example, requesting \"http://example.com/?returnURL=WEB-INF/applicationContext.xml\" would display the application\'s applicationContext.xml file. The attacker would be able to locate and download the applicationContext.xml referenced in the other configuration files, and even class files or jar files, obtaining sensitive information and launching other types of attacks.\n</p>\n<p>\n    <b>Vulnerable Code:</b><br/>\n<pre>...\nString returnURL = request.getParameter(\"returnURL\");\nreturn new ModelAndView(returnURL);\n...</pre>\n</p>\n<p>\n    <b>Solution:</b><br/>\nAvoid constructing server-side redirects using user controlled input.\n</p>\n<br/>\n<p>\n<b>References</b><br/>\n<a href=\"https://cwe.mitre.org/data/definitions/552.html\">CWE-552: Files or Directories Accessible to External Parties</a><br/>\n</p>\n            \n    \n','2019-10-15 16:02:23'),(381,'STRUTS_FILE_DISCLOSURE',0,9,'\n      \n<p>\nConstructing a server-side redirect path with user input could allow an attacker to download application binaries (including application classes or jar files) or view arbitrary files within protected directories.<br/>\nAn attacker may be able to forge a request parameter to match sensitive file locations. For example, requesting \"http://example.com/?returnURL=WEB-INF/applicationContext.xml\" would display the application\'s applicationContext.xml file. The attacker would be able to locate and download the applicationContext.xml referenced in the other configuration files, and even class files or jar files, obtaining sensitive information and launching other types of attacks.\n</p>\n<p>\n    <b>Vulnerable Code:</b><br/>\n<pre>...\nString returnURL = request.getParameter(\"returnURL\");\nReturn new ActionForward(returnURL);\n...</pre>\n</p>\n<p>\n    <b>Solution:</b><br/>\nAvoid constructing server-side redirects using user controlled input.\n</p>\n<br/>\n<p>\n<b>References</b><br/>\n<a href=\"https://cwe.mitre.org/data/definitions/552.html\">CWE-552: Files or Directories Accessible to External Parties</a><br/>\n</p>\n            \n    \n','2019-10-15 16:02:23'),(382,'REQUESTDISPATCHER_FILE_DISCLOSURE',0,9,'\n      \n<p>\nConstructing a server-side redirect path with user input could allow an attacker to download application binaries (including application classes or jar files) or view arbitrary files within protected directories.<br/>\nAn attacker may be able to forge a request parameter to match sensitive file locations. For example, requesting \"http://example.com/?jspFile=../applicationContext.xml%3F\" would display the application\'s applicationContext.xml file. The attacker would be able to locate and download the applicationContext.xml referenced in the other configuration files, and even class files or jar files, obtaining sensitive information and launching other types of attacks.\n</p>\n<p>\n    <b>Vulnerable Code:</b><br/>\n<pre>...\nString jspFile = request.getParameter(\"jspFile\");\nrequest.getRequestDispatcher(\"/WEB-INF/jsps/\" + jspFile + \".jsp\").include(request, response);\n...</pre>\n</p>\n<p>\n    <b>Solution:</b><br/>\nAvoid constructing server-side redirects using user controlled input.\n</p>\n<br/>\n<p>\n<b>References</b><br/>\n<a href=\"https://cwe.mitre.org/data/definitions/552.html\">CWE-552: Files or Directories Accessible to External Parties</a><br/>\n</p>\n            \n    \n','2019-10-15 16:02:23'),(383,'FORMAT_STRING_MANIPULATION',0,9,'\n      \n<p>\nAllowing user input to control format parameters could enable an attacker to cause exceptions to be thrown or leak information.<br/>\nAttackers may be able to modify the format string argument, such that an exception is thrown. If this exception is left uncaught, it may crash the application. Alternatively, if sensitive information is used within the unused arguments, attackers may change the format string to reveal this information.<br/>\nThe example code below lets the user specify the decimal points to which it shows the balance. The user can in fact specify anything causing an exception to be thrown which could lead to application failure. Even more critical within this example, if an attacker can specify the user input \"2f %3$s %4$.2\", the format string would be \"The customer: %s %s has the balance %4$.2f %3$s %4$.2\". This would then lead to the sensitive accountNo to be included within the resulting string.\n</p>\n<p>\n    <b>Vulnerable Code:</b><br/>\n<pre>Formatter formatter = new Formatter(Locale.US);\nString format = \"The customer: %s %s has the balance %4$.\" + userInput + \"f\";\nformatter.format(format, firstName, lastName, accountNo, balance);</pre>\n</p>\n<p>\n    <b>Solution:</b><br/>\nAvoid using user controlled values in the format string argument.\n</p>\n<br/>\n<p>\n<b>References</b><br/>\n<a href=\"http://cwe.mitre.org/data/definitions/134.html\">CWE-134: Use of Externally-Controlled Format String</a><br/>\n</p>\n            \n    \n','2019-10-15 16:02:23'),(384,'HTTP_PARAMETER_POLLUTION',0,9,'\n      \n<p>\nConcatenating unvalidated user input into a URL can allow an attacker to override the value of a request parameter. Attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach. HTTP Parameter Pollution (HPP) attacks consist of injecting encoded query string delimiters into other existing parameters. If a web application does not properly sanitize the user input, a malicious user may compromise the logic of the application to perform either client-side or server-side attacks.<br/>\nIn the following example the programmer has not considered the possibility that an attacker could provide a lang such as en&user_id=1, which would enable him to change the user_id at will.\n</p>\n<p>\n    <b>Vulnerable Code:</b><br/>\n<pre>String lang = request.getParameter(\"lang\");\nGetMethod get = new GetMethod(\"http://www.host.com\");\nget.setQueryString(\"lang=\" + lang + \"&user_id=\" + user_id);\nget.execute();</pre>\n<p>\n    <b>Solution:</b><br/>\nSanitize user input before using it in HTTP parameters.\n</p>\n<br/>\n<p>\n<b>References</b><br/>\n<a href=\"https://capec.mitre.org/data/definitions/460.html\">CAPEC-460: HTTP Parameter Pollution (HPP)</a>\n</p>\n            \n    \n','2019-10-15 16:02:23'),(385,'SMTP_HEADER_INJECTION',0,9,'\n      \n<p>\nSimple Mail Transfer Protocol (SMTP) is a the text based protocol used for email delivery.\nLike with HTTP, headers are separate by new line separator.\nIf user input is place in a header line, the application should remove\nor replace new line characters (CR / LF).\nYou should use a safe wrapper such as <a href=\"https://commons.apache.org/proper/commons-email/userguide.html\">Apache Common Email</a>\nand <a href=\"http://www.simplejavamail.org\">Simple Java Mail</a> which filter special characters that can lead to header injection.\n\n</p>\n    <b>Vulnerable Code:</b><br/>\n<p>\n<pre>\nMessage message = new MimeMessage(session);\nmessage.setFrom(new InternetAddress(\"noreply@your-organisation.com\"));\nmessage.setRecipients(Message.RecipientType.TO, new InternetAddress[] {new InternetAddress(\"target@gmail.com\")});\nmessage.setSubject(usernameDisplay + \" has sent you notification\"); //Injectable API\nmessage.setText(\"Visit your ACME Corp profile for more info.\");\nTransport.send(message);\n</pre>\n</p>\n    <b>Solution</b><br/>\n<p>Use <a href=\"https://commons.apache.org/proper/commons-email/userguide.html\">Apache Common Email</a> or <a href=\"http://www.simplejavamail.org\">Simple Java Mail</a>.</p>\n\n<p>\n<b>References</b><br/>\n<a href=\"https://www.owasp.org/index.php/Testing_for_IMAP/SMTP_Injection_(OTG-INPVAL-011)\">OWASP SMTP Injection</a><br/>\n<a href=\"https://cwe.mitre.org/data/definitions/93.html\">CWE-93: Improper Neutralization of CRLF Sequences (\'CRLF Injection\')</a><br/>\n<a href=\"https://commons.apache.org/proper/commons-email/userguide.html\">Commons Email: User Guide</a><br/>\n<a href=\"http://www.simplejavamail.org\">Simple Java Mail Website</a><br/>\n<a href=\"https://security.stackexchange.com/a/54100/24973\">StackExchange InfoSec: What threats come from CRLF in email generation?</a><br/>\n</p>\n            \n    \n','2019-10-15 16:02:23'),(386,'CRLF_INJECTION_LOGS',117,9,'\n      \n<p>\n    When data from an untrusted source is put into a logger and not neutralized correctly,\n    an attacker could forge log entries or include malicious content.\n    Inserted false entries could be used to skew statistics, distract the administrator\n    or even to implicate another party in the commission of a malicious act.\n    If the log file is processed automatically, the attacker can render the file unusable\n    by corrupting the format of the file or injecting unexpected characters.\n    An attacker may also inject code or other commands into the log file and take advantage\n    of a vulnerability in the log processing utility (e.g. command injection or XSS).\n</p>\n<br/>\n<p>\n<b>Code at risk:</b><br/>\n<pre>String val = request.getParameter(\"user\");\nString metadata = request.getParameter(\"metadata\");\n[...]\nif(authenticated) {\n    log.info(\"User \" + val + \" (\" + metadata + \") was authenticated successfully\");\n}\nelse {\n    log.info(\"User \" + val + \" (\" + metadata + \") was not authenticated\");\n}\n</pre>\n\nA malicious user could send the metadata parameter with the value: <code>\"Firefox) was authenticated successfully\\r\\n[INFO] User bbb (Internet Explorer\"</code>.\n</p>\n\n<b>Solution:</b><br/>\n<p>\nYou can manually sanitize each parameter.\n<pre>\nlog.info(\"User \" + val.replaceAll(\"[\\r\\n]\",\"\") + \" (\" + userAgent.replaceAll(\"[\\r\\n]\",\"\") + \") was not authenticated\");\n</pre>\n</p>\n\n<p>\nYou can also configure your logger service to replace new line for all message events. Here is sample configuration for LogBack <a href=\"https://logback.qos.ch/manual/layouts.html#replace\">using the replace function</a>.\n<pre>\n&lt;pattern&gt;%-5level - %replace(%msg){\'[\\r\\n]\', \'\'}%n&lt;/pattern&gt;\n</pre>\n</p>\n\n<p>\nFinally, you can use a logger implementation that replace new line by spaces.\nThe project <a href=\"https://github.com/javabeanz/owasp-security-logging\">OWASP Security Logging</a> has an implementation for Logback and Log4j.\n</p>\n\n<br/>\n<p>\n    <b>References</b><br/>\n    <a href=\"http://cwe.mitre.org/data/definitions/117.html\">CWE-117: Improper Output Neutralization for Logs</a><br/>\n    <a href=\"http://cwe.mitre.org/data/definitions/93.html\">CWE-93: Improper Neutralization of CRLF Sequences (\'CRLF Injection\')</a><br/>\n    <a href=\"https://logback.qos.ch/manual/layouts.html#replace\">CWE-93: Improper Neutralization of CRLF Sequences (\'CRLF Injection\')</a><br/>\n    <a href=\"https://github.com/javabeanz/owasp-security-logging\">OWASP Security Logging</a><br/>\n</p>\n\n\n    \n','2019-10-15 16:02:23'),(387,'CUSTOM_INJECTION',74,9,'\n      \n<p>\nThe method identified is susceptible to injection. The input should be validated and properly escaped.\n</p>\n\n<p>\n    <b>Vulnerable code samples:</b><br/>\n    <pre>SqlUtil.execQuery(\"select * from UserEntity t where id = \" + parameterInput);</pre>\n</p>\n<p>\n    Refer to the online wiki for detailed instructions on <a href=\"https://github.com/find-sec-bugs/find-sec-bugs/wiki/Custom-signatures\">how to configure custom signatures</a>.\n</p>\n<p>\n<b>References</b><br/>\n<a href=\"http://projects.webappsec.org/w/page/13246963/SQL%20Injection\">WASC-19: SQL Injection</a><br/>\n<a href=\"https://www.owasp.org/index.php/Top_10_2013-A1-Injection\">OWASP: Top 10 2013-A1-Injection</a><br/>\n<a href=\"https://www.owasp.org/index.php/SQL_Injection_Prevention_Cheat_Sheet\">OWASP: SQL Injection Prevention Cheat Sheet</a><br/>\n<a href=\"https://www.owasp.org/index.php/Query_Parameterization_Cheat_Sheet\">OWASP: Query Parameterization Cheat Sheet</a><br/>\n<a href=\"http://capec.mitre.org/data/definitions/66.html\">CAPEC-66: SQL Injection</a><br/>\n<a href=\"http://cwe.mitre.org/data/definitions/89.html\">CWE-89: Improper Neutralization of Special Elements used in an SQL Command (\'SQL Injection\')</a>\n</p>\n\n    \n','2019-10-15 16:02:23'),(388,'LDAP_INJECTION',90,9,'\n      \n<p>\nJust like SQL, all inputs passed to an LDAP query need to be passed in safely. Unfortunately, LDAP doesn\'t have prepared statement interfaces like SQL.\nTherefore, the primary defense against LDAP injection is strong input validation of any untrusted data before including it in an LDAP query.\n</p>\n<p>\n    <b>Code at risk:</b><br/>\n    <pre>NamingEnumeration&lt;SearchResult&gt; answers = context.search(\"dc=People,dc=example,dc=com\",\n        \"(uid=\" + username + \")\", ctrls);</pre>\n</p>\n<br/>\n<p>\n<b>References</b><br/>\n<a href=\"http://projects.webappsec.org/w/page/13246947/LDAP%20Injection\">WASC-29: LDAP Injection</a><br/>\n<a href=\"https://www.owasp.org/index.php/Top_10_2013-A1-Injection\">OWASP: Top 10 2013-A1-Injection</a><br/>\n<a href=\"http://cwe.mitre.org/data/definitions/90.html\">CWE-90: Improper Neutralization of Special Elements used in an LDAP Query (\'LDAP Injection\')</a><br/>\n<a href=\"http://www.veracode.com/security/ldap-injection\">LDAP Injection Guide: Learn How to Detect LDAP Injections and Improve LDAP Security</a>\n</p>\n\n    \n','2019-10-15 16:02:23'),(389,'UNVALIDATED_REDIRECT',601,9,'\n      \n<p>\n    Unvalidated redirects occur when an application redirects a user to a destination URL specified by a user supplied\n    parameter that is not validated. Such vulnerabilities can be used to facilitate phishing attacks.\n</p>\n<p>\n    <b>Scenario</b><br/>\n    1. A user is tricked into visiting the malicious URL: <code>http://website.com/login?redirect=http://evil.vvebsite.com/fake/login</code><br/>\n    2. The user is redirected to a fake login page that looks like a site they trust. (<code>http://evil.vvebsite.com/fake/login</code>)<br/>\n    3. The user enters his credentials.<br/>\n    4. The evil site steals the user\'s credentials and redirects him to the original website.<br/>\n    <br/>\n    This attack is plausible because most users don\'t double check the URL after the redirection. Also, redirection to\n    an authentication page is very common.\n</p>\n<p>\n    <b>Vulnerable Code:</b></br/>\n    <pre>protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n    [...]\n    resp.sendRedirect(req.getParameter(\"redirectUrl\"));\n    [...]\n}</pre>\n</p>\n<p>\n    <b>Solution/Countermeasures:</b><br/>\n    <ul>\n        <li>Don\'t accept redirection destinations from users</li>\n        <li>Accept a destination key, and use it to look up the target (legal) destination</li>\n        <li>Accept only relative paths</li>\n        <li>White list URLs (if possible)</li>\n        <li>Validate that the beginning of the URL is part of a white list</li>\n    </ul>\n</p>\n<br/>\n<p>\n<b>References</b><br/>\n<a href=\"http://projects.webappsec.org/w/page/13246981/URL%20Redirector%20Abuse\">WASC-38: URL Redirector Abuse</a><br/>\n<a href=\"https://www.owasp.org/index.php/Top_10_2013-A10-Unvalidated_Redirects_and_Forwards\">OWASP: Top 10 2013-A10: Unvalidated Redirects and Forwards</a><br/>\n<a href=\"https://www.owasp.org/index.php/Unvalidated_Redirects_and_Forwards_Cheat_Sheet\">OWASP: Unvalidated Redirects and Forwards Cheat Sheet</a><br/>\n<a href=\"http://cwe.mitre.org/data/definitions/601.html\">CWE-601: URL Redirection to Untrusted Site (\'Open Redirect\')</a>\n</p>\n            \n    \n','2019-10-15 16:02:23'),(390,'OGNL_INJECTION',94,9,'\n      \n<p>\n    A expression is built with a dynamic value. The source of the value(s) should be verified to avoid\n    that unfiltered values fall into this risky code evaluation.\n</p>\n<p><b>Code at risk:</b></p>\n<p>\n<pre>\npublic void getUserProperty(String property) {\n  [...]\n  //The first argument is the dynamic expression.\n  return ognlUtil.getValue(\"user.\"+property, ctx, root, String.class);\n}\n</pre>\n</p>\n<p><b>Solution:</b></p>\n<p>\nIn general, method evaluating OGNL expression should not received user input. It is intented to be used in static configurations and JSP.\n</p>\n<br/>\n<p>\n    <b>References</b><br/>\n    <a href=\"https://community.saas.hpe.com/t5/Security-Research/Struts-2-OGNL-Expression-Injections/ba-p/288881\">HP Enterprise: Struts 2 OGNL Expression Injections by Alvaro Mu&Atilde;&plusmn;oz</a><br/>\n    <a href=\"https://blog.gdssecurity.com/labs/2017/3/27/an-analysis-of-cve-2017-5638.html\">Gotham Digital Science: An Analysis Of CVE-2017-5638</a><br/>\n    <a href=\"http://struts.apache.org/docs/s2-016.html\">Apache Struts2: Vulnerability S2-016</a><br/>\n    <a href=\"https://struts.apache.org/docs/ognl.html\">Apache Struts 2 Documentation: OGNL</a><br/>\n</p>\n\n    \n','2019-10-15 16:02:23'),(391,'SCRIPT_ENGINE_INJECTION',94,9,'\n      \n<p>\n    Dymanic code is being evaluate. A careful analysis of the code construction should be made. Malicious code execution\n    could lead to data leakage or operating system compromised.\n</p>\n<p>\n    If the evaluation of user code is intended, a proper sandboxing should be applied (see references).\n</p>\n\n<p><b>Code at risk:</b></p>\n<p>\n<pre>\npublic void runCustomTrigger(String script) {\n    ScriptEngineManager factory = new ScriptEngineManager();\n    ScriptEngine engine = factory.getEngineByName(\"JavaScript\");\n\n    engine.eval(script); //Bad things can happen here.\n}</pre>\n</p>\n\n<p><b>Solution:</b></p>\n<p>\nSafe evaluation of Javascript code using \"Cloudbees Rhino Sandbox\" library.<br/>\n<pre>\npublic void runCustomTrigger(String script) {\n    SandboxContextFactory contextFactory = new SandboxContextFactory();\n    Context context = contextFactory.makeContext();\n    contextFactory.enterContext(context);\n    try {\n        ScriptableObject prototype = context.initStandardObjects();\n        prototype.setParentScope(null);\n        Scriptable scope = context.newObject(prototype);\n        scope.setPrototype(prototype);\n\n        context.evaluateString(scope,script, null, -1, null);\n    } finally {\n        context.exit();\n    }\n}</pre>\n</p>\n<br/>\n<p>\n<b>References</b><br/>\n<a href=\"https://github.com/cloudbees/rhino-sandbox\">Cloudbees Rhino Sandbox</a>: Utility to create sandbox with Rhino (block access to all classes)<br/>\n<a href=\"http://codeutopia.net/blog/2009/01/02/sandboxing-rhino-in-java/\">CodeUtopia.net: Sandboxing Rhino in Java</a><br/>\n<a href=\"http://blog.h3xstream.com/2014/11/remote-code-execution-by-design.html\">Remote Code Execution .. by design</a>: Example of malicious payload. The samples given could be used to test sandboxing rules.<br/>\n<a href=\"http://cwe.mitre.org/data/definitions/94.html\">CWE-94: Improper Control of Generation of Code (\'Code Injection\')</a><br/>\n<a href=\"https://cwe.mitre.org/data/definitions/95.html\">CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code (\'Eval Injection\')</a><br/>\n</p>\n\n    \n','2019-10-15 16:02:23'),(392,'SPEL_INJECTION',94,9,'\n      \n<p>\n    A Spring expression is built with a dynamic value. The source of the value(s) should be verified to avoid\n    that unfiltered values fall into this risky code evaluation.\n</p>\n<p><b>Code at risk:</b></p>\n<p>\n<pre>\npublic void parseExpressionInterface(Person personObj,String property) {\n\n        ExpressionParser parser = new SpelExpressionParser();\n\n        //Unsafe if the input is control by the user..\n        Expression exp = parser.parseExpression(property+\" == \'Albert\'\");\n\n        StandardEvaluationContext testContext = new StandardEvaluationContext(personObj);\n        boolean result = exp.getValue(testContext, Boolean.class);\n[...]</pre>\n</p>\n<br/>\n<p>\n    <b>References</b><br/>\n    <a href=\"http://cwe.mitre.org/data/definitions/94.html\">CWE-94: Improper Control of Generation of Code (\'Code Injection\')</a><br/>\n    <a href=\"http://cwe.mitre.org/data/definitions/95.html\">CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code (\'Eval Injection\')</a><br/>\n    <a href=\"http://docs.spring.io/spring-framework/docs/3.2.x/spring-framework-reference/html/expressions.html\">Spring Expression Language (SpEL) - Official Documentation</a><br/>\n    <a href=\"https://www.mindedsecurity.com/fileshare/ExpressionLanguageInjection.pdf\">Minded Security: Expression Language Injection</a><br/>\n    <a href=\"http://blog.h3xstream.com/2014/11/remote-code-execution-by-design.html\">Remote Code Execution .. by design</a>: Example of malicious payload. The samples given could be used to test sandboxing rules.<br/>\n    <a href=\"https://gosecure.net/2018/05/15/beware-of-the-magic-spell-part-1-cve-2018-1273/\">Spring Data-Commons: (CVE-2018-1273)</a><br/>\n    <a href=\"http://gosecure.net/2018/05/17/beware-of-the-magic-spell-part-2-cve-2018-1260/\">Spring OAuth2: CVE-2018-1260</a>\n</p>\n\n\n    \n','2019-10-15 16:02:23'),(393,'EL_INJECTION',94,9,'\n      \n<p>\n    A expression is built with a dynamic value. The source of the value(s) should be verified to avoid\n    that unfiltered values fall into this risky code evaluation.\n</p>\n<p><b>Code at risk:</b></p>\n<p>\n<pre>public void evaluateExpression(String expression) {\n    FacesContext context = FacesContext.getCurrentInstance();\n    ExpressionFactory expressionFactory = context.getApplication().getExpressionFactory();\n    ELContext elContext = context.getELContext();\n    ValueExpression vex = expressionFactory.createValueExpression(elContext, expression, String.class);\n    return (String) vex.getValue(elContext);\n}</pre>\n</p>\n<br/>\n<p>\n    <b>References</b><br/>\n    <a href=\"http://blog.mindedsecurity.com/2015/11/reliable-os-shell-with-el-expression.html\">Minded Security: Abusing EL for executing OS commands</a><br/>\n    <a href=\"https://docs.oracle.com/javaee/6/tutorial/doc/gjddd.html\">The Java EE 6 Tutorial: Expression Language</a><br/>\n    <a href=\"http://cwe.mitre.org/data/definitions/94.html\">CWE-94: Improper Control of Generation of Code (\'Code Injection\')</a><br/>\n    <a href=\"http://cwe.mitre.org/data/definitions/95.html\">CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code (\'Eval Injection\')</a><br/>\n    <a href=\"https://www.mindedsecurity.com/fileshare/ExpressionLanguageInjection.pdf\">Minded Security: Expression Language Injection</a><br/>\n    <a href=\"http://danamodio.com/appsec/research/spring-remote-code-with-expression-language-injection/\">Dan Amodio\'s blog: Remote Code with Expression Language Injection</a><br/>\n    <a href=\"http://blog.h3xstream.com/2014/11/remote-code-execution-by-design.html\">Remote Code Execution .. by design</a>: Example of malicious payload. The samples given could be used to test sandboxing rules.<br/>\n</p>\n\n    \n','2019-10-15 16:02:23'),(394,'SEAM_LOG_INJECTION',94,9,'\n      \n<p>\n    Seam Logging API support an expression language to introduce bean property to log messages. The expression language can\n    also be the source to unwanted code execution.\n</p>\n<p>\n    In this context, an expression is built with a dynamic value. The source of the value(s) should be verified to avoid\n    that unfiltered values fall into this risky code evaluation.\n</p>\n<p><b>Code at risk:</b></p>\n<p>\n<pre>public void logUser(User user) {\n    log.info(\"Current logged in user : \" + user.getUsername());\n    //...\n}</pre>\n</p>\n<p><b>Solution:</b></p>\n<p>\n<pre>public void logUser(User user) {\n    log.info(\"Current logged in user : #0\", user.getUsername());\n    //...\n}</pre>\n</p>\n<br/>\n<p>\n    <b>References</b><br/>\n    <a href=\"https://issues.jboss.org/browse/JBSEAM-5130\">JBSEAM-5130: Issue documenting the risk</a><br/>\n    <a href=\"https://docs.jboss.org/seam/2.3.1.Final/reference/html_single/#d0e4185\">JBoss Seam: Logging (Official documentation)</a><br/>\n    <a href=\"https://docs.oracle.com/javaee/6/tutorial/doc/gjddd.html\">The Java EE 6 Tutorial: Expression Language</a><br/>\n    <a href=\"http://cwe.mitre.org/data/definitions/94.html\">CWE-94: Improper Control of Generation of Code (\'Code Injection\')</a><br/>\n    <a href=\"http://cwe.mitre.org/data/definitions/95.html\">CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code (\'Eval Injection\')</a><br/>\n\n</p>\n\n    \n','2019-10-15 16:02:23'),(395,'TRUST_BOUNDARY_VIOLATION',501,9,'\n      \n<p>\n    \"A trust boundary can be thought of as line drawn through a program. On one side of the line, data is untrusted.\n    On the other side of the line, data is assumed to be trustworthy. The purpose of validation logic is to allow data\n    to safely cross the trust boundary - to move from untrusted to trusted. A trust boundary violation occurs when a\n    program blurs the line between what is trusted and what is untrusted. By combining trusted and untrusted data in the\n    same data structure, it becomes easier for programmers to mistakenly trust unvalidated data.\" <sup>[1]</sup>\n</p>\n\n<p>\n<b>Code at risk:</b><br/>\n<pre>\npublic void doSomething(HttpServletRequest req, String activateProperty) {\n    //..\n\n    req.getSession().setAttribute(activateProperty,\"true\");\n\n}\n</pre>\n<br/>\n<pre>\npublic void loginEvent(HttpServletRequest req, String userSubmitted) {\n    //..\n\n    req.getSession().setAttribute(\"user\",userSubmitted);\n}\n</pre>\n</p>\n\n<p>\n<b>Solution:</b><br/>\n<p>\nThe solution would be to add validation prior setting a new session attribute. When possible, prefer data from\nsafe location rather than using direct user input.\n</p>\n<br/>\n<p>\n<b>References</b><br/>\n[1] <a href=\"https://cwe.mitre.org/data/definitions/501.html\">CWE-501: Trust Boundary Violation</a><br/>\n<a href=\"https://www.owasp.org/index.php/Trust_Boundary_Violation\">OWASP : Trust Boundary Violation</a>\n</p>\n\n    \n','2019-10-15 16:02:23'),(396,'INSECURE_COOKIE',614,9,'\n      \n<p>\nA new cookie is created without the <code>Secure</code> flag set.\nThe <code>Secure</code> flag is a directive to the browser to make sure that the cookie is not sent for insecure\ncommunication (<code>http://</code>).\n</p>\n\n<p>\n<b>Code at risk:</b><br/>\n<pre>\nCookie cookie = new Cookie(\"userName\",userName);\nresponse.addCookie(cookie);\n</pre>\n</p>\n\n<p>\n<b>Solution (Specific configuration):</b><br/>\n<pre>\nCookie cookie = new Cookie(\"userName\",userName);\ncookie.setSecure(true); // Secure flag\ncookie.setHttpOnly(true);\n</pre>\n</p>\n\n<p>\n<b>Solution (Servlet 3.0 configuration):</b><br/>\n<pre>\n&lt;web-app xmlns=\"http://java.sun.com/xml/ns/javaee\" version=\"3.0\"&gt;\n[...]\n&lt;session-config&gt;\n &lt;cookie-config&gt;\n  &lt;http-only&gt;true&lt;/http-only&gt;\n  &lt;secure&gt;true&lt;/secure&gt;\n &lt;/cookie-config&gt;\n&lt;/session-config&gt;\n&lt;/web-app&gt;\n</pre>\n</p>\n<br/>\n<p>\n<b>Reference</b><br/>\n<a href=\"https://cwe.mitre.org/data/definitions/614.html\">CWE-614: Sensitive Cookie in HTTPS Session Without \'Secure\' Attribute</a><br/>\n<a href=\"https://cwe.mitre.org/data/definitions/315.html\">CWE-315: Cleartext Storage of Sensitive Information in a Cookie</a><br/>\n<a href=\"https://cwe.mitre.org/data/definitions/311.html\">CWE-311: Missing Encryption of Sensitive Data</a><br/>\n<a href=\"https://www.owasp.org/index.php/SecureFlag\">OWASP: Secure Flag</a><br/>\n<a href=\"https://www.rapid7.com/db/vulnerabilities/http-cookie-secure-flag\">Rapid7: Missing Secure Flag From SSL Cookie</a>\n</p>\n\n    \n','2019-10-15 16:02:23'),(397,'HTTPONLY_COOKIE',0,9,'\n      \n<p>\nA new cookie is created without the <code>HttpOnly</code> flag set.\nThe <code>HttpOnly</code> flag is a directive to the browser to make sure that the cookie can not be red by\nmalicious script. When a user is the target of a \"Cross-Site Scripting\", the attacker would benefit greatly from getting\nthe session id for example.\n</p>\n\n<p>\n<b>Code at risk:</b><br/>\n<pre>\nCookie cookie = new Cookie(\"email\",userName);\nresponse.addCookie(cookie);\n</pre>\n</p>\n\n<p>\n<b>Solution (Specific configuration):</b><br/>\n<pre>\nCookie cookie = new Cookie(\"email\",userName);\ncookie.setSecure(true);\ncookie.setHttpOnly(true); //HttpOnly flag\n</pre>\n</p>\n\n<p>\n<b>Solution (Servlet 3.0 configuration):</b><br/>\n<pre>\n&lt;web-app xmlns=\"http://java.sun.com/xml/ns/javaee\" version=\"3.0\"&gt;\n[...]\n&lt;session-config&gt;\n &lt;cookie-config&gt;\n  &lt;http-only&gt;true&lt;/http-only&gt;\n  &lt;secure&gt;true&lt;/secure&gt;\n &lt;/cookie-config&gt;\n&lt;/session-config&gt;\n&lt;/web-app&gt;\n</pre>\n</p>\n<br/>\n<p>\n<b>Reference</b><br/>\n<a href=\"http://blog.codinghorror.com/protecting-your-cookies-httponly/\">Coding Horror blog: Protecting Your Cookies: HttpOnly</a><br/>\n<a href=\"https://www.owasp.org/index.php/HttpOnly\">OWASP: HttpOnly</a><br/>\n<a href=\"https://www.rapid7.com/db/vulnerabilities/http-cookie-http-only-flag\">Rapid7: Missing HttpOnly Flag From Cookie</a>\n</p>\n\n    \n','2019-10-15 16:02:23'),(398,'COOKIE_USAGE',0,9,'\n      \n<p>The information stored in a custom cookie should not be sensitive or related to the session. In most cases, sensitive data should only be stored in session\nand referenced by the user\'s session cookie. See HttpSession (HttpServletRequest.getSession())</p>\n<p>Custom cookies can be used for information that needs to live longer than and is independent of a specific session.</p>\n<br/>\n<p>\n<b>Reference</b><br/>\n<a href=\"http://cwe.mitre.org/data/definitions/315.html\">CWE-315: Cleartext Storage of Sensitive Information in a Cookie</a>\n</p>\n\n    \n','2019-10-15 16:02:23'),(399,'COOKIE_PERSISTENT',0,9,'\n      \n<p>\nStoring sensitive data in a persistent cookie for an extended period of time can lead to a breach of confidentiality or account compromise.\n</p>\n<p>\n    <b>Explanation:</b><br/>\nIf private information is stored in persistent cookies, attackers have a larger time window in which to steal this data - especially since persistent cookies are often set to expire in the distant future. Persistent cookies are generally stored in a text file on the client and an attacker with access to the victim\'s machine can steal this information.<br/>\nPersistent cookies are often used to profile users as they interact with a site. Depending on what is done with this tracking data, it is possible to use persistent cookies to violate users\' privacy.\n</p>\n<p>\n    <b>Vulnerable Code:</b> The following code sets a cookie to expire in 1 year.<br/>\n<pre>[...]\nCookie cookie = new Cookie(\"email\", email);\ncookie.setMaxAge(60*60*24*365);\n[...]</pre>\n</p>\n<p>\n    <b>Solution:</b><br/>\n<ul>\n    <li>Use persistent cookies only if necessary and limit their maximum age.</li>\n    <li>Don\'t use persistent cookies for sensitive data.</li>\n</ul>\n</p>\n<br/>\n<p>\n<b>References</b><br/>\n<a href=\"https://tomcat.apache.org/tomcat-5.5-doc/servletapi/javax/servlet/http/Cookie.html#setMaxAge%28int%29\">Class Cookie setMaxAge documentation</a><br/>\n<a href=\"https://cwe.mitre.org/data/definitions/539.html\">CWE-539: Information Exposure Through Persistent Cookies</a><br/>\n</p>\n            \n    \n','2019-10-15 16:02:23'),(400,'URL_REWRITING',0,9,'\n      \n<p>\nThe implementation of this method includes the logic to determine whether the session ID needs to be encoded in the URL.<br/>\nURL rewriting has significant security risks. Since session ID appears in the URL, it may be easily seen by third parties. Session ID in the URL can be disclosed in many ways, for example:<br/>\n<ul>\n    <li>Log files,</li>\n    <li>The browser history,</li>\n    <li>By copy-and-pasting it into an e-mail or posting,</li>\n    <li>The HTTP Referrer.</li>\n</ul>\n</p>\n<p>\n    <b>Vulnerable Code:</b><br/>\n<pre>out.println(\"Click &lt;a href=\" +\n                res.encodeURL(HttpUtils.getRequestURL(req).toString()) +\n                \"&gt;here&lt;/a&gt;\");</pre>\n</p>\n<p>\n    <b>Solution:</b><br/>\nAvoid using those methods. If you are looking to encode a URL String or form parameters do not confuse the URL rewriting methods with the URLEncoder class.\n</p>\n<br/>\n<p>\n<b>References</b><br/>\n<a href=\"https://www.owasp.org/index.php/Top_10_2010-A3-Broken_Authentication_and_Session_Management\">OWASP Top 10 2010-A3-Broken Authentication and Session Management</a><br/>\n</p>\n            \n    \n','2019-10-15 16:02:23'),(401,'DES_USAGE',327,9,'\n      \n<p>\nDES is considered strong ciphers for modern applications. Currently, NIST recommends the\nusage of AES block ciphers instead of DES.\n</p>\n<p>\n    <b>Example weak code:</b>\n<pre>Cipher c = Cipher.getInstance(\"DES/ECB/PKCS5Padding\");\nc.init(Cipher.ENCRYPT_MODE, k, iv);\nbyte[] cipherText = c.doFinal(plainText);</pre>\n</p>\n<p>\n    <b>Example solution:</b>\n    <pre>Cipher c = Cipher.getInstance(\"AES/GCM/NoPadding\");\nc.init(Cipher.ENCRYPT_MODE, k, iv);\nbyte[] cipherText = c.doFinal(plainText);</pre>\n</p>\n<br/>\n<p>\n<b>References</b><br/>\n<a href=\"http://www.nist.gov/itl/fips/060205_des.cfm\">NIST Withdraws Outdated Data Encryption Standard</a><br/>\n<a href=\"http://cwe.mitre.org/data/definitions/326.html\">CWE-326: Inadequate Encryption Strength</a>\n</p>\n\n    \n','2019-10-15 16:02:23'),(402,'TDES_USAGE',326,9,'\n      \n<p>\nTriple DES (also known as 3DES or DESede) is considered strong ciphers for modern applications. Currently, NIST recommends the\nusage of AES block ciphers instead of 3DES.\n</p>\n<p>\n    <b>Example weak code:</b>\n<pre>Cipher c = Cipher.getInstance(\"DESede/ECB/PKCS5Padding\");\nc.init(Cipher.ENCRYPT_MODE, k, iv);\nbyte[] cipherText = c.doFinal(plainText);</pre>\n</p>\n<p>\n    <b>Example solution:</b>\n    <pre>Cipher c = Cipher.getInstance(\"AES/GCM/NoPadding\");\nc.init(Cipher.ENCRYPT_MODE, k, iv);\nbyte[] cipherText = c.doFinal(plainText);</pre>\n</p>\n<br/>\n<p>\n<b>References</b><br/>\n<a href=\"http://www.nist.gov/itl/fips/060205_des.cfm\">NIST Withdraws Outdated Data Encryption Standard</a><br/>\n<a href=\"http://cwe.mitre.org/data/definitions/326.html\">CWE-326: Inadequate Encryption Strength</a>\n</p>\n\n    \n','2019-10-15 16:02:23'),(403,'RSA_NO_PADDING',780,9,'\n      \n<p>\nThe software uses the RSA algorithm but does not incorporate Optimal Asymmetric Encryption Padding (OAEP), which might weaken the encryption.\n</p>\n<p>\n<b>Vulnerable Code:</b><br/>\n<pre>Cipher.getInstance(\"RSA/NONE/NoPadding\")</pre>\n</p>\n<p>\n<b>Solution:</b><br/>\nThe code should be replaced with:<br/>\n<pre>Cipher.getInstance(\"RSA/ECB/OAEPWithMD5AndMGF1Padding\")</pre>\n</p>\n<br/>\n<p>\n<b>References</b><br/>\n<a href=\"http://cwe.mitre.org/data/definitions/780.html\">CWE-780: Use of RSA Algorithm without OAEP</a><br/>\n<a href=\"http://rdist.root.org/2009/10/06/why-rsa-encryption-padding-is-critical/\">Root Labs: Why RSA encryption padding is critical</a>\n</p>\n\n    \n','2019-10-15 16:02:23'),(404,'BAD_HEXA_CONVERSION',704,9,'\n      \n<p>When converting a byte array containing a hash signature to a human readable string, a conversion mistake can be made if\nthe array is read byte by byte. The following sample illustrates the use of Integer.toHexString() which will trim any leading zeroes\nfrom each byte of the computed hash value.\n<pre>\nMessageDigest md = MessageDigest.getInstance(\"SHA-256\");\nbyte[] resultBytes = md.digest(password.getBytes(\"UTF-8\"));\n\nStringBuilder stringBuilder = new StringBuilder();\nfor(byte b :resultBytes) {\n    stringBuilder.append( Integer.toHexString( b & 0xFF ) );\n}\n\nreturn stringBuilder.toString();</pre>\n</p>\n<p>\nThis mistake weakens the hash value computed since it introduces more collisions.\nFor example, the hash values \"0x0679\" and \"0x6709\" would both output as \"679\" for the above function.\n</p>\n\n<p>\nIn this situation, the use of toHexString() should be replaced with String.format() as follows:\n<pre>stringBuilder.append( String.format( \"%02X\", b ) );</pre>\n</p>\n<br/>\n<p>\n<b>References</b><br/>\n<a href=\"http://cwe.mitre.org/data/definitions/704.html\">CWE-704: Incorrect Type Conversion or Cast</a>\n</p>\n\n    \n','2019-10-15 16:02:23'),(405,'ECB_MODE',327,9,'\n      \n<p>An authentication cipher mode which provides better confidentiality of the encrypted data should be used instead of Electronic Codebook (ECB) mode,\nwhich does not provide good confidentiality. Specifically, ECB mode produces the same output for the same input each time. So,\nfor example, if a user is sending a password, the encrypted value is the same each time. This allows an attacker to intercept\nand replay the data.</p>\n<p>\nTo fix this, something like Galois/Counter Mode (GCM) should be used instead.\n</p>\n<p>\n<b>Code at risk:</b>\n    <pre>Cipher c = Cipher.getInstance(\"AES/ECB/NoPadding\");\nc.init(Cipher.ENCRYPT_MODE, k, iv);\nbyte[] cipherText = c.doFinal(plainText);</pre>\n</p>\n<p>\n    <b>Solution:</b>\n    <pre>Cipher c = Cipher.getInstance(\"AES/GCM/NoPadding\");\nc.init(Cipher.ENCRYPT_MODE, k, iv);\nbyte[] cipherText = c.doFinal(plainText);</pre>\n</p>\n<br/>\n<p>\n<b>References</b><br/>\n<a href=\"http://en.wikipedia.org/wiki/Authenticated_encryption\">Wikipedia: Authenticated encryption</a><br/>\n<a href=\"http://csrc.nist.gov/groups/ST/toolkit/BCM/modes_development.html#01\">NIST: Authenticated Encryption Modes</a><br/>\n<a href=\"http://en.wikipedia.org/wiki/Block_cipher_modes_of_operation#Electronic_codebook_.28ECB.29\">Wikipedia: Block cipher modes of operation</a><br/>\n<a href=\"http://csrc.nist.gov/publications/nistpubs/800-38a/sp800-38a.pdf\">NIST: Recommendation for Block Cipher Modes of Operation</a>\n</p>\n\n    \n','2019-10-15 16:02:23'),(406,'PADDING_ORACLE',326,9,'\n      \n<p>\n    This specific mode of CBC with PKCS5Padding is susceptible to padding oracle attacks. An adversary could potentially decrypt the\n    message if the system exposed the difference between plaintext with invalid padding or valid padding. The distinction between\n    valid and invalid padding is usually revealed through distinct error messages being returned for each condition.\n</p>\n<p>\n    <b>Code at risk:</b>\n    <pre>Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\nc.init(Cipher.ENCRYPT_MODE, k, iv);\nbyte[] cipherText = c.doFinal(plainText);</pre>\n</p>\n<p>\n    <b>Solution:</b>\n    <pre>Cipher c = Cipher.getInstance(\"AES/GCM/NoPadding\");\nc.init(Cipher.ENCRYPT_MODE, k, iv);\nbyte[] cipherText = c.doFinal(plainText);</pre>\n</p>\n<br/>\n<p>\n    <b>References</b><br/>\n    <a href=\"http://www.infobytesec.com/down/paddingoracle_openjam.pdf\">Padding Oracles for the masses (by Matias Soler)</a><br/>\n    <a href=\"http://en.wikipedia.org/wiki/Authenticated_encryption\">Wikipedia: Authenticated encryption</a><br/>\n    <a href=\"http://csrc.nist.gov/groups/ST/toolkit/BCM/modes_development.html#01\">NIST: Authenticated Encryption Modes</a><br/>\n    <a href=\"http://capec.mitre.org/data/definitions/463.html\">CAPEC: Padding Oracle Crypto Attack</a><br/>\n    <a href=\"http://cwe.mitre.org/data/definitions/696.html\">CWE-696: Incorrect Behavior Order</a>\n</p>\n\n    \n','2019-10-15 16:02:23'),(407,'CIPHER_INTEGRITY',353,9,'\n      \n<p>\n    The ciphertext produced is susceptible to alteration by an adversary. This mean that the cipher provides no way to detect that the\n    data has been tampered with. If the ciphertext can be controlled by an attacker, it could be altered without detection.\n</p>\n<p>\n    The solution is to used a cipher that includes a Hash based Message Authentication Code (HMAC) to sign the data. Combining a HMAC function to the\n    existing cipher is prone to error <sup><a href=\"http://www.thoughtcrime.org/blog/the-cryptographic-doom-principle/\">[1]</a></sup>. Specifically,\n    it is always recommended that you be able to verify the HMAC first, and only if the data is unmodified, do you then perform any cryptographic\n    functions on the data.\n</p>\n<p>The following modes are vulnerable because they don\'t provide a HMAC:<br/>\n    - CBC<br/>\n    - OFB<br/>\n    - CTR<br/>\n    - ECB<br/><br/>\n    The following snippets code are some examples of vulnerable code.<br/><br/>\n    <b>Code at risk:</b><br/>\n    <i>AES in CBC mode</i><br/>\n\n    <pre>Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\nc.init(Cipher.ENCRYPT_MODE, k, iv);\nbyte[] cipherText = c.doFinal(plainText);</pre>\n    <br/>\n    <i>Triple DES with ECB mode</i><br/>\n\n<pre>Cipher c = Cipher.getInstance(\"DESede/ECB/PKCS5Padding\");\nc.init(Cipher.ENCRYPT_MODE, k, iv);\nbyte[] cipherText = c.doFinal(plainText);</pre>\n</p>\n<p>\n    <b>Solution:</b>\n    <pre>Cipher c = Cipher.getInstance(\"AES/GCM/NoPadding\");\nc.init(Cipher.ENCRYPT_MODE, k, iv);\nbyte[] cipherText = c.doFinal(plainText);</pre>\n</p>\n<p>\nIn the example solution above, the GCM mode introduces an HMAC into the resulting encrypted data, providing integrity of the result.\n</p>\n<br/>\n<p>\n    <b>References</b><br/>\n    <a href=\"http://en.wikipedia.org/wiki/Authenticated_encryption\">Wikipedia: Authenticated encryption</a><br/>\n    <a href=\"http://csrc.nist.gov/groups/ST/toolkit/BCM/modes_development.html#01\">NIST: Authenticated Encryption Modes</a><br/>\n    <a href=\"http://www.thoughtcrime.org/blog/the-cryptographic-doom-principle/\">Moxie Marlinspike\'s blog: The Cryptographic Doom Principle</a><br/>\n    <a href=\"http://cwe.mitre.org/data/definitions/353.html\">CWE-353: Missing Support for Integrity Check</a>\n</p>\n\n    \n','2019-10-15 16:02:23'),(408,'CUSTOM_MESSAGE_DIGEST',327,9,'\n      \n<p>Implementing a custom MessageDigest is error-prone.</p>\n<p><a href=\"http://csrc.nist.gov/groups/ST/toolkit/secure_hashing.html\">NIST</a> recommends the use of SHA-224, SHA-256, SHA-384, SHA-512, SHA-512/224, or SHA-512/256.</p>\n<blockquote>\n    \"<b>SHA-1 for digital signature generation:</b><br/>\n    SHA-1 may only be used for digital signature generation where specifically allowed by NIST protocol-specific guidance.\n    For all other applications, <u>SHA-1 shall not be used for digital signature generation</u>.<br/>\n    <b>SHA-1 for digital signature verification:</b><br/>\n    For digital signature verification, <u>SHA-1 is allowed for legacy-use</u>.<br/>\n    [...]<br/>\n    <b>SHA-224, SHA-256, SHA-384, SHA-512, SHA-512/224, and SHA-512/256</b>:<br/>\n    The use of these hash functions is acceptable for all hash function applications.\"<br/>\n    - <a href=\"http://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-131Ar1.pdf\">NIST: Transitions: Recommendation for Transitioning the Use of Cryptographic Algorithms and Key Lengths p.15</a>\n</blockquote>\n<p>\n    <b>Vulnerable Code:</b><br/>\n<pre>MyProprietaryMessageDigest extends MessageDigest {\n    @Override\n    protected byte[] engineDigest() {\n        [...]\n        //Creativity is a bad idea\n        return [...];\n    }\n}</pre>\n</p>\n<p>\n<p>Upgrade your implementation to use one of the approved algorithms. Use an algorithm that is sufficiently strong for your specific security needs.</p>\n<p>\n    <b>Example Solution:</b><br/>\n<pre>MessageDigest sha256Digest = MessageDigest.getInstance(\"SHA256\");\nsha256Digest.update(password.getBytes());</pre>\n</p>\n<br/>\n<p>\n<b>References</b><br/>\n<a href=\"http://csrc.nist.gov/groups/ST/toolkit/secure_hashing.html\">NIST Approved Hashing Algorithms</a><br/>\n<a href=\"http://cwe.mitre.org/data/definitions/327.html\">CWE-327: Use of a Broken or Risky Cryptographic Algorithm</a>\n</p>\n\n    \n','2019-10-15 16:02:23'),(409,'INFORMATION_EXPOSURE_THROUGH_AN_ERROR_MESSAGE',209,9,'\n      \n<p>\nThe sensitive information may be valuable information on its own (such as a password), or it may be useful for launching other, more deadly attacks. If an attack fails, an attacker may use error information provided by the server to launch another more focused attack. For example, an attempt to exploit a path traversal weakness (CWE-22) might yield the full pathname of the installed application. In turn, this could be used to select the proper number of \"..\" sequences to navigate to the targeted file. An attack using SQL injection (CWE-89) might not initially succeed, but an error message could reveal the malformed query, which would expose query logic and possibly even passwords or other sensitive information used within the query.\n</p>\n<p>\n    <b>Vulnerable Code:</b><br/>\n<pre>try {\n  out = httpResponse.getOutputStream()\n} catch (Exception e) {\n  e.printStackTrace(out);\n}</pre>\n</p>\n<p>\n<b>References</b><br/>\n<a href=\"https://cwe.mitre.org/data/definitions/209.html\">CWE-209: Information Exposure Through an Error Message</a>\n</p>\n            \n    \n','2019-10-15 16:02:23'),(410,'ESAPI_ENCRYPTOR',0,9,'\n      \n<p>\n    The ESAPI has a small history of vulnerabilities within the cryptography component. Here is a quick validation list to\n    make sure the Authenticated Encryption is working as expected.\n</p>\n<p><b>1. Library Version</b></p>\n<p>\n    This issue is corrected in ESAPI version 2.1.0. Versions <= 2.0.1 are vulnerable to a MAC bypass (CVE-2013-5679).<br/>\n</p>\n<p>\n    For Maven users, the plugin <a href=\"http://mojo.codehaus.org/versions-maven-plugin/\">versions</a> can be called using the\n    following command. The effective version of ESAPI will be available in the output.<br/>\n    <pre>$ mvn versions:display-dependency-updates</pre>\n    <br/>Output:<br/>\n    <pre>\n[...]\n[INFO] The following dependencies in Dependencies have newer versions:\n[INFO]   org.slf4j:slf4j-api ................................... 1.6.4 -> 1.7.7\n[INFO]   org.owasp.esapi:esapi ................................. 2.0.1 -> 2.1.0\n[...]\n    </pre>\n</p>\n<p>\n    or by looking at the configuration directly.<br/>\n    <pre>\n&lt;dependency&gt;\n    &lt;groupId&gt;org.owasp.esapi&lt;/groupId&gt;\n    &lt;artifactId&gt;esapi&lt;/artifactId&gt;\n    &lt;version&gt;2.1.0&lt;/version&gt;\n&lt;/dependency&gt;</pre>\n</p>\n<p>\n    For Ant users, the jar used should be <a href=\"http://repo1.maven.org/maven2/org/owasp/esapi/esapi/2.1.0/esapi-2.1.0.jar\">esapi-2.1.0.jar</a>.\n</p>\n<p><b>2. Configuration:</b></p>\n    <p>\n    The library version 2.1.0 is still vulnerable to key size being changed in the ciphertext definition (CVE-2013-5960). Some precautions need to be taken.<br/>\n    <br/>\n    <div><b>The cryptographic configuration of ESAPI can also be vulnerable if any of these elements are present:</b><br/>\n    <b>Insecure configuration:</b><br/>\n    <pre>\nEncryptor.CipherText.useMAC=false\n\nEncryptor.EncryptionAlgorithm=AES\nEncryptor.CipherTransformation=AES/CBC/PKCS5Padding\n\nEncryptor.cipher_modes.additional_allowed=CBC</pre>\n    </div>\n</p>\n<p>\n    <div>\n    <b>Secure configuration:</b><br/>\n    <pre>\n#Needed\nEncryptor.CipherText.useMAC=true\n\n#Needed to have a solid auth. encryption\nEncryptor.EncryptionAlgorithm=AES\nEncryptor.CipherTransformation=AES/GCM/NoPadding\n\n#CBC mode should be removed to avoid padding oracle\nEncryptor.cipher_modes.additional_allowed=</pre>\n    </div>\n</p>\n<br/>\n<p>\n    <b>References</b><br/>\n    <a href=\"http://owasp-esapi-java.googlecode.com/svn/trunk/documentation/ESAPI-security-bulletin1.pdf\">ESAPI Security bulletin 1 (CVE-2013-5679)</a><br/>\n    <a href=\"http://nvd.nist.gov/view/vuln/detail?vulnId=CVE-2013-5679\">Vulnerability Summary for CVE-2013-5679</a><br/>\n    <a href=\"http://www.synacktiv.com/ressources/synacktiv_owasp_esapi_hmac_bypass.pdf\">Synactiv: Bypassing HMAC validation in OWASP ESAPI symmetric encryption</a><br/>\n    <a href=\"http://cwe.mitre.org/data/definitions/310.html\">CWE-310: Cryptographic Issues</a><br/>\n    <a href=\"http://lists.owasp.org/pipermail/esapi-dev/2015-March/002533.html\">ESAPI-dev mailing list: Status of CVE-2013-5960</a><br/>\n</p>\n\n    \n','2019-10-15 16:02:23'),(411,'HAZELCAST_SYMMETRIC_ENCRYPTION',327,9,'\n      \n<p>The network communications for Hazelcast is configured to use a symmetric cipher (probably DES or blowfish).</p>\n<p>Those ciphers alone do not provide integrity or secure authentication. The use of asymmetric encryption is preferred.</p>\n<br/>\n<p>\n<b>References</b><br/>\n<a href=\"http://projects.webappsec.org/w/page/13246945/Insufficient%20Transport%20Layer%20Protection\">WASC-04: Insufficient Transport Layer Protection</a><br/>\n<a href=\"http://docs.hazelcast.org/docs/3.5/manual/html/encryption.html\">Hazelcast Documentation: Encryption</a><br/>\n<a href=\"http://cwe.mitre.org/data/definitions/326.html\">CWE-326: Inadequate Encryption Strength</a>\n</p>\n\n    \n','2019-10-15 16:02:23'),(412,'INSECURE_SMTP_SSL',0,9,'\n      \n<p>\nServer identity verification is disabled when making SSL connections. Some email libraries that enable SSL connections do not verify the server certificate by default. This is equivalent to trusting all certificates. When trying to connect to the server, this application would readily accept a certificate issued to \"hackedserver.com\". The application would now potentially leak sensitive user information on a broken SSL connection to the hacked server.\n</p>\n<p>\n    <b>Vulnerable Code:</b><br/>\n<pre>...\nEmail email = new SimpleEmail();\nemail.setHostName(\"smtp.servermail.com\");\nemail.setSmtpPort(465);\nemail.setAuthenticator(new DefaultAuthenticator(username, password));\nemail.setSSLOnConnect(true);\nemail.setFrom(\"user@gmail.com\");\nemail.setSubject(\"TestMail\");\nemail.setMsg(\"This is a test mail ... :-)\");\nemail.addTo(\"foo@bar.com\");\nemail.send();\n...</pre>\n</p>\n<p>\n    <b>Solution:</b><br/>\nPlease add the following check to verify the server cerfiticate:\n<pre>email.setSSLCheckServerIdentity(true);</pre>\n</p>\n<br/>\n<p>\n<b>References</b><br/>\n<a href=\"https://cwe.mitre.org/data/definitions/297.html\">CWE-297: Improper Validation of Certificate with Host Mismatch</a><br/>\n</p>\n            \n    \n','2019-10-15 16:02:23'),(413,'BLOWFISH_KEY_SIZE',326,9,'\n      \n<p>\nThe Blowfish cipher supports keysizes from 32 bits to 448 bits. A small key size makes the ciphertext vulnerable to brute force attacks.\nAt least 128 bits of entropy should be used when generating the key if use of Blowfish is required.\n</p>\n<p>\nIf the algorithm can be changed, the AES block cipher should be used instead.\n</p>\n\n<p><b>Vulnerable Code:</b><br/>\n<pre>KeyGenerator keyGen = KeyGenerator.getInstance(\"Blowfish\");\nkeyGen.init(64);</pre>\n</p>\n\n<p><b>Solution:</b><br/>\n<pre>KeyGenerator keyGen = KeyGenerator.getInstance(\"Blowfish\");\nkeyGen.init(128);</pre>\n</p>\n<br/>\n<p>\n<b>References</b><br/>\n<a href=\"http://en.wikipedia.org/wiki/Blowfish_(cipher)\">Blowfish (cipher)</a><br/>\n<a href=\"http://cwe.mitre.org/data/definitions/326.html\">CWE-326: Inadequate Encryption Strength</a>\n</p>\n\n    \n','2019-10-15 16:02:23'),(414,'RSA_KEY_SIZE',326,9,'\n      \n<p>\n    The NIST recommends the use of <u>2048 bits and higher</u> keys for the RSA algorithm.\n</p>\n<blockquote>\n    \"Digital Signature Verification | RSA: 1024 &le; len(n) &lt; 2048 | Legacy-use\"<br/>\n    \"Digital Signature Verification | RSA: len(n) &ge; 2048 | Acceptable\"<br/>\n    - <a href=\"http://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-131Ar1.pdf\">NIST: Recommendation for Transitioning the Use of Cryptographic Algorithms and Key Lengths p.7</a>\n</blockquote>\n\n<p><b>Vulnerable Code:</b><br/>\n<pre>\nKeyPairGenerator keyGen = KeyPairGenerator.getInstance(\"RSA\");\nkeyGen.initialize(512);\n</pre>\n</p>\n\n<p><b>Solution:</b><br/>\nThe KeyPairGenerator creation should be as follows with at least 2048 bit key size.<br/>\n<pre>\nKeyPairGenerator keyGen = KeyPairGenerator.getInstance(\"RSA\");\nkeyGen.initialize(2048);\n</pre>\n</p>\n<br/>\n<p>\n<b>References</b><br/>\n<a href=\"http://csrc.nist.gov/groups/ST/toolkit/key_management.html\">NIST: Latest publication on key management</a><br/>\n<a href=\"http://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-131Ar1.pdf\">NIST: Recommendation for Transitioning the Use of Cryptographic Algorithms and Key Lengths p.7</a><br/>\n<a href=\"http://www.emc.com/emc-plus/rsa-labs/standards-initiatives/how-large-a-key-should-be-used.htm\">RSA Laboratories: 3.1.5 How large a key should be used in the RSA cryptosystem?</a><br/>\n<a href=\"http://en.wikipedia.org/wiki/Key_size#Asymmetric%5Falgorithm%5Fkey%5Flengths\">Wikipedia: Asymmetric algorithm key lengths</a><br/>\n<a href=\"http://cwe.mitre.org/data/definitions/326.html\">CWE-326: Inadequate Encryption Strength</a><br/>\n<a href=\"http://www.keylength.com/en/compare/\">Keylength.com (BlueKrypt): Aggregate key length recommendations.</a>\n</p>\n\n    \n','2019-10-15 16:02:23'),(415,'NULL_CIPHER',327,9,'\n      \n<p>\nThe NullCipher is rarely used intentionally in production applications. It implements the Cipher interface by returning ciphertext\nidentical to the supplied plaintext. In a few contexts, such as testing, a NullCipher may be appropriate.\n</p>\n<p>\n    <b>Vulnerable Code:</b><br/>\n<pre>Cipher doNothingCihper = new NullCipher();\n[...]\n//The ciphertext produced will be identical to the plaintext.\nbyte[] cipherText = c.doFinal(plainText);</pre>\n</p>\n<p>\n    <b>Solution:</b><br/>\n    Avoid using the NullCipher. Its accidental use can introduce a significant confidentiality risk.\n</p>\n<br/>\n<p>\n<b>Reference</b><br/>\n<a href=\"http://cwe.mitre.org/data/definitions/327.html\">CWE-327: Use of a Broken or Risky Cryptographic Algorithm</a>\n</p>\n\n    \n','2019-10-15 16:02:23'),(416,'STATIC_IV',329,9,'\n      \n<p>\n    Initialization vector must be regenerated for each message to be encrypted.\n</p>\n<p><b>Vulnerable Code:</b></p>\n<p>\n<pre>\nprivate static byte[] IV = new byte[16] {(byte)0,(byte)1,(byte)2,[...]};\n\npublic void encrypt(String message) throws Exception {\n\n    IvParameterSpec ivSpec = new IvParameterSpec(IV);\n[...]\n</pre>\n<p><b>Solution:</b></p>\n<p>\n<pre>\npublic void encrypt(String message) throws Exception {\n\n    byte[] iv = new byte[16];\n    new SecureRandom().nextBytes(iv);\n\n    IvParameterSpec ivSpec = new IvParameterSpec(iv);\n[...]\n</pre>\n</p>\n<br/>\n<p>\n<b>References</b><br/>\n<a href=\"http://en.wikipedia.org/wiki/Initialization_vector\">Wikipedia: Initialization vector</a><br/>\n<a href=\"http://cwe.mitre.org/data/definitions/329.html\">CWE-329: Not Using a Random IV with CBC Mode</a><br/>\n<a href=\"https://defuse.ca/cbcmodeiv.htm\">Encryption - CBC Mode IV: Secret or Not?</a>\n</p>\n            \n    \n','2019-10-15 16:02:23'),(417,'UNENCRYPTED_SERVER_SOCKET',319,9,'\n      \n<p>\nThe communication channel used is not encrypted. The traffic could be read by an attacker intercepting the network traffic.\n</p>\n<p>\n<b>Vulnerable Code:</b><br/>\nPlain server socket (Cleartext communication):\n<pre>ServerSocket soc = new ServerSocket(1234);</pre>\n</p>\n<p>\n<b>Solution:</b><br/>\nSSL Server Socket (Secure communication):\n<pre>ServerSocket soc = SSLServerSocketFactory.getDefault().createServerSocket(1234);</pre>\n</p>\n<p>Beyond using an SSL server socket, you need to make sure your use of SSLServerSocketFactory does all the appropriate certificate validation checks to\nmake sure you are not subject to man-in-the-middle attacks. Please read the OWASP Transport Layer Protection Cheat Sheet for details on how\nto do this correctly.\n</p>\n<br/>\n<p>\n<b>References</b><br/>\n<a href=\"https://www.owasp.org/index.php/Top_10_2010-A9\">OWASP: Top 10 2010-A9-Insufficient Transport Layer Protection</a><br/>\n<a href=\"https://www.owasp.org/index.php/Top_10_2013-A6-Sensitive_Data_Exposure\">OWASP: Top 10 2013-A6-Sensitive Data Exposure</a><br/>\n<a href=\"https://www.owasp.org/index.php/Transport_Layer_Protection_Cheat_Sheet\">OWASP: Transport Layer Protection Cheat Sheet</a><br/>\n<a href=\"http://projects.webappsec.org/w/page/13246945/Insufficient%20Transport%20Layer%20Protection\">WASC-04: Insufficient Transport Layer Protection</a><br/>\n<a href=\"http://cwe.mitre.org/data/definitions/319.html\">CWE-319: Cleartext Transmission of Sensitive Information</a>\n</p>\n\n    \n','2019-10-15 16:02:23'),(418,'UNENCRYPTED_SOCKET',319,9,'\n      \n<p>\nThe communication channel used is not encrypted. The traffic could be read by an attacker intercepting the network traffic.\n</p>\n<p>\n<b>Vulnerable Code:</b><br/>\nPlain socket (Cleartext communication):\n<pre>Socket soc = new Socket(\"www.google.com\",80);</pre>\n</p>\n<p>\n<b>Solution:</b><br/>\nSSL Socket (Secure communication):\n<pre>Socket soc = SSLSocketFactory.getDefault().createSocket(\"www.google.com\", 443);</pre>\n</p>\n<p>Beyond using an SSL socket, you need to make sure your use of SSLSocketFactory does all the appropriate certificate validation checks to\nmake sure you are not subject to man-in-the-middle attacks. Please read the OWASP Transport Layer Protection Cheat Sheet for details on how\nto do this correctly.\n</p>\n<br/>\n<p>\n<b>References</b><br/>\n<a href=\"https://www.owasp.org/index.php/Top_10_2010-A9\">OWASP: Top 10 2010-A9-Insufficient Transport Layer Protection</a><br/>\n<a href=\"https://www.owasp.org/index.php/Top_10_2013-A6-Sensitive_Data_Exposure\">OWASP: Top 10 2013-A6-Sensitive Data Exposure</a><br/>\n<a href=\"https://www.owasp.org/index.php/Transport_Layer_Protection_Cheat_Sheet\">OWASP: Transport Layer Protection Cheat Sheet</a><br/>\n<a href=\"http://projects.webappsec.org/w/page/13246945/Insufficient%20Transport%20Layer%20Protection\">WASC-04: Insufficient Transport Layer Protection</a><br/>\n<a href=\"http://cwe.mitre.org/data/definitions/319.html\">CWE-319: Cleartext Transmission of Sensitive Information</a>\n</p>\n\n    \n','2019-10-15 16:02:23'),(419,'WEAK_MESSAGE_DIGEST_MD5',328,9,'\n      \n<p>The algorithms MD2, MD4 and MD5 are not a recommended MessageDigest. <b>PBKDF2</b> should be used to hash password for example.</p>\n\n<blockquote>\n    \"The security of the MD5 hash function is severely compromised. A collision attack exists that can find collisions\n    within seconds on a computer with a 2.6 GHz Pentium 4 processor (complexity of 2<sup>24.1</sup>).[1] Further, there is also a\n    chosen-prefix collision attack that can produce a collision for two inputs with specified prefixes within hours, using\n    off-the-shelf computing hardware (complexity 2<sup>39</sup>).[2]\"<br/>\n    - <a href=\"https://en.wikipedia.org/wiki/MD5#Security\">Wikipedia: MD5 - Security</a>\n</blockquote>\n\n<blockquote>\n    \"<b>SHA-224, SHA-256, SHA-384, SHA-512, SHA-512/224, and SHA-512/256</b>:<br/>\n    The use of these hash functions is acceptable for all hash function applications.\"<br/>\n    - <a href=\"http://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-131Ar1.pdf\">NIST: Transitions: Recommendation for Transitioning the Use of Cryptographic Algorithms and Key Lengths p.15</a>\n</blockquote>\n<blockquote>\n    \"The main idea of a PBKDF is to slow dictionary or brute force attacks on the passwords by increasing the time\n    needed to test each password. An attacker with a list of likely passwords can evaluate the PBKDF using the known\n    iteration counter and the salt. Since an attacker has to spend a significant amount of computing time for each try,\n    it becomes harder to apply the dictionary or brute force attacks.\"<br/>\n- <a href=\"http://csrc.nist.gov/publications/nistpubs/800-132/nist-sp800-132.pdf\">NIST: Recommendation for Password-Based Key Derivation  p.12</a>\n</blockquote>\n<br/>\n<p>\n    <b>Vulnerable Code:</b><br/>\n    <pre>MessageDigest md5Digest = MessageDigest.getInstance(\"MD5\");\n    md5Digest.update(password.getBytes());\n    byte[] hashValue = md5Digest.digest();</pre>\n    <br/>\n    <pre>byte[] hashValue = DigestUtils.getMd5Digest().digest(password.getBytes());</pre>\n</p>\n<br/>\n<p>\n    <b>Solution (Using bouncy castle):</b><br/>\n    <pre>public static byte[] getEncryptedPassword(String password, byte[] salt) throws NoSuchAlgorithmException, InvalidKeySpecException {\n    PKCS5S2ParametersGenerator gen = new PKCS5S2ParametersGenerator(new SHA256Digest());\n    gen.init(password.getBytes(\"UTF-8\"), salt.getBytes(), 4096);\n    return ((KeyParameter) gen.generateDerivedParameters(256)).getKey();\n}</pre>\n    <br/>\n    <b>Solution (Java 8 and later):</b><br/>\n    <pre>public static byte[] getEncryptedPassword(String password, byte[] salt) throws NoSuchAlgorithmException, InvalidKeySpecException {\n    KeySpec spec = new PBEKeySpec(password.toCharArray(), salt, 4096, 256 * 8);\n    SecretKeyFactory f = SecretKeyFactory.getInstance(\"PBKDF2WithHmacSHA256\");\n    return f.generateSecret(spec).getEncoded();\n}</pre>\n</p>\n<br/>\n<p>\n<b>References</b><br/>\n[1] <a href=\"http://www.win.tue.nl/hashclash/On%20Collisions%20for%20MD5%20-%20M.M.J.%20Stevens.pdf\">On Collisions for MD5</a>: Master Thesis by M.M.J. Stevens<br/>\n[2] <a href=\"http://homepages.cwi.nl/~stevens/papers/stJOC%20-%20Chosen-Prefix%20Collisions%20for%20MD5%20and%20Applications.pdf\">Chosen-prefix collisions for MD5 and applications</a>: Paper written by Marc Stevens<br/>\n<a href=\"https://en.wikipedia.org/wiki/MD5\">Wikipedia: MD5</a><br/>\n<a href=\"http://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-131Ar1.pdf\">NIST: Transitions: Recommendation for Transitioning the Use of Cryptographic Algorithms and Key Lengths</a><br/>\n<a href=\"http://csrc.nist.gov/publications/nistpubs/800-132/nist-sp800-132.pdf\">NIST: Recommendation for Password-Based Key Derivation</a><br/>\n<a href=\"https://stackoverflow.com/q/22580853/89769\">Stackoverflow: Reliable implementation of PBKDF2-HMAC-SHA256 for Java</a><br/>\n<a href=\"http://cwe.mitre.org/data/definitions/327.html\">CWE-327: Use of a Broken or Risky Cryptographic Algorithm</a>\n</p>\n\n    \n','2019-10-15 16:02:23'),(420,'WEAK_MESSAGE_DIGEST_SHA1',328,9,'\n      \n<p>The algorithms SHA-1 is not a recommended algorithm for hash password, for signature verification and other\nuses. <b>PBKDF2</b> should be used to hash password for example.</p>\n\n<blockquote>\n    \"<b>SHA-1 for digital signature generation:</b><br/>\n    SHA-1 may only be used for digital signature generation where specifically allowed by NIST protocol-specific guidance.\n    For all other applications, <u>SHA-1 shall not be used for digital signature generation</u>.<br/>\n    <b>SHA-1 for digital signature verification:</b><br/>\n    For digital signature verification, <u>SHA-1 is allowed for legacy-use</u>.<br/>\n    [...]<br/>\n    <b>SHA-224, SHA-256, SHA-384, SHA-512, SHA-512/224, and SHA-512/256</b>:<br/>\n    The use of these hash functions is acceptable for all hash function applications.\"<br/>\n    - <a href=\"http://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-131Ar1.pdf\">NIST: Transitions: Recommendation for Transitioning the Use of Cryptographic Algorithms and Key Lengths p.15</a>\n</blockquote>\n<blockquote>\n    \"The main idea of a PBKDF is to slow dictionary or brute force attacks on the passwords by increasing the time\n    needed to test each password. An attacker with a list of likely passwords can evaluate the PBKDF using the known\n    iteration counter and the salt. Since an attacker has to spend a significant amount of computing time for each try,\n    it becomes harder to apply the dictionary or brute force attacks.\"<br/>\n- <a href=\"http://csrc.nist.gov/publications/nistpubs/800-132/nist-sp800-132.pdf\">NIST: Recommendation for Password-Based Key Derivation  p.12</a>\n\n</blockquote>\n<br/>\n<p>\n    <b>Vulnerable Code:</b><br/>\n    <pre>MessageDigest sha1Digest = MessageDigest.getInstance(\"SHA1\");\n    sha1Digest.update(password.getBytes());\n    byte[] hashValue = sha1Digest.digest();</pre>\n    <br/>\n    <pre>byte[] hashValue = DigestUtils.getSha1Digest().digest(password.getBytes());</pre>\n</p>\n<br/>\n<p>\n    <b>Solution (Using bouncy castle):</b><br/>\n    <pre>public static byte[] getEncryptedPassword(String password, byte[] salt) throws NoSuchAlgorithmException, InvalidKeySpecException {\n    PKCS5S2ParametersGenerator gen = new PKCS5S2ParametersGenerator(new SHA256Digest());\n    gen.init(password.getBytes(\"UTF-8\"), salt.getBytes(), 4096);\n    return ((KeyParameter) gen.generateDerivedParameters(256)).getKey();\n}</pre>\n    <br/>\n    <b>Solution (Java 8 and later):</b><br/>\n    <pre>public static byte[] getEncryptedPassword(String password, byte[] salt) throws NoSuchAlgorithmException, InvalidKeySpecException {\n    KeySpec spec = new PBEKeySpec(password.toCharArray(), salt, 4096, 256 * 8);\n    SecretKeyFactory f = SecretKeyFactory.getInstance(\"PBKDF2WithHmacSHA256\");\n    return f.generateSecret(spec).getEncoded();\n}</pre>\n</p>\n<br/>\n<p>\n<b>References</b><br/>\n<a href=\"https://community.qualys.com/blogs/securitylabs/2014/09/09/sha1-deprecation-what-you-need-to-know\">Qualys blog: SHA1 Deprecation: What You Need to Know</a><br/>\n<a href=\"https://googleonlinesecurity.blogspot.ca/2014/09/gradually-sunsetting-sha-1.html\">Google Online Security Blog: Gradually sunsetting SHA-1</a><br/>\n<a href=\"http://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-131Ar1.pdf\">NIST: Transitions: Recommendation for Transitioning the Use of Cryptographic Algorithms and Key Lengths</a><br/>\n<a href=\"http://csrc.nist.gov/publications/nistpubs/800-132/nist-sp800-132.pdf\">NIST: Recommendation for Password-Based Key Derivation</a><br/>\n<a href=\"https://stackoverflow.com/q/22580853/89769\">Stackoverflow: Reliable implementation of PBKDF2-HMAC-SHA256 for Java</a><br/>\n<a href=\"http://cwe.mitre.org/data/definitions/327.html\">CWE-327: Use of a Broken or Risky Cryptographic Algorithm</a>\n</p>\n\n    \n','2019-10-15 16:02:23'),(421,'DEFAULT_HTTP_CLIENT',0,9,'\n      \n<p>\n    <b>Vulnerable Code:</b><br/>\n<pre>\n    HttpClient client = new DefaultHttpClient();\n</pre>\n</p>\n<p>\n<p><b>Solution:</b><br/>\n\nUpgrade your implementation to use one of the recommended constructs and configure https.protocols JVM option to include TLSv1.2:</p>\n\n<p>\n<ul>\n  <li>Use <a href=\"http://hc.apache.org/httpcomponents-client-ga/httpclient/apidocs/org/apache/http/impl/client/SystemDefaultHttpClient.html\">SystemDefaultHttpClient</a> instead</li>\n<p>\n    <b>Sample Code:</b><br/>\n<pre>\n    HttpClient client = new SystemDefaultHttpClient();\n</pre>\n</p>\n  <li>Create an HttpClient based on SSLSocketFactory - get an SSLScoketFactory instance with <a href=\"https://hc.apache.org/httpcomponents-client-ga/httpclient/apidocs/org/apache/http/conn/ssl/SSLSocketFactory.html#getSystemSocketFactory()\">getSystemSocketFactory()</a> and use this instance for HttpClient creation</li>\n  <li>Create an HttpClient based on SSLConnectionSocketFactory - get an instance with <a href=\"https://hc.apache.org/httpcomponents-client-ga/httpclient/apidocs/org/apache/http/conn/ssl/SSLConnectionSocketFactory.html#getSystemSocketFactory()\">getSystemSocketFactory()</a> and use this instance for HttpClient creation</li>\n  <li>Use HttpClientBuilder - call <a href=\"http://hc.apache.org/httpcomponents-client-ga/httpclient/apidocs/org/apache/http/impl/client/HttpClientBuilder.html#useSystemProperties()\">useSystemProperties()</a> before calling build()</li>\n<p>\n    <b>Sample Code:</b><br/>\n<pre>\n    HttpClient client = HttpClientBuilder.create().useSystemProperties().build();\n</pre>\n</p>\n  <li>HttpClients - call <a href=\"https://hc.apache.org/httpcomponents-client-ga/httpclient/apidocs/org/apache/http/impl/client/HttpClients.html#createSystem()\">createSystem()</a> to create an instance</li>\n<p>\n    <b>Sample Code:</b><br/>\n<pre>\n    HttpClient client = HttpClients.createSystem();\n</pre>\n</p>\n</ul>\n</p>\n<br/>\n\n<p>\n<b>References</b><br/>\n<a href=\"https://blogs.oracle.com/java-platform-group/entry/diagnosing_tls_ssl_and_https\">Diagnosing TLS, SSL, and HTTPS</a>\n</p>\n\n    \n','2019-10-15 16:02:23'),(422,'SSL_CONTEXT',0,9,'\n      \n<p>\n    <b>Vulnerable Code:</b><br/>\n<pre>\n    SSLContext.getInstance(\"SSL\");\n</pre>\n</p>\n<p>\n<p><b>Solution:</b><br/>\n\nUpgrade your implementation to the following, and configure https.protocols JVM option to include TLSv1.2:</p>\n<pre>\n    SSLContext.getInstance(\"TLS\");\n</pre>\n<p>\n</p>\n<br/>\n<p>\n<b>References</b><br/>\n<a href=\"https://blogs.oracle.com/java-platform-group/entry/diagnosing_tls_ssl_and_https\">Diagnosing TLS, SSL, and HTTPS</a>\n</p>\n\n    \n','2019-10-15 16:02:23'),(423,'WEAK_TRUST_MANAGER',295,9,'\n      \n<p>Empty TrustManager implementations are often used to connect easily to a host that is not signed by a root\n<a href=\"http://en.wikipedia.org/wiki/Certificate_authority\">certificate authority</a>. As a consequence, this is vulnerable to\n<a href=\"http://en.wikipedia.org/wiki/Man-in-the-middle_attack\">Man-in-the-middle attacks</a>\nsince the client will trust any certificate.\n</p>\n<p>\nA TrustManager allowing specific certificates (based on a truststore for example) should be built.\nDetailed information for a proper implementation is available at:\n<a href=\"http://stackoverflow.com/a/6378872/89769\">[1]</a>\n<a href=\"http://stackoverflow.com/a/5493452/89769\">[2]</a>\n</p>\n<br/>\n<p>\n    <b>Vulnerable Code:</b><br/>\n<pre>class TrustAllManager implements X509TrustManager {\n\n    @Override\n    public void checkClientTrusted(X509Certificate[] x509Certificates, String s) throws CertificateException {\n        //Trust any client connecting (no certificate validation)\n    }\n\n    @Override\n    public void checkServerTrusted(X509Certificate[] x509Certificates, String s) throws CertificateException {\n        //Trust any remote server (no certificate validation)\n    }\n\n    @Override\n    public X509Certificate[] getAcceptedIssuers() {\n        return null;\n    }\n}</pre>\n</p>\n<br/>\n<p>\n    <b>Solution (TrustMangager based on a keystore):</b><br/>\n<pre>KeyStore ks = //Load keystore containing the certificates trusted\n\nSSLContext sc = SSLContext.getInstance(\"TLS\");\n\nTrustManagerFactory tmf = TrustManagerFactory.getInstance(\"SunX509\");\ntmf.init(ks);\n\nsc.init(kmf.getKeyManagers(), tmf.getTrustManagers(),null);\n</pre>\n</p>\n<br/>\n<p>\n<b>References</b><br/>\n<a href=\"http://projects.webappsec.org/w/page/13246945/Insufficient%20Transport%20Layer%20Protection\">WASC-04: Insufficient Transport Layer Protection</a><br/>\n<a href=\"http://cwe.mitre.org/data/definitions/295.html\">CWE-295: Improper Certificate Validation</a>\n</p>\n\n    \n','2019-10-15 16:02:23'),(424,'WEAK_HOSTNAME_VERIFIER',295,9,'\n      \n<p>A <code>HostnameVerifier</code> that accept any host are often use because of certificate reuse on many hosts.\nAs a consequence, this is vulnerable to\n<a href=\"http://en.wikipedia.org/wiki/Man-in-the-middle_attack\">Man-in-the-middle attacks</a>\nsince the client will trust any certificate.\n</p>\n<p>\nA TrustManager allowing specific certificates (based on a truststore for example) should be built.\nWildcard certificates should be created for reused on multiples subdomains.\nDetailed information for a proper implementation is available at:\n<a href=\"http://stackoverflow.com/a/6378872/89769\">[1]</a>\n<a href=\"http://stackoverflow.com/a/5493452/89769\">[2]</a>\n</p>\n<br/>\n<p>\n    <b>Vulnerable Code:</b><br/>\n<pre>public class AllHosts implements HostnameVerifier {\n    public boolean verify(final String hostname, final SSLSession session) {\n        return true;\n    }\n}</pre>\n</p>\n<br/>\n<p>\n    <b>Solution (TrustMangager based on a keystore):</b><br/>\n<pre>KeyStore ks = //Load keystore containing the certificates trusted\n\nSSLContext sc = SSLContext.getInstance(\"TLS\");\n\nTrustManagerFactory tmf = TrustManagerFactory.getInstance(\"SunX509\");\ntmf.init(ks);\n\nsc.init(kmf.getKeyManagers(), tmf.getTrustManagers(),null);\n</pre>\n</p>\n<br/>\n<p>\n<b>References</b><br/>\n<a href=\"http://projects.webappsec.org/w/page/13246945/Insufficient%20Transport%20Layer%20Protection\">WASC-04: Insufficient Transport Layer Protection</a><br/>\n<a href=\"http://cwe.mitre.org/data/definitions/295.html\">CWE-295: Improper Certificate Validation</a>\n</p>\n\n    \n','2019-10-15 16:02:23'),(425,'FILE_UPLOAD_FILENAME',0,9,'\n      \n<p>The filename provided by the FileUpload API can be tampered with by the client to reference unauthorized files.</p>\n<p>For example:</p>\n<ul>\n<li><code>\"../../../config/overide_file\"</code></li>\n<li><code>\"shell.jsp\\u0000expected.gif\"</code></li>\n</ul>\n<p>Therefore, such values should not be passed directly to the filesystem API. If acceptable, the application should generate its\nown file names and use those. Otherwise, the provided filename should be properly validated to ensure it\'s properly structured,\ncontains no unauthorized path characters (e.g., / \\), and refers to an authorized file.</p>\n<br/>\n<p>\n<b>References</b><br/>\n<a href=\"http://blogs.securiteam.com/index.php/archives/1268\">Securiteam: File upload security recommendations</a><br/>\n<a href=\"http://cwe.mitre.org/data/definitions/22.html\">CWE-22: Improper Limitation of a Pathname to a Restricted Directory (\'Path Traversal\')</a><br/>\n<a href=\"http://projects.webappsec.org/w/page/13246952/Path%20Traversal\">WASC-33: Path Traversal</a><br/>\n<a href=\"https://www.owasp.org/index.php/Path_Traversal\">OWASP: Path Traversal</a><br/>\n<a href=\"http://capec.mitre.org/data/definitions/126.html\">CAPEC-126: Path Traversal</a><br/>\n<a href=\"http://cwe.mitre.org/data/definitions/22.html\">CWE-22: Improper Limitation of a Pathname to a Restricted Directory (\'Path Traversal\')</a>\n</p>\n\n    \n','2019-10-15 16:02:23'),(426,'PATH_TRAVERSAL_IN',22,9,'\n      \n<p>A file is opened to read its content. The filename comes from an <b>input</b> parameter.\nIf an unfiltered parameter is passed to this file API, files from an arbitrary filesystem location could be read.</p>\n<p>This rule identifies <b>potential</b> path traversal vulnerabilities. In many cases, the constructed file path cannot be controlled\nby the user. If that is the case, the reported instance is a false positive.</p>\n<br/>\n\n<p>\n    <b>Vulnerable Code:</b><br/>\n<pre>@GET\n@Path(\"/images/{image}\")\n@Produces(\"images/*\")\npublic Response getImage(@javax.ws.rs.PathParam(\"image\") String image) {\n    File file = new File(\"resources/images/\", image); //Weak point\n\n    if (!file.exists()) {\n        return Response.status(Status.NOT_FOUND).build();\n    }\n\n    return Response.ok().entity(new FileInputStream(file)).build();\n}</pre>\n</p>\n<br/>\n\n<p>\n    <b>Solution:</b><br/>\n<pre>import org.apache.commons.io.FilenameUtils;\n\n@GET\n@Path(\"/images/{image}\")\n@Produces(\"images/*\")\npublic Response getImage(@javax.ws.rs.PathParam(\"image\") String image) {\n    File file = new File(\"resources/images/\", FilenameUtils.getName(image)); //Fix\n\n    if (!file.exists()) {\n        return Response.status(Status.NOT_FOUND).build();\n    }\n\n    return Response.ok().entity(new FileInputStream(file)).build();\n}</pre>\n</p>\n<br/>\n<p>\n<b>References</b><br/>\n<a href=\"http://projects.webappsec.org/w/page/13246952/Path%20Traversal\">WASC: Path Traversal</a><br/>\n<a href=\"https://www.owasp.org/index.php/Path_Traversal\">OWASP: Path Traversal</a><br/>\n<a href=\"http://capec.mitre.org/data/definitions/126.html\">CAPEC-126: Path Traversal</a><br/>\n<a href=\"http://cwe.mitre.org/data/definitions/22.html\">CWE-22: Improper Limitation of a Pathname to a Restricted Directory (\'Path Traversal\')</a>\n</p>\n\n    \n','2019-10-15 16:02:23'),(427,'PATH_TRAVERSAL_OUT',22,9,'\n      \n<p>A file is opened to write to its contents. The filename comes from an <b>input</b> parameter.\nIf an unfiltered parameter is passed to this file API, files at an arbitrary filesystem location could be modified.</p>\n<p>This rule identifies <b>potential</b> path traversal vulnerabilities. In many cases, the constructed file path cannot be controlled\nby the user. If that is the case, the reported instance is a false positive.</p>\n<br/>\n<p>\n<b>References</b><br/>\n<a href=\"http://projects.webappsec.org/w/page/13246952/Path%20Traversal\">WASC-33: Path Traversal</a><br/>\n<a href=\"https://www.owasp.org/index.php/Path_Traversal\">OWASP: Path Traversal</a><br/>\n<a href=\"http://capec.mitre.org/data/definitions/126.html\">CAPEC-126: Path Traversal</a><br/>\n<a href=\"http://cwe.mitre.org/data/definitions/22.html\">CWE-22: Improper Limitation of a Pathname to a Restricted Directory (\'Path Traversal\')</a>\n</p>\n\n    \n','2019-10-15 16:02:23'),(428,'SCALA_PATH_TRAVERSAL_IN',22,9,'\n      \n<p>A file is opened to read its content. The filename comes from an <b>input</b> parameter.\nIf an unfiltered parameter is passed to this file API, files from an arbitrary filesystem location could be read.</p>\n<p>This rule identifies <b>potential</b> path traversal vulnerabilities. In many cases, the constructed file path cannot be controlled\nby the user. If that is the case, the reported instance is a false positive.</p>\n<br/>\n\n<p>\n    <b>Vulnerable Code:</b><br/>\n<pre>def getWordList(value:String) = Action {\n  if (!Files.exists(Paths.get(\"public/lists/\" + value))) {\n    NotFound(\"File not found\")\n  } else {\n    val result = Source.fromFile(\"public/lists/\" + value).getLines().mkString // Weak point\n    Ok(result)\n  }\n}</pre>\n</p>\n<br/>\n\n<p>\n    <b>Solution:</b><br/>\n<pre>import org.apache.commons.io.FilenameUtils;\n\ndef getWordList(value:String) = Action {\n  val filename = \"public/lists/\" + FilenameUtils.getName(value)\n\n  if (!Files.exists(Paths.get(filename))) {\n    NotFound(\"File not found\")\n  } else {\n    val result = Source.fromFile(filename).getLines().mkString // Fix\n    Ok(result)\n  }\n}</pre>\n</p>\n<br/>\n<p>\n<b>References</b><br/>\n<a href=\"http://projects.webappsec.org/w/page/13246952/Path%20Traversal\">WASC: Path Traversal</a><br/>\n<a href=\"https://www.owasp.org/index.php/Path_Traversal\">OWASP: Path Traversal</a><br/>\n<a href=\"http://capec.mitre.org/data/definitions/126.html\">CAPEC-126: Path Traversal</a><br/>\n<a href=\"http://cwe.mitre.org/data/definitions/22.html\">CWE-22: Improper Limitation of a Pathname to a Restricted Directory (\'Path Traversal\')</a>\n</p>\n\n    \n','2019-10-15 16:02:23'),(429,'JSP_INCLUDE',98,9,'\n      \n<p>The inclusion of JSP file allow the entry of dynamic value. It may allow an attacker to control the JSP page included.\nIf this is the case, an attacker will try to include a file on disk that he controls. By including arbitrary files, the\nattacker gets the ability to execute any code.\n</p>\n<p>\n    <b>Vulnerable Code:</b>\n    <pre>&lt;jsp:include page=\"${param.secret_param}\" /&gt;</pre>\n</p>\n<p>\n    <b>Solution:</b>\n    <pre>&lt;c:if test=\"${param.secret_param == \'page1\'}\"&gt;\n    &lt;jsp:include page=\"page1.jsp\" /&gt;\n&lt;/c:if&gt;</pre>\n</p>\n<br/>\n<p>\n<b>References</b><br/>\n<a href=\"http://resources.infosecinstitute.com/file-inclusion-attacks/\">InfosecInstitute: File Inclusion Attacks</a><br/>\n<a href=\"http://projects.webappsec.org/w/page/13246955/Remote%20File%20Inclusion\">WASC-05: Remote File Inclusion</a><br/>\n</p>\n            \n    \n','2019-10-15 16:02:23'),(430,'JSP_SPRING_EVAL',917,9,'\n      \n<p>A Spring expression is built with a dynamic value. The source of the value(s) should be verified to avoid that unfiltered values fall into this risky code evaluation.\n</p>\n<p>\n    <b>Vulnerable Code:</b>\n    <pre>&lt;%@ taglib prefix=\"spring\" uri=\"http://www.springframework.org/tags\" %&gt;\n\n&lt;spring:eval expression=\"${param.lang}\" var=\"lang\" /&gt;</pre>\n    <br>\n    <pre>&lt;%@ taglib prefix=\"spring\" uri=\"http://www.springframework.org/tags\" %&gt;\n\n&lt;spring:eval expression=\"\'${param.lang}\'==\'fr\'\" var=\"languageIsFrench\" /&gt;</pre>\n</p>\n<p>\n    <b>Solution:</b>\n    <pre>&lt;c:set var=\"lang\" value=\"${param.lang}\"/&gt;</pre>\n    <br/>\n    <pre>&lt;c:set var=\"languageIsFrench\" value=\"${param.lang == \'fr\'}\"/&gt;</pre>\n</p>\n<br/>\n<p>\n<b>References</b><br/>\n    <a href=\"http://cwe.mitre.org/data/definitions/94.html\">CWE-94: Improper Control of Generation of Code (\'Code Injection\')</a><br/>\n    <a href=\"http://cwe.mitre.org/data/definitions/95.html\">CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code (\'Eval Injection\')</a><br/>\n</p>\n            \n    \n','2019-10-15 16:02:23'),(431,'JSP_JSTL_OUT',79,9,'\n      \n<p>A potential XSS was found. It could be used to execute unwanted JavaScript in a client\'s browser. (See references)\n</p>\n<p>\n    <b>Vulnerable Code:</b>\n    <pre>&lt;%@ taglib prefix=\"c\" uri=\"http://java.sun.com/jsp/jstl/core\" %&gt;\n\n&lt;c:out value=\"${param.test_param}\" escapeXml=\"false\"/&gt;</pre>\n</p>\n<p>\n    <b>Solution:</b>\n    <pre>&lt;%@ taglib prefix=\"c\" uri=\"http://java.sun.com/jsp/jstl/core\" %&gt;\n\n&lt;c:out value=\"${param.test_param}\"/&gt;</pre>\n</p>\n<br/>\n<p>\n<b>References</b><br/>\n<a href=\"http://projects.webappsec.org/w/page/13246920/Cross%20Site%20Scripting\">WASC-8: Cross Site Scripting</a><br/>\n<a href=\"https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet\">OWASP: XSS Prevention Cheat Sheet</a><br/>\n<a href=\"https://www.owasp.org/index.php/Top_10_2013-A3-Cross-Site_Scripting_%28XSS%29\">OWASP: Top 10 2013-A3: Cross-Site Scripting (XSS)</a><br/>\n<a href=\"http://cwe.mitre.org/data/definitions/79.html\">CWE-79: Improper Neutralization of Input During Web Page Generation (\'Cross-site Scripting\')</a><br/>\n<a href=\"http://docs.oracle.com/javaee/5/jstl/1.1/docs/tlddocs/c/out.html\">JSTL Javadoc: Out tag</a><br/>\n</p>\n            \n    \n','2019-10-15 16:02:23'),(432,'JSP_XSLT',94,9,'\n      \n<p>\n    \"XSLT (Extensible Stylesheet Language Transformations) is a language for transforming XML documents into other XML documents\".<sup>[1]</sup><br/>\n    It is possible to attach malicious behavior to those stylesheets. Therefore, if an attacker can control the content or the source of the\n    stylesheet, he might be able to trigger remote code execution.<sup>[2]</sup>\n</p>\n<p>\n<b>Code at risk:</b><br/>\n<pre>\n&#x3C;x:transform xml=&#x22;${xmlData}&#x22; xslt=&#x22;${xsltControlledByUser}&#x22; /&#x3E;\n</pre>\n</p>\n<p>\n<b>Solution:</b><br/>\n<p>\nThe solution would be to make sure the stylesheet is loaded from a safe sources and make sure that vulnerabilities such as\nPath traversal <sup>[3][4]</sup> are not possible.\n</p>\n<p>\n<b>References</b><br/>\n[1] <a href=\"https://en.wikipedia.org/wiki/XSLT\">Wikipedia: XSLT (Extensible Stylesheet Language Transformations)</a><br/>\n<a href=\"https://prezi.com/y_fuybfudgnd/offensive-xslt/\">Offensive XSLT</a> by Nicolas Gregoire<br/>\n[2] <a href=\"http://www.agarri.fr/kom/archives/2012/07/02/from_xslt_code_execution_to_meterpreter_shells/index.html\">From XSLT code execution to Meterpreter shells</a> by Nicolas Gregoire<br/>\n<a href=\"http://xhe.myxwiki.org/xwiki/bin/view/Main/\">XSLT Hacking Encyclopedia</a> by Nicolas Gregoire<br/>\n<a href=\"http://www.acunetix.com/blog/articles/the-hidden-dangers-of-xsltprocessor-remote-xsl-injection/\">Acunetix.com : The hidden dangers of XSLTProcessor - Remote XSL injection</a><br/>\n<a href=\"https://www.w3.org/TR/xslt\">w3.org XSL Transformations (XSLT) Version 1.0</a> : w3c specification<br/>\n[3] <a href=\"http://projects.webappsec.org/w/page/13246952/Path%20Traversal\">WASC: Path Traversal</a><br/>\n[4] <a href=\"https://www.owasp.org/index.php/Path_Traversal\">OWASP: Path Traversal</a><br/>\n</p>\n            \n    \n','2019-10-15 16:02:23'),(433,'LDAP_ANONYMOUS',0,9,'\n            \n<p>\nWithout proper access control, executing an LDAP statement that contains a user-controlled value can allow an attacker to abuse poorly configured LDAP environment. All LDAP queries executed against ctx will be performed without authentication and access control. An attacker may be able to manipulate one of these queries in an unexpected way to gain access to records that would otherwise be protected by the directory\'s access control mechanism.\n</p>\n<p>\n    <b>Vulnerable Code:</b>\n<pre>...\nenv.put(Context.SECURITY_AUTHENTICATION, \"none\");\nDirContext ctx = new InitialDirContext(env);\n...</pre>\n</p>\n<p>\n    <b>Solution:</b>\n<br/>\nConsider other modes of authentication to LDAP and ensure proper access control mechanism.\n\n</p>\n<br/>\n<p>\n<b>References</b><br/>\n<a href=\"https://docs.oracle.com/javase/tutorial/jndi/ldap/auth_mechs.html\">Ldap Authentication Mechanisms</a><br/>\n</p>\n            \n        \n','2019-10-15 16:02:23'),(434,'LDAP_ENTRY_POISONING',90,9,'\n            \n<p>\nJNDI API support the binding of serialize object in LDAP directories. If certain attributes are presented, the deserialization\nof object will be made in the application querying the directory (See Black Hat USA 2016 white paper for details).\nObject deserialization should be threated as risky operation that can lead to remote code execution.\n</p>\n<p>\nThe exploitation of the vulnerability will be possible if the attacker has an entry point in an LDAP base query, by adding\nattributes to an existing LDAP entry or by configuring the application to use a malicious LDAP server.\n</p>\n<p>\n    <b>Vulnerable Code:</b>\n<pre>\nDirContext ctx = new InitialDirContext();\n//[...]\n\nctx.search(query, filter,\n        new SearchControls(scope, countLimit, timeLimit, attributes,\n            true, //Enable object deserialization if bound in directory\n            deref));\n</pre>\n</p>\n<p>\n    <b>Solution:</b>\n<pre>\nDirContext ctx = new InitialDirContext();\n//[...]\n\nctx.search(query, filter,\n        new SearchControls(scope, countLimit, timeLimit, attributes,\n            false, //Disable\n            deref));\n</pre>\n</p>\n<br/>\n<p>\n<b>References</b><br/>\n<a href=\"https://www.blackhat.com/docs/us-16/materials/us-16-Munoz-A-Journey-From-JNDI-LDAP-Manipulation-To-RCE-wp.pdf\">Black Hat USA 2016: A Journey From JNDI/LDAP Manipulation to Remote Code Execution Dream Land</a>\n(<a href=\"https://www.blackhat.com/docs/us-16/materials/us-16-Munoz-A-Journey-From-JNDI-LDAP-Manipulation-To-RCE.pdf\">slides</a> &amp; <a href=\"https://www.youtube.com/watch?v=Y8a5nB-vy78\">video</a>) by Alvaro Mu&#xF1;oz and Oleksandr Mirosh<br/>\n<a href=\"https://community.hpe.com/t5/Security-Research/Introducing-JNDI-Injection-and-LDAP-Entry-Poisoning/ba-p/6885118\">HP Enterprise: Introducing JNDI Injection and LDAP Entry Poisoning</a> by Alvaro Mu&#xF1;oz<br/>\n<a href=\"http://blog.trendmicro.com/trendlabs-security-intelligence/new-headaches-how-the-pawn-storm-zero-day-evaded-javas-click-to-play-protection/\">TrendMicro: How The Pawn Storm Zero-Day Evaded Java\'s Click-to-Play Protection</a> by Jack Tang\n</p>\n            \n        \n','2019-10-15 16:02:23'),(435,'HARD_CODE_PASSWORD',259,9,'\n            \n<p>\nPasswords should not be kept in the source code. The source code can be widely shared in an enterprise environment, and is\ncertainly shared in open source. To be managed safely, passwords and secret keys should be stored in separate configuration files or keystores.\n(Hard coded keys are reported separately by <i>Hard Coded Key</i> pattern)\n</p>\n<p>\n<p><b>Vulnerable Code:</b><br/>\n\n<pre>private String SECRET_PASSWORD = \"letMeIn!\";\n\nProperties props = new Properties();\nprops.put(Context.SECURITY_CREDENTIALS, \"p@ssw0rd\");</pre>\n</p>\n<br/>\n<p>\n<b>References</b><br/>\n<a href=\"http://cwe.mitre.org/data/definitions/259.html\">CWE-259: Use of Hard-coded Password</a>\n</p>\n\n        \n','2019-10-15 16:02:23'),(436,'HARD_CODE_KEY',321,9,'\n            \n<p>\nCryptographic keys should not be kept in the source code. The source code can be widely shared in an enterprise environment, and is\ncertainly shared in open source. To be managed safely, passwords and secret keys should be stored in separate configuration files or keystores.\n(Hard coded passwords are reported separately by <i>Hard Coded Password</i> pattern)\n</p>\n<p>\n<p><b>Vulnerable Code:</b><br/>\n\n<pre>byte[] key = {1, 2, 3, 4, 5, 6, 7, 8};\nSecretKeySpec spec = new SecretKeySpec(key, \"AES\");\nCipher aes = Cipher.getInstance(\"AES\");\naes.init(Cipher.ENCRYPT_MODE, spec);\nreturn aesCipher.doFinal(secretData);</pre>\n</p>\n<br/>\n<p>\n<b>References</b><br/>\n<a href=\"http://cwe.mitre.org/data/definitions/321.html\">CWE-321: Use of Hard-coded Cryptographic Key</a><br/>\n</p>\n\n        \n','2019-10-15 16:02:23'),(437,'UNSAFE_HASH_EQUALS',203,9,'\n            \n<p>\nAn attacker might be able to detect the value of the secret hash due to the exposure of comparison timing. When the\nfunctions <code>Arrays.equals()</code> or <code>String.equals()</code> are called, they will exited earlier if less\nbytes are matched.\n</p>\n<p>\n<p><b>Vulnerable Code:</b><br/>\n\n<pre>\nString actualHash = ...\n\nif(userInput.equals(actualHash)) {\n    ...\n}</pre>\n</p>\n<p><b>Solution:</b><br/>\n\n<pre>\nString actualHash = ...\n\nif(MessageDigest.isEqual(userInput.getBytes(),actualHash.getBytes())) {\n    ...\n}</pre>\n</p>\n<br/>\n<p>\n<b>References</b><br/>\n<a href=\"https://cwe.mitre.org/data/definitions/203.html\">CWE-203: Information Exposure Through DiscrepancyKey</a><br/>\n</p>\n\n        \n','2019-10-15 16:02:23'),(438,'XPATH_INJECTION',643,9,'\n      \n<p>\nXPath injection risks are similar to SQL injection. If the XPath query contains untrusted user input, the complete datasource\ncould be exposed. This could allow an attacker to access unauthorized data or maliciously modify the target XML.\n</p>\n<br/>\n<p>\n<b>References</b><br/>\n<a href=\"http://projects.webappsec.org/w/page/13246963/SQL%20Injection\">WASC-39: XPath Injection</a><br/>\n<a href=\"https://www.owasp.org/index.php/Top_10_2013-A1-Injection\">OWASP: Top 10 2013-A1-Injection</a><br/>\n<a href=\"http://cwe.mitre.org/data/definitions/643.html\">CWE-643: Improper Neutralization of Data within XPath Expressions (\'XPath Injection\')</a><br/>\n<a href=\"https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=61407250\">CERT: IDS09-J. Prevent XPath Injection (archive)</a><br/>\n<a href=\"http://media.blackhat.com/bh-eu-12/Siddharth/bh-eu-12-Siddharth-Xpath-WP.pdf\">Black Hat Europe 2012: Hacking XPath 2.0</a><br/>\n<a href=\"http://www.balisage.net/Proceedings/vol7/html/Vlist02/BalisageVol7-Vlist02.html\">Balisage: XQuery Injection</a>\n</p>\n\n    \n','2019-10-15 16:02:24'),(439,'RPC_ENABLED_EXTENSIONS',0,9,'\n      \n<p>\nEnabling extensions in Apache XML RPC server or client may lead to vurnelability of server for remote code execution or other types of exploits:\n<ul>\n<li><a href=\"https://0ang3el.blogspot.com/2016/07/beware-of-ws-xmlrpc-library-in-your.html\">https://0ang3el.blogspot.com/2016/07/beware-of-ws-xmlrpc-library-in-your.html</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2016-5003\">https://nvd.nist.gov/vuln/detail/CVE-2016-5003</a></li>\n</ul>\n<br/>It\'s recommended not to use <b>setEnabledForExtensions</b> method of <b>org.apache.xmlrpc.client.XmlRpcClientConfigImpl</b> or <b>org.apache.xmlrpc.server.XmlRpcServerConfigImpl</b> at all, because extensions are disabled by defalut.\n</p>\n            \n    \n','2019-10-15 16:02:24'),(440,'MALICIOUS_XSLT',94,9,'\n      \n<p>\n    \"XSLT (Extensible Stylesheet Language Transformations) is a language for transforming XML documents into other XML documents\".<sup>[1]</sup><br/>\n    It is possible to attach malicious behavior to those stylesheets. Therefore, if an attacker can control the content or the source of the\n    stylesheet, he might be able to trigger remote code execution.<sup>[2]</sup>\n</p>\n<p>\n<b>Code at risk:</b><br/>\n<pre>\nSource xslt = new StreamSource(new FileInputStream(inputUserFile)); //Dangerous source\n\nTransformer transformer = TransformerFactory.newInstance().newTransformer(xslt);\n\nSource text = new StreamSource(new FileInputStream(\"/data_2_process.xml\"));\ntransformer.transform(text, new StreamResult(...));\n</pre>\n</p>\n<p>\n<b>Solution:</b><br/>\n\n<p>The solution is to enable the secure processing mode which will block potential reference to Java classes such as <code>java.lang.Runtime</code>.</p>\n\n<pre>\nTransformerFactory factory = TransformerFactory.newInstance();\nfactory.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING, true);\nSource xslt  = new StreamSource(new FileInputStream(inputUserFile));\n\nTransformer transformer = factory.newTransformer(xslt);\n</pre>\n\n<p>\nAlternatively, make sure the stylesheet is loaded from a safe sources and make sure that vulnerabilities such as\nPath traversal <sup>[3][4]</sup> are not possible.\n</p>\n<p>\n<b>References</b><br/>\n[1] <a href=\"https://en.wikipedia.org/wiki/XSLT\">Wikipedia: XSLT (Extensible Stylesheet Language Transformations)</a><br/>\n<a href=\"https://prezi.com/y_fuybfudgnd/offensive-xslt/\">Offensive XSLT</a> by Nicolas Gregoire<br/>\n[2] <a href=\"http://www.agarri.fr/kom/archives/2012/07/02/from_xslt_code_execution_to_meterpreter_shells/index.html\">From XSLT code execution to Meterpreter shells</a> by Nicolas Gregoire<br/>\n<a href=\"http://xhe.myxwiki.org/xwiki/bin/view/Main/\">XSLT Hacking Encyclopedia</a> by Nicolas Gregoire<br/>\n<a href=\"http://www.acunetix.com/blog/articles/the-hidden-dangers-of-xsltprocessor-remote-xsl-injection/\">Acunetix.com : The hidden dangers of XSLTProcessor - Remote XSL injection</a><br/>\n<a href=\"https://www.w3.org/TR/xslt\">w3.org XSL Transformations (XSLT) Version 1.0</a> : w3c specification<br/>\n[3] <a href=\"http://projects.webappsec.org/w/page/13246952/Path%20Traversal\">WASC: Path Traversal</a><br/>\n[4] <a href=\"https://www.owasp.org/index.php/Path_Traversal\">OWASP: Path Traversal</a><br/>\n</p>\n            \n    \n','2019-10-15 16:02:24'),(441,'XXE_DTD_TRANSFORM_FACTORY',611,9,'\n      \n<!--XXE_GENERIC_START-->\n<h3>Attack</h3>\n<p>XML External Entity (XXE) attacks can occur when an XML parser supports XML entities while processing XML received\nfrom an untrusted source.</p>\n<p><b>Risk 1: Expose local file content (XXE: <u>X</u>ML e<u>X</u>ternal <u>E</u>ntity)</b></p>\n<p>\n<pre>\n&lt;?xml version=&quot;1.0&quot; encoding=&quot;ISO-8859-1&quot;?&gt;\n&lt;!DOCTYPE foo [\n   &lt;!ENTITY xxe SYSTEM &quot;file:///etc/passwd&quot; &gt; ]&gt;\n&lt;foo&gt;&amp;xxe;&lt;/foo&gt;</pre>\n</p>\n<b>Risk 2: Denial of service (XEE: <u>X</u>ml <u>E</u>ntity <u>E</u>xpansion)</b>\n<p>\n<pre>\n&lt;?xml version=&quot;1.0&quot;?&gt;\n&lt;!DOCTYPE lolz [\n &lt;!ENTITY lol &quot;lol&quot;&gt;\n &lt;!ELEMENT lolz (#PCDATA)&gt;\n &lt;!ENTITY lol1 &quot;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&quot;&gt;\n &lt;!ENTITY lol2 &quot;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&quot;&gt;\n &lt;!ENTITY lol3 &quot;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&quot;&gt;\n[...]\n &lt;!ENTITY lol9 &quot;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&quot;&gt;\n]&gt;\n&lt;lolz&gt;&amp;lol9;&lt;/lolz&gt;</pre>\n</p>\n\n<h3>Solution</h3>\n<p>\nIn order to avoid exposing dangerous feature of the XML parser, you can do the following change to the code.\n</p>\n<!--XXE_GENERIC_END-->\n\n<p><b>Vulnerable Code:</b></p>\n<p>\n<pre>\nTransformer transformer = TransformerFactory.newInstance().newTransformer();\ntransformer.transform(input, result);</pre>\n</p>\n<br/>\n<p>\nThe following snippets show two available solutions. You can set one feature or both.\n</p>\n\n<p><b>Solution using \"Secure processing\" mode:</b></p>\n<p>\nThis setting will protect you against remote file access but not denial of service.\n<pre>\nTransformerFactory factory = TransformerFactory.newInstance();\nfactory.setAttribute(XMLConstants.ACCESS_EXTERNAL_DTD, \"all\");\nfactory.setAttribute(XMLConstants.ACCESS_EXTERNAL_STYLESHEET, \"all\");\n\nTransformer transformer = factory.newTransformer();\ntransformer.setOutputProperty(OutputKeys.INDENT, \"yes\");\n\ntransformer.transform(input, result);</pre>\n</p>\n\n<p><b>Solution disabling DTD:</b></p>\n<p>\nThis setting will protect you against remote file access but not denial of service.\n<pre>\nTransformerFactory factory = TransformerFactory.newInstance();\nfactory.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING, true);\n\nTransformer transformer = factory.newTransformer();\ntransformer.setOutputProperty(OutputKeys.INDENT, \"yes\");\n\ntransformer.transform(input, result);</pre>\n</p>\n<br/>\n<p>\n<b>References</b><br/>\n<!--XXE_GENERIC_START-->\n<a href=\"http://cwe.mitre.org/data/definitions/611.html\">CWE-611: Improper Restriction of XML External Entity Reference (\'XXE\')</a><br/>\n<a href=\"https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=61702260\">CERT: IDS10-J. Prevent XML external entity attacks</a><br/>\n<a href=\"https://www.owasp.org/index.php/XML_External_Entity_%28XXE%29_Processing\">OWASP.org: XML External Entity (XXE) Processing</a><br/>\n<a href=\"http://www.ws-attacks.org/index.php/XML_Entity_Expansion\">WS-Attacks.org: XML Entity Expansion</a><br/>\n<a href=\"http://www.ws-attacks.org/index.php/XML_External_Entity_DOS\">WS-Attacks.org: XML External Entity DOS</a><br/>\n<a href=\"http://www.ws-attacks.org/index.php/XML_Entity_Reference_Attack\">WS-Attacks.org: XML Entity Reference Attack</a><br/>\n<a href=\"http://blog.h3xstream.com/2014/06/identifying-xml-external-entity.html\">Identifying Xml eXternal Entity vulnerability (XXE)</a><br/>\n<!--XXE_GENERIC_END-->\n</p>\n\n    \n','2019-10-15 16:02:24'),(442,'XXE_XSLT_TRANSFORM_FACTORY',611,9,'\n      \n<!--XXE_GENERIC_START-->\n<h3>Attack</h3>\n<p>XSLT External Entity (XXE) attacks can occur when an XSLT parser supports external entities while processing XSLT received\nfrom an untrusted source.</p>\n<p><b>Risk: Expose local file content (XXE: <u>X</u>ML e<u>X</u>ternal <u>E</u>ntity)</b></p>\n<p>\n<pre>\n&lt;xsl:stylesheet version=&quot;1.0&quot; xmlns:xsl=&quot;http://www.w3.org/1999/XSL/Transform&quot;&gt;\n   &lt;xsl:template match=&quot;/&quot;&gt;\n       &lt;xsl:value-of select=&quot;document(&apos;/etc/passwd&apos;)&quot;&gt;\n   &lt;/xsl:value-of&gt;&lt;/xsl:template&gt;\n&lt;/xsl:stylesheet&gt;</pre>\n</p>\n\n<h3>Solution</h3>\n<p>\nIn order to avoid exposing dangerous feature of the XML parser, you can do the following change to the code.\n</p>\n<!--XXE_GENERIC_END-->\n\n<p><b>Vulnerable Code:</b></p>\n<p>\n<pre>\nTransformer transformer = TransformerFactory.newInstance().newTransformer();\ntransformer.transform(input, result);</pre>\n</p>\n<br/>\n<p>\nThe following snippets show two available solutions. You can set one feature or both.\n</p>\n<p><b>Solution using \"Secure processing\" mode:</b></p>\n<p>\nThis setting will protect you against remote file access but not denial of service.\n<pre>\nTransformerFactory factory = TransformerFactory.newInstance();\nfactory.setAttribute(XMLConstants.ACCESS_EXTERNAL_DTD, \"all\");\nfactory.setAttribute(XMLConstants.ACCESS_EXTERNAL_STYLESHEET, \"all\");\n\nTransformer transformer = factory.newTransformer();\ntransformer.setOutputProperty(OutputKeys.INDENT, \"yes\");\n\ntransformer.transform(input, result);</pre>\n</p>\n\n<p><b>Solution disabling DTD:</b></p>\n<p>\nThis setting will protect you against remote file access but not denial of service.\n<pre>\nTransformerFactory factory = TransformerFactory.newInstance();\nfactory.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING, true);\n\nTransformer transformer = factory.newTransformer();\ntransformer.setOutputProperty(OutputKeys.INDENT, \"yes\");\n\ntransformer.transform(input, result);</pre>\n</p>\n<br/>\n<p>\n<b>References</b><br/>\n<!--XXE_GENERIC_START-->\n<a href=\"http://cwe.mitre.org/data/definitions/611.html\">CWE-611: Improper Restriction of XML External Entity Reference (\'XXE\')</a><br/>\n<a href=\"https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=61702260\">CERT: IDS10-J. Prevent XML external entity attacks</a><br/>\n<a href=\"https://www.owasp.org/index.php/XML_External_Entity_%28XXE%29_Processing\">OWASP.org: XML External Entity (XXE) Processing</a><br/>\n<a href=\"http://www.ws-attacks.org/index.php/XML_Entity_Expansion\">WS-Attacks.org: XML Entity Expansion</a><br/>\n<a href=\"http://www.ws-attacks.org/index.php/XML_External_Entity_DOS\">WS-Attacks.org: XML External Entity DOS</a><br/>\n<a href=\"http://www.ws-attacks.org/index.php/XML_Entity_Reference_Attack\">WS-Attacks.org: XML Entity Reference Attack</a><br/>\n<a href=\"http://blog.h3xstream.com/2014/06/identifying-xml-external-entity.html\">Identifying Xml eXternal Entity vulnerability (XXE)</a><br/>\n<!--XXE_GENERIC_END-->\n</p>\n\n    \n','2019-10-15 16:02:24'),(443,'XML_DECODER',0,9,'\n      \n<p>\n    XMLDecoder should not be used to parse untrusted data. Deserializing user input can lead to arbitrary code execution.\n    This is possible because XMLDecoder supports arbitrary method invocation. This capability is intended to call setter methods,\n    but in practice, any method can be called.\n</p>\n<p>\n    <b>Malicious XML example:</b>\n</p>\n<pre>\n&lt;?xml version=\"1.0\" encoding=\"UTF-8\" ?&gt;\n&lt;java version=\"1.4.0\" class=\"java.beans.XMLDecoder\"&gt;\n  &lt;object class=\"java.io.PrintWriter\"&gt;\n    &lt;string>/tmp/Hacked.txt&lt;/string&gt;\n    &lt;void method=\"println\"&gt;\n      &lt;string>Hello World!&lt;/string&gt;\n    &lt;/void&gt;\n    &lt;void method=\"close\"/&gt;\n  &lt;/object&gt;\n&lt;/java&gt;\n</pre>\n<p>\nThe XML code above will cause the creation of a file with the content \"Hello World!\".\n</p>\n<p>\n    <b>Vulnerable Code:</b></br/>\n    <pre>XMLDecoder d = new XMLDecoder(in);\ntry {\n    Object result = d.readObject();\n}\n[...]</pre>\n</p>\n<p>\n<b>Solution:</b></br/>\nThe solution is to avoid using XMLDecoder to parse content from an untrusted source.\n</p>\n<br/>\n<p>\n<b>References</b><br/>\n<a href=\"http://blog.diniscruz.com/2013/08/using-xmldecoder-to-execute-server-side.html\">Dinis Cruz Blog: Using XMLDecoder to execute server-side Java Code on an Restlet application</a><br/>\n<a href=\"https://securityblog.redhat.com/2014/01/23/java-deserialization-flaws-part-2-xml-deserialization/\">RedHat blog : Java deserialization flaws: Part 2, XML deserialization</a><br/>\n<a href=\"http://cwe.mitre.org/data/definitions/20.html\">CWE-20: Improper Input Validation</a>\n</p>\n            \n    \n','2019-10-15 16:02:24'),(444,'XXE_XMLSTREAMREADER',611,9,'\n      \n<!--XXE_GENERIC_START-->\n<h3>Attack</h3>\n<p>XML External Entity (XXE) attacks can occur when an XML parser supports XML entities while processing XML received\nfrom an untrusted source.</p>\n<p><b>Risk 1: Expose local file content (XXE: <u>X</u>ML e<u>X</u>ternal <u>E</u>ntity)</b></p>\n<p>\n<pre>\n&lt;?xml version=&quot;1.0&quot; encoding=&quot;ISO-8859-1&quot;?&gt;\n&lt;!DOCTYPE foo [\n   &lt;!ENTITY xxe SYSTEM &quot;file:///etc/passwd&quot; &gt; ]&gt;\n&lt;foo&gt;&amp;xxe;&lt;/foo&gt;</pre>\n</p>\n<b>Risk 2: Denial of service (XEE: <u>X</u>ml <u>E</u>ntity <u>E</u>xpansion)</b>\n<p>\n<pre>\n&lt;?xml version=&quot;1.0&quot;?&gt;\n&lt;!DOCTYPE lolz [\n &lt;!ENTITY lol &quot;lol&quot;&gt;\n &lt;!ELEMENT lolz (#PCDATA)&gt;\n &lt;!ENTITY lol1 &quot;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&quot;&gt;\n &lt;!ENTITY lol2 &quot;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&quot;&gt;\n &lt;!ENTITY lol3 &quot;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&quot;&gt;\n[...]\n &lt;!ENTITY lol9 &quot;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&quot;&gt;\n]&gt;\n&lt;lolz&gt;&amp;lol9;&lt;/lolz&gt;</pre>\n</p>\n\n<h3>Solution</h3>\n<p>\nIn order to avoid exposing dangerous feature of the XML parser, you can do the following change to the code.\n</p>\n<!--XXE_GENERIC_END-->\n\n<p><b>Vulnerable Code:</b></p>\n<p>\n<pre>public void parseXML(InputStream input) throws XMLStreamException {\n\n    XMLInputFactory factory = XMLInputFactory.newFactory();\n    XMLStreamReader reader = factory.createXMLStreamReader(input);\n    [...]\n}</pre>\n</p>\n<br/>\n<p>\nThe following snippets show two available solutions. You can set one property or both.\n</p>\n\n<p><b>Solution disabling External Entities:</b></p>\n<p>\n<pre>public void parseXML(InputStream input) throws XMLStreamException {\n\n    XMLInputFactory factory = XMLInputFactory.newFactory();\n    factory.setProperty(XMLInputFactory.IS_SUPPORTING_EXTERNAL_ENTITIES, false);\n    XMLStreamReader reader = factory.createXMLStreamReader(input);\n    [...]\n}</pre>\n</p>\n\n<p><b>Solution disabling DTD:</b></p>\n<p>\n<pre>public void parseXML(InputStream input) throws XMLStreamException {\n\n    XMLInputFactory factory = XMLInputFactory.newFactory();\n    factory.setProperty(XMLInputFactory.SUPPORT_DTD, false);\n    XMLStreamReader reader = factory.createXMLStreamReader(input);\n    [...]\n}</pre>\n</p>\n<br/>\n<p>\n<b>References</b><br/>\n<!--XXE_GENERIC_START-->\n<a href=\"http://cwe.mitre.org/data/definitions/611.html\">CWE-611: Improper Restriction of XML External Entity Reference (\'XXE\')</a><br/>\n<a href=\"https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=61702260\">CERT: IDS10-J. Prevent XML external entity attacks</a><br/>\n<a href=\"https://www.owasp.org/index.php/XML_External_Entity_%28XXE%29_Processing\">OWASP.org: XML External Entity (XXE) Processing</a><br/>\n<a href=\"http://www.ws-attacks.org/index.php/XML_Entity_Expansion\">WS-Attacks.org: XML Entity Expansion</a><br/>\n<a href=\"http://www.ws-attacks.org/index.php/XML_External_Entity_DOS\">WS-Attacks.org: XML External Entity DOS</a><br/>\n<a href=\"http://www.ws-attacks.org/index.php/XML_Entity_Reference_Attack\">WS-Attacks.org: XML Entity Reference Attack</a><br/>\n<a href=\"http://blog.h3xstream.com/2014/06/identifying-xml-external-entity.html\">Identifying Xml eXternal Entity vulnerability (XXE)</a><br/>\n<!--XXE_GENERIC_END-->\n<a href=\"http://openjdk.java.net/jeps/185\">JEP 185: Restrict Fetching of External XML Resources</a>\n</p>\n\n    \n','2019-10-15 16:02:24'),(445,'XXE_SAXPARSER',611,9,'\n      \n<!--XXE_GENERIC_START-->\n<h3>Attack</h3>\n<p>XML External Entity (XXE) attacks can occur when an XML parser supports XML entities while processing XML received\nfrom an untrusted source.</p>\n<p><b>Risk 1: Expose local file content (XXE: <u>X</u>ML e<u>X</u>ternal <u>E</u>ntity)</b></p>\n<p>\n<pre>\n&lt;?xml version=&quot;1.0&quot; encoding=&quot;ISO-8859-1&quot;?&gt;\n&lt;!DOCTYPE foo [\n   &lt;!ENTITY xxe SYSTEM &quot;file:///etc/passwd&quot; &gt; ]&gt;\n&lt;foo&gt;&amp;xxe;&lt;/foo&gt;</pre>\n</p>\n<b>Risk 2: Denial of service (XEE: <u>X</u>ml <u>E</u>ntity <u>E</u>xpansion)</b>\n<p>\n<pre>\n&lt;?xml version=&quot;1.0&quot;?&gt;\n&lt;!DOCTYPE lolz [\n &lt;!ENTITY lol &quot;lol&quot;&gt;\n &lt;!ELEMENT lolz (#PCDATA)&gt;\n &lt;!ENTITY lol1 &quot;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&quot;&gt;\n &lt;!ENTITY lol2 &quot;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&quot;&gt;\n &lt;!ENTITY lol3 &quot;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&quot;&gt;\n[...]\n &lt;!ENTITY lol9 &quot;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&quot;&gt;\n]&gt;\n&lt;lolz&gt;&amp;lol9;&lt;/lolz&gt;</pre>\n</p>\n\n<h3>Solution</h3>\n<p>\nIn order to avoid exposing dangerous feature of the XML parser, you can do the following change to the code.\n</p>\n<!--XXE_GENERIC_END-->\n\n<p><b>Vulnerable Code:</b></p>\n<p>\n<pre>\nSAXParser parser = SAXParserFactory.newInstance().newSAXParser();\n\nparser.parse(inputStream, customHandler);</pre>\n</p>\n<br/>\n<p>\nThe following snippets show two available solutions. You can set one feature or both.\n</p>\n\n<p><b>Solution using \"Secure processing\" mode:</b></p>\n<p>\nThis setting will protect you against Denial of Service attack and remote file access.\n<pre>\nSAXParserFactory spf = SAXParserFactory.newInstance();\nspf.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING, true);\nSAXParser parser = spf.newSAXParser();\n\nparser.parse(inputStream, customHandler);</pre>\n</p>\n\n<p><b>Solution disabling DTD:</b></p>\n<p>\nBy disabling DTD, almost all XXE attacks will be prevented.\n<pre>\nSAXParserFactory spf = SAXParserFactory.newInstance();\nspf.setFeature(\"http://apache.org/xml/features/disallow-doctype-decl\", true);\nSAXParser parser = spf.newSAXParser();\n\nparser.parse(inputStream, customHandler);</pre>\n</p>\n<br/>\n<p>\n<b>References</b><br/>\n<!--XXE_GENERIC_START-->\n<a href=\"http://cwe.mitre.org/data/definitions/611.html\">CWE-611: Improper Restriction of XML External Entity Reference (\'XXE\')</a><br/>\n<a href=\"https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=61702260\">CERT: IDS10-J. Prevent XML external entity attacks</a><br/>\n<a href=\"https://www.owasp.org/index.php/XML_External_Entity_%28XXE%29_Processing\">OWASP.org: XML External Entity (XXE) Processing</a><br/>\n<a href=\"http://www.ws-attacks.org/index.php/XML_Entity_Expansion\">WS-Attacks.org: XML Entity Expansion</a><br/>\n<a href=\"http://www.ws-attacks.org/index.php/XML_External_Entity_DOS\">WS-Attacks.org: XML External Entity DOS</a><br/>\n<a href=\"http://www.ws-attacks.org/index.php/XML_Entity_Reference_Attack\">WS-Attacks.org: XML Entity Reference Attack</a><br/>\n<a href=\"http://blog.h3xstream.com/2014/06/identifying-xml-external-entity.html\">Identifying Xml eXternal Entity vulnerability (XXE)</a><br/>\n<!--XXE_GENERIC_END-->\n<a href=\"http://xerces.apache.org/xerces-j/features.html\">Xerces complete features list</a>\n</p>\n\n    \n','2019-10-15 16:02:24'),(446,'XXE_XMLREADER',611,9,'\n      \n<!--XXE_GENERIC_START-->\n<h3>Attack</h3>\n<p>XML External Entity (XXE) attacks can occur when an XML parser supports XML entities while processing XML received\nfrom an untrusted source.</p>\n<p><b>Risk 1: Expose local file content (XXE: <u>X</u>ML e<u>X</u>ternal <u>E</u>ntity)</b></p>\n<p>\n<pre>\n&lt;?xml version=&quot;1.0&quot; encoding=&quot;ISO-8859-1&quot;?&gt;\n&lt;!DOCTYPE foo [\n   &lt;!ENTITY xxe SYSTEM &quot;file:///etc/passwd&quot; &gt; ]&gt;\n&lt;foo&gt;&amp;xxe;&lt;/foo&gt;</pre>\n</p>\n<b>Risk 2: Denial of service (XEE: <u>X</u>ml <u>E</u>ntity <u>E</u>xpansion)</b>\n<p>\n<pre>\n&lt;?xml version=&quot;1.0&quot;?&gt;\n&lt;!DOCTYPE lolz [\n &lt;!ENTITY lol &quot;lol&quot;&gt;\n &lt;!ELEMENT lolz (#PCDATA)&gt;\n &lt;!ENTITY lol1 &quot;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&quot;&gt;\n &lt;!ENTITY lol2 &quot;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&quot;&gt;\n &lt;!ENTITY lol3 &quot;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&quot;&gt;\n[...]\n &lt;!ENTITY lol9 &quot;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&quot;&gt;\n]&gt;\n&lt;lolz&gt;&amp;lol9;&lt;/lolz&gt;</pre>\n</p>\n\n<h3>Solution</h3>\n<p>\nIn order to avoid exposing dangerous feature of the XML parser, you can do the following change to the code.\n</p>\n<!--XXE_GENERIC_END-->\n\n<p><b>Vulnerable Code:</b></p>\n<p>\n<pre>\nXMLReader reader = XMLReaderFactory.createXMLReader();\nreader.setContentHandler(customHandler);\nreader.parse(new InputSource(inputStream));</pre>\n</p>\n<br/>\n<p>\nThe following snippets show two available solutions. You can set one property or both.\n</p>\n\n<p><b>Solution using \"Secure processing\" mode:</b></p>\n<p>\nThis setting will protect you against Denial of Service attack and remote file access.\n<pre>\nXMLReader reader = XMLReaderFactory.createXMLReader();\nreader.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING, true);\nreader.setContentHandler(customHandler);\n\nreader.parse(new InputSource(inputStream));</pre>\n</p>\n\n<p><b>Solution disabling DTD:</b></p>\n<p>\nBy disabling DTD, almost all XXE attacks will be prevented.\n<pre>\nXMLReader reader = XMLReaderFactory.createXMLReader();\nreader.setFeature(\"http://apache.org/xml/features/disallow-doctype-decl\", true);\nreader.setContentHandler(customHandler);\n\nreader.parse(new InputSource(inputStream));</pre>\n</p>\n<br/>\n<p>\n<b>References</b><br/>\n<!--XXE_GENERIC_START-->\n<a href=\"http://cwe.mitre.org/data/definitions/611.html\">CWE-611: Improper Restriction of XML External Entity Reference (\'XXE\')</a><br/>\n<a href=\"https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=61702260\">CERT: IDS10-J. Prevent XML external entity attacks</a><br/>\n<a href=\"https://www.owasp.org/index.php/XML_External_Entity_%28XXE%29_Processing\">OWASP.org: XML External Entity (XXE) Processing</a><br/>\n<a href=\"http://www.ws-attacks.org/index.php/XML_Entity_Expansion\">WS-Attacks.org: XML Entity Expansion</a><br/>\n<a href=\"http://www.ws-attacks.org/index.php/XML_External_Entity_DOS\">WS-Attacks.org: XML External Entity DOS</a><br/>\n<a href=\"http://www.ws-attacks.org/index.php/XML_Entity_Reference_Attack\">WS-Attacks.org: XML Entity Reference Attack</a><br/>\n<a href=\"http://blog.h3xstream.com/2014/06/identifying-xml-external-entity.html\">Identifying Xml eXternal Entity vulnerability (XXE)</a><br/>\n<!--XXE_GENERIC_END-->\n<a href=\"http://xerces.apache.org/xerces-j/features.html\">Xerces complete features list</a>\n</p>\n\n    \n','2019-10-15 16:02:24'),(447,'XXE_DOCUMENT',611,9,'\n      \n<!--XXE_GENERIC_START-->\n<h3>Attack</h3>\n<p>XML External Entity (XXE) attacks can occur when an XML parser supports XML entities while processing XML received\nfrom an untrusted source.</p>\n<p><b>Risk 1: Expose local file content (XXE: <u>X</u>ML e<u>X</u>ternal <u>E</u>ntity)</b></p>\n<p>\n<pre>\n&lt;?xml version=&quot;1.0&quot; encoding=&quot;ISO-8859-1&quot;?&gt;\n&lt;!DOCTYPE foo [\n   &lt;!ENTITY xxe SYSTEM &quot;file:///etc/passwd&quot; &gt; ]&gt;\n&lt;foo&gt;&amp;xxe;&lt;/foo&gt;</pre>\n</p>\n<b>Risk 2: Denial of service (XEE: <u>X</u>ml <u>E</u>ntity <u>E</u>xpansion)</b>\n<p>\n<pre>\n&lt;?xml version=&quot;1.0&quot;?&gt;\n&lt;!DOCTYPE lolz [\n &lt;!ENTITY lol &quot;lol&quot;&gt;\n &lt;!ELEMENT lolz (#PCDATA)&gt;\n &lt;!ENTITY lol1 &quot;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&quot;&gt;\n &lt;!ENTITY lol2 &quot;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&quot;&gt;\n &lt;!ENTITY lol3 &quot;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&quot;&gt;\n[...]\n &lt;!ENTITY lol9 &quot;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&quot;&gt;\n]&gt;\n&lt;lolz&gt;&amp;lol9;&lt;/lolz&gt;</pre>\n</p>\n\n<h3>Solution</h3>\n<p>\nIn order to avoid exposing dangerous feature of the XML parser, you can do the following change to the code.\n</p>\n<!--XXE_GENERIC_END-->\n\n<p><b>Vulnerable Code:</b></p>\n<p>\n<pre>\nDocumentBuilder db = DocumentBuilderFactory.newInstance().newDocumentBuilder();\n\nDocument doc = db.parse(input);</pre>\n</p>\n<br/>\n<p>\nThe following snippets show two available solutions. You can set one feature or both.\n</p>\n\n<p><b>Solution using \"Secure processing\" mode:</b></p>\n<p>\nThis setting will protect you against Denial of Service attack and remote file access.\n<pre>\nDocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();\ndbf.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING, true);\nDocumentBuilder db = dbf.newDocumentBuilder();\n\nDocument doc = db.parse(input);</pre>\n</p>\n\n<p><b>Solution disabling DTD:</b></p>\n<p>\nBy disabling DTD, almost all XXE attacks will be prevented.\n<pre>\nDocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();\ndbf.setFeature(\"http://apache.org/xml/features/disallow-doctype-decl\", true);\nDocumentBuilder db = dbf.newDocumentBuilder();\n\nDocument doc = db.parse(input);</pre>\n</p>\n<br/>\n<p>\n<b>References</b><br/>\n<!--XXE_GENERIC_START-->\n<a href=\"http://cwe.mitre.org/data/definitions/611.html\">CWE-611: Improper Restriction of XML External Entity Reference (\'XXE\')</a><br/>\n<a href=\"https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=61702260\">CERT: IDS10-J. Prevent XML external entity attacks</a><br/>\n<a href=\"https://www.owasp.org/index.php/XML_External_Entity_%28XXE%29_Processing\">OWASP.org: XML External Entity (XXE) Processing</a><br/>\n<a href=\"http://www.ws-attacks.org/index.php/XML_Entity_Expansion\">WS-Attacks.org: XML Entity Expansion</a><br/>\n<a href=\"http://www.ws-attacks.org/index.php/XML_External_Entity_DOS\">WS-Attacks.org: XML External Entity DOS</a><br/>\n<a href=\"http://www.ws-attacks.org/index.php/XML_Entity_Reference_Attack\">WS-Attacks.org: XML Entity Reference Attack</a><br/>\n<a href=\"http://blog.h3xstream.com/2014/06/identifying-xml-external-entity.html\">Identifying Xml eXternal Entity vulnerability (XXE)</a><br/>\n<!--XXE_GENERIC_END-->\n<a href=\"http://xerces.apache.org/xerces2-j/features.html\">Xerces2 complete features list</a>\n</p>\n\n    \n','2019-10-15 16:02:24'),(448,'XXE_XPATH',611,9,'\n      \n<!--XXE_GENERIC_START-->\n<h3>Attack</h3>\n<p>XML External Entity (XXE) attacks can occur when an XML parser supports XML entities while processing XML received\nfrom an untrusted source.</p>\n<p><b>Risk 1: Expose local file content (XXE: <u>X</u>ML e<u>X</u>ternal <u>E</u>ntity)</b></p>\n<p>\n<pre>\n&lt;?xml version=&quot;1.0&quot; encoding=&quot;ISO-8859-1&quot;?&gt;\n&lt;!DOCTYPE foo [\n   &lt;!ENTITY xxe SYSTEM &quot;file:///etc/passwd&quot; &gt; ]&gt;\n&lt;foo&gt;&amp;xxe;&lt;/foo&gt;</pre>\n</p>\n<b>Risk 2: Denial of service (XEE: <u>X</u>ml <u>E</u>ntity <u>E</u>xpansion)</b>\n<p>\n<pre>\n&lt;?xml version=&quot;1.0&quot;?&gt;\n&lt;!DOCTYPE lolz [\n &lt;!ENTITY lol &quot;lol&quot;&gt;\n &lt;!ELEMENT lolz (#PCDATA)&gt;\n &lt;!ENTITY lol1 &quot;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&quot;&gt;\n &lt;!ENTITY lol2 &quot;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&quot;&gt;\n &lt;!ENTITY lol3 &quot;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&quot;&gt;\n[...]\n &lt;!ENTITY lol9 &quot;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&quot;&gt;\n]&gt;\n&lt;lolz&gt;&amp;lol9;&lt;/lolz&gt;</pre>\n</p>\n\n<h3>Solution</h3>\n<p>\nIn order to avoid exposing dangerous feature of the XML parser, you can do the following change to the code.\n</p>\n<!--XXE_GENERIC_END-->\n\n<p><b>Vulnerable Code:</b></p>\n<p>\n<pre>DocumentBuilder builder = df.newDocumentBuilder();\n\nXPathFactory xPathFactory = XPathFactory.newInstance();\nXPath xpath = xPathFactory.newXPath();\nXPathExpression xPathExpr = xpath.compile(\"/somepath/text()\");\n\nxPathExpr.evaluate(new InputSource(inputStream));</pre>\n</p>\n<br/>\n<p>\nThe following snippets show two available solutions. You can set one feature or both.\n</p>\n\n<p><b>Solution using \"Secure processing\" mode:</b></p>\n<p>\nThis setting will protect you against Denial of Service attack and remote file access.\n<pre>\nDocumentBuilderFactory df = DocumentBuilderFactory.newInstance();\ndf.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING, true);\nDocumentBuilder builder = df.newDocumentBuilder();\n\n[...]\n\nxPathExpr.evaluate( builder.parse(inputStream) );</pre>\n</p>\n\n<p><b>Solution disabling DTD:</b></p>\n<p>\nBy disabling DTD, almost all XXE attacks will be prevented.\n<pre>\nDocumentBuilderFactory df = DocumentBuilderFactory.newInstance();\nspf.setFeature(\"http://apache.org/xml/features/disallow-doctype-decl\", true);\nDocumentBuilder builder = df.newDocumentBuilder();\n\n[...]\n\nxPathExpr.evaluate( builder.parse(inputStream) );</pre>\n</p>\n<br/>\n<p>\n<b>References</b><br/>\n<!--XXE_GENERIC_START-->\n<a href=\"http://cwe.mitre.org/data/definitions/611.html\">CWE-611: Improper Restriction of XML External Entity Reference (\'XXE\')</a><br/>\n<a href=\"https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=61702260\">CERT: IDS10-J. Prevent XML external entity attacks</a><br/>\n<a href=\"https://www.owasp.org/index.php/XML_External_Entity_%28XXE%29_Processing\">OWASP.org: XML External Entity (XXE) Processing</a><br/>\n<a href=\"http://www.ws-attacks.org/index.php/XML_Entity_Expansion\">WS-Attacks.org: XML Entity Expansion</a><br/>\n<a href=\"http://www.ws-attacks.org/index.php/XML_External_Entity_DOS\">WS-Attacks.org: XML External Entity DOS</a><br/>\n<a href=\"http://www.ws-attacks.org/index.php/XML_Entity_Reference_Attack\">WS-Attacks.org: XML Entity Reference Attack</a><br/>\n<a href=\"http://blog.h3xstream.com/2014/06/identifying-xml-external-entity.html\">Identifying Xml eXternal Entity vulnerability (XXE)</a><br/>\n<!--XXE_GENERIC_END-->\n<a href=\"https://www.owasp.org/index.php/XML_External_Entity_(XXE)_Prevention_Cheat_Sheet#XPathExpression\">XML External Entity (XXE) Prevention Cheat Sheet</a>\n</p>\n\n    \n','2019-10-15 16:02:24'),(449,'WICKET_XSS1',0,9,'\n      \n<p>\nDisabling HTML escaping put the application at risk for Cross-Site Scripting (XSS).\n</p>\n<p>\n    <b>Vulnerable Code:</b><br/>\n<pre>\nadd(new Label(\"someLabel\").setEscapeModelStrings(false));\n</pre>\n</p>\n            \n    \n','2019-10-15 16:02:24'),(450,'TEMPLATE_INJECTION_FREEMARKER',94,9,'\n      \n<p>\nFreemarker template engine is powerful. It is possible to add logic including condition statements, loops and external calls.\nIt is not design to be sandbox to templating operations. A malicious user in control of a template can run malicious code\non the server-side. Freemarker templates should be seen as scripts.\n</p>\n<p>\n    <b>Vulnerable Code:</b>\n<pre>Template template = cfg.getTemplate(inputTemplate);\n[...]\ntemplate.process(data, swOut);</pre>\n</p>\n<p>\n    <b>Solution:</b>\n<br/>\nAvoid letting end users manipulate templates with Freemarker. If you need to expose template editing to your users,\nprefer logic-less template engines such as Handlebars or Moustache (See references).\n</p>\n<br/>\n<p>\n<b>References</b><br/>\n<a href=\"http://blog.portswigger.net/2015/08/server-side-template-injection.html\">PortSwigger: Server-Side Template Injection </a><br/>\n<a href=\"https://jknack.github.io/handlebars.java/\">Handlebars.java</a><br/>\n</p>\n            \n    \n','2019-10-15 16:02:24'),(451,'TEMPLATE_INJECTION_VELOCITY',94,9,'\n      \n<p>\nVelocity template engine is powerful. It is possible to add logic including condition statements, loops and external calls.\nIt is not design to be sandbox to templating operations. A malicious user in control of a template can run malicious code\non the server-side. Velocity templates should be seen as scripts.\n</p>\n<p>\n    <b>Vulnerable Code:</b>\n<pre>[...]\n\nVelocity.evaluate(context, swOut, \"test\", userInput);</pre>\n</p>\n<p>\n    <b>Solution:</b>\n<br/>\nAvoid letting end users manipulate templates with Velocity. If you need to expose template editing to your users,\nprefer logic-less template engines such as Handlebars or Moustache (See references).\n</p>\n<br/>\n<p>\n<b>References</b><br/>\n<a href=\"http://blog.portswigger.net/2015/08/server-side-template-injection.html\">PortSwigger: Server-Side Template Injection </a><br/>\n<a href=\"https://jknack.github.io/handlebars.java/\">Handlebars.java</a><br/>\n</p>\n            \n    \n','2019-10-15 16:02:24'),(452,'SPRING_UNVALIDATED_REDIRECT',601,9,'\n      \n<p>\n    Unvalidated redirects occur when an application redirects a user to a destination URL specified by a user supplied\n    parameter that is not validated. Such vulnerabilities can be used to facilitate phishing attacks.\n</p>\n<p>\n    <b>Scenario</b><br/>\n    1. A user is tricked into visiting the malicious URL: <code>http://website.com/login?redirect=http://evil.vvebsite.com/fake/login</code><br/>\n    2. The user is redirected to a fake login page that looks like a site they trust. (<code>http://evil.vvebsite.com/fake/login</code>)<br/>\n    3. The user enters his credentials.<br/>\n    4. The evil site steals the user\'s credentials and redirects him to the original website.<br/>\n    <br/>\n    This attack is plausible because most users don\'t double check the URL after the redirection. Also, redirection to\n    an authentication page is very common.\n</p>\n<p>\n    <b>Vulnerable Code:</b></br/>\n    <pre>@RequestMapping(\"/redirect\")\npublic String redirect(@RequestParam(\"url\") String url) {\n    [...]\n    return \"redirect:\" + url;\n}</pre>\n</p>\n<p>\n    <b>Solution/Countermeasures:</b><br/>\n    <ul>\n        <li>Don\'t accept redirection destinations from users</li>\n        <li>Accept a destination key, and use it to look up the target (legal) destination</li>\n        <li>Accept only relative paths</li>\n        <li>White list URLs (if possible)</li>\n        <li>Validate that the beginning of the URL is part of a white list</li>\n    </ul>\n</p>\n<br/>\n<p>\n<b>References</b><br/>\n<a href=\"http://projects.webappsec.org/w/page/13246981/URL%20Redirector%20Abuse\">WASC-38: URL Redirector Abuse</a><br/>\n<a href=\"https://www.owasp.org/index.php/Top_10_2013-A10-Unvalidated_Redirects_and_Forwards\">OWASP: Top 10 2013-A10: Unvalidated Redirects and Forwards</a><br/>\n<a href=\"https://www.owasp.org/index.php/Unvalidated_Redirects_and_Forwards_Cheat_Sheet\">OWASP: Unvalidated Redirects and Forwards Cheat Sheet</a><br/>\n<a href=\"http://cwe.mitre.org/data/definitions/601.html\">CWE-601: URL Redirection to Untrusted Site (\'Open Redirect\')</a>\n</p>\n            \n    \n','2019-10-15 16:02:24'),(453,'DESERIALIZATION_GADGET',502,9,'\n      \n<p>\nDeserialization gadget are class that could be used by an attacker to take advantage of a remote API using Native Serialization.\nThis class is either adding custom behavior to deserialization with the readObject method (Serializable) or can be called\n from a serialized object (InvocationHandler).\n</p>\n<p>\nThis detector is intended to be used mostly by researcher. The real issue is using deserialization for remote operation.\nRemoving gadget is an hardening practice to reduce the risk of being exploited.\n</p>\n<p>\n<b>References</b><br/>\n<a href=\"https://cwe.mitre.org/data/definitions/502.html\">CWE-502: Deserialization of Untrusted Data</a><br/>\n<a href=\"https://www.owasp.org/index.php/Deserialization_of_untrusted_data\">Deserialization of untrusted data</a><br/>\n<a href=\"http://www.oracle.com/technetwork/java/seccodeguide-139067.html#8\">Serialization and Deserialization </a><br/>\n<a href=\"https://github.com/frohoff/ysoserial\">A tool for generating payloads that exploit unsafe Java object deserialization</a><br/>\n[1] <a href=\"https://gist.github.com/coekie/a27cc406fc9f3dc7a70d\">Example of Denial of Service using the class java.util.HashSet</a><br/>\n[2] <a href=\"https://bugzilla.redhat.com/show_bug.cgi?id=CVE-2015-2590\">OpenJDK: Deserialization issue in ObjectInputStream.readSerialData() (CVE-2015-2590)</a><br/>\n[3] <a href=\"https://www.rapid7.com/db/modules/exploit/multi/browser/java_calendar_deserialize\">Rapid7: Sun Java Calendar Deserialization Privilege Escalation (CVE-2008-5353)</a>\n</p>\n\n    \n','2019-10-15 16:02:24'),(454,'OBJECT_DESERIALIZATION',502,9,'\n      \n<p>\n    Object deserialization of untrusted data can lead to remote code execution, if there is a class in classpath that allows\n    the trigger of malicious operation.\n</p>\n<p>\n    Libraries developers tend to fix class that provided potential malicious trigger. There are still classes that are\n    known to trigger Denial of Service<sup>[1]</sup>.\n</p>\n<p>\n    Deserialization is a sensible operation that has a great history of vulnerabilities. The web application might\n    become vulnerable as soon as a new vulnerability is found in the Java Virtual Machine<sup>[2] [3]</sup>.\n</p>\n\n<p>\n<b>Code at risk:</b><br/>\n<pre>\npublic UserData deserializeObject(InputStream receivedFile) throws IOException, ClassNotFoundException {\n\n    try (ObjectInputStream in = new ObjectInputStream(receivedFile)) {\n        return (UserData) in.readObject();\n    }\n}\n</pre>\n</p>\n\n<p>\n<b>Solutions:</b><br/>\n<p>\nAvoid deserializing object provided by remote users.\n</p>\n<br/>\n<p>\n<b>References</b><br/>\n<a href=\"https://cwe.mitre.org/data/definitions/502.html\">CWE-502: Deserialization of Untrusted Data</a><br/>\n<a href=\"https://www.owasp.org/index.php/Deserialization_of_untrusted_data\">Deserialization of untrusted data</a><br/>\n<a href=\"http://www.oracle.com/technetwork/java/seccodeguide-139067.html#8\">Serialization and Deserialization </a><br/>\n<a href=\"https://github.com/frohoff/ysoserial\">A tool for generating payloads that exploit unsafe Java object deserialization</a><br/>\n[1] <a href=\"https://gist.github.com/coekie/a27cc406fc9f3dc7a70d\">Example of Denial of Service using the class java.util.HashSet</a><br/>\n[2] <a href=\"https://bugzilla.redhat.com/show_bug.cgi?id=CVE-2015-2590\">OpenJDK: Deserialization issue in ObjectInputStream.readSerialData() (CVE-2015-2590)</a><br/>\n[3] <a href=\"https://www.rapid7.com/db/modules/exploit/multi/browser/java_calendar_deserialize\">Rapid7: Sun Java Calendar Deserialization Privilege Escalation (CVE-2008-5353)</a>\n</p>\n\n    \n','2019-10-15 16:02:24'),(455,'JACKSON_UNSAFE_DESERIALIZATION',502,9,'\n      \n<p>When the Jackson databind library is used incorrectly the deserialization of untrusted data can lead to remote code execution, if there is a class in classpath that allows the trigger of malicious operation.\n\n<p>\n<b>Solutions:</b><br/>\n<p>\nExplicitly define what types and subtypes you want to be available when using polymorphism through JsonTypeInfo.Id.NAME.\nAlso, never call ObjectMapper.<strong>enableDefaultTyping</strong> (and then readValue a type that holds a Object or Serializable or Comparable or a known deserialization type).\n</p>\n\n<p>\n<b>Code at risk:</b><br/>\n<pre>\npublic class Example {\n    static class ABean {\n        public int id;\n        public Object obj;\n    }\n\n    static class AnotherBean {\n        @JsonTypeInfo(use = JsonTypeInfo.Id.CLASS) // or JsonTypeInfo.Id.MINIMAL_CLASS\n        public Object obj;\n    }\n\n    public void example(String json) throws JsonMappingException {\n         ObjectMapper mapper = new ObjectMapper();\n         mapper.enableDefaultTyping();\n         mapper.readValue(json, ABean.class);\n    }\n\n    public void exampleTwo(String json) throws JsonMappingException {\n         ObjectMapper mapper = new ObjectMapper();\n         mapper.readValue(json, AnotherBean.class);\n    }\n\n}\n</pre>\n</p>\n\n<p>\n<b>References</b><br/>\n<a href=\"https://github.com/FasterXML/jackson-databind/issues/1599\">Jackson Deserializer security vulnerability</a><br>\n<a href=\"https://github.com/mbechler/marshalsec\">Java Unmarshaller Security - Turning your data into code execution</a><br>\n</p>\n\n    \n','2019-10-15 16:02:24'),(456,'PLAY_UNVALIDATED_REDIRECT',601,9,'\n      \n<p>\n    Unvalidated redirects occur when an application redirects a user to a destination URL specified by a user supplied\n    parameter that is not validated. Such vulnerabilities can be used to facilitate phishing attacks.\n</p>\n<p>\n    <b>Scenario</b><br/>\n    1. A user is tricked into visiting the malicious URL: <code>http://website.com/login?redirect=http://evil.vvebsite.com/fake/login</code><br/>\n    2. The user is redirected to a fake login page that looks like a site they trust. (<code>http://evil.vvebsite.com/fake/login</code>)<br/>\n    3. The user enters his credentials.<br/>\n    4. The evil site steals the user\'s credentials and redirects him to the original website.<br/>\n    <br/>\n    This attack is plausible because most users don\'t double check the URL after the redirection. Also, redirection to\n    an authentication page is very common.\n</p>\n<p>\n    <b>Vulnerable Code:</b></br/>\n    <pre>def login(redirectUrl:String) = Action {\n    [...]\n    Redirect(url)\n}</pre>\n</p>\n<p>\n    <b>Solution/Countermeasures:</b><br/>\n    <ul>\n        <li>Don\'t accept redirection destinations from users</li>\n        <li>Accept a destination key, and use it to look up the target (legal) destination</li>\n        <li>Accept only relative paths</li>\n        <li>White list URLs (if possible)</li>\n        <li>Validate that the beginning of the URL is part of a white list</li>\n    </ul>\n</p>\n<br/>\n<p>\n<b>References</b><br/>\n<a href=\"http://projects.webappsec.org/w/page/13246981/URL%20Redirector%20Abuse\">WASC-38: URL Redirector Abuse</a><br/>\n<a href=\"https://www.owasp.org/index.php/Top_10_2013-A10-Unvalidated_Redirects_and_Forwards\">OWASP: Top 10 2013-A10: Unvalidated Redirects and Forwards</a><br/>\n<a href=\"https://www.owasp.org/index.php/Unvalidated_Redirects_and_Forwards_Cheat_Sheet\">OWASP: Unvalidated Redirects and Forwards Cheat Sheet</a><br/>\n<a href=\"http://cwe.mitre.org/data/definitions/601.html\">CWE-601: URL Redirection to Untrusted Site (\'Open Redirect\')</a>\n</p>\n            \n    \n','2019-10-15 16:02:24'),(457,'SCALA_SENSITIVE_DATA_EXPOSURE',200,9,'\n      \n<p>\n    Applications can unintentionally leak information about their configuration, internal workings, or violate privacy through a\n    variety of application problems. <sup>[1]</sup> Pages that provide different responses based on the validity of the data can\n    lead to Information Leakage; specifically when data deemed confidential is being revealed as a result of the web application\'s\n    design. <sup>[2]</sup>\n</p>\n<p>\n    Examples of sensitive data includes (but is not limited to): API keys, passwords, product versions or environment configurations.\n</p>\n<p>\n<b>Code at risk:</b><br/>\n<pre>def doGet(value:String) = Action {\n  val configElement = configuration.underlying.getString(value)\n\n  Ok(\"Hello \"+ configElement +\" !\")\n}</pre>\n</p>\n<p>\n    Application configuration elements should not be sent in the response content and users should not be allowed to control which\n    configuration elements will be used by the code.\n</p>\n<b>References</b><br/>\n<a href=\"https://www.owasp.org/index.php/Top_10_2013-A6-Sensitive_Data_Exposure\">OWASP: Top 10 2013-A6-Sensitive Data Exposure</a><br/>\n[1] <a href=\"https://www.owasp.org/index.php/Top_10_2007-Information_Leakage_and_Improper_Error_Handling\">OWASP: Top 10 2007-Information Leakage and Improper Error Handling</a><br/>\n[2] <a href=\"http://projects.webappsec.org/w/page/13246936/Information%20Leakage\">WASC-13: Information Leakage</a><br/>\n<a href=\"https://cwe.mitre.org/data/definitions/200.html\">CWE-200: Information Exposure</a><br/>\n</p>\n            \n    \n','2019-10-15 16:02:24'),(458,'SCALA_PLAY_SSRF',918,9,'\n      \n<p>\n    Server-Side Request Forgery occur when a web server executes a request to a user supplied destination\n    parameter that is not validated. Such vulnerabilities could allow an attacker to access internal services\n    or to launch attacks from your web server.\n</p>\n<p>\n    <b>Vulnerable Code:</b>\n<pre>def doGet(value:String) = Action {\n    WS.url(value).get().map { response =>\n        Ok(response.body)\n    }\n}</pre>\n</p>\n<p>\n    <b>Solution/Countermeasures:</b><br/>\n    <ul>\n        <li>Don\'t accept request destinations from users</li>\n        <li>Accept a destination key, and use it to look up the target (legal) destination</li>\n        <li>White list URLs (if possible)</li>\n        <li>Validate that the beginning of the URL is part of a white list</li>\n    </ul>\n</p>\n<br/>\n<p>\n<b>References</b><br/>\n<a href=\"https://cwe.mitre.org/data/definitions/918.html\">CWE-918: Server-Side Request Forgery (SSRF)</a><br/>\n<a href=\"https://www.bishopfox.com/blog/2015/04/vulnerable-by-design-understanding-server-side-request-forgery/\">Understanding Server-Side Request Forgery</a><br/>\n</p>\n            \n','2019-10-15 16:02:24'),(459,'URLCONNECTION_SSRF_FD',918,9,'\n      \n<p>\n    Server-Side Request Forgery occur when a web server executes a request to a user supplied destination\n    parameter that is not validated. Such vulnerabilities could allow an attacker to access internal services\n    or to launch attacks from your web server.\n</p>\n<p>\n    URLConnection can be used with file:// protocol or other protocols to access local filesystem and potentially other services.\n<p>\n    <b>Vulnerable Code:</b>\n<pre>\nnew URL(String url).openConnection()\nnew URL(String url).openStream()\nnew URL(String url).getContent()\n</pre>\n</p>\n<p>\n    <b>Solution/Countermeasures:</b><br/>\n    <ul>\n        <li>Don\'t accept URL destinations from users</li>\n        <li>Accept a destination key, and use it to look up the target (legal) destination</li>\n        <li>White list URLs (if possible)</li>\n        <li>Validate that the beginning of the URL is part of a white list</li>\n    </ul>\n</p>\n<br/>\n<p>\n<b>References</b><br/>\n<a href=\"https://cwe.mitre.org/data/definitions/918.html\">CWE-918: Server-Side Request Forgery (SSRF)</a><br/>\n<a href=\"https://www.bishopfox.com/blog/2015/04/vulnerable-by-design-understanding-server-side-request-forgery/\">Understanding Server-Side Request Forgery</a><br/>\n<a href=\"https://cwe.mitre.org/data/definitions/73.html\">CWE-73: External Control of File Name or Path</a><br/>\n<a href=\"https://www.pwntester.com/blog/2013/11/28/abusing-jar-downloads/\">Abusing jar:// downloads</a><br />\n</p>\n            \n','2019-10-15 16:02:24'),(460,'SCALA_XSS_MVC_API',79,9,'\n      \n<p>\nA potential XSS was found. It could be used to execute unwanted JavaScript in a client\'s browser. (See references)\n</p>\n<p>\n    <b>Vulnerable Code:</b>\n<pre>def doGet(value:String) = Action {\n    Ok(\"Hello \" + value + \" !\").as(\"text/html\")\n  }</pre>\n</p>\n<p>\n    <b>Solution:</b>\n<pre>def doGet(value:String) = Action {\n    Ok(\"Hello \" + Encode.forHtml(value) + \" !\")\n  }</pre>\n</p>\n<p>\nThe best defense against XSS is context sensitive output encoding like the example above. There are typically 4 contexts to consider:\nHTML, JavaScript, CSS (styles), and URLs. Please follow the XSS protection rules defined in the OWASP XSS Prevention Cheat Sheet,\nwhich explains these defenses in significant detail.\n</p>\n<br/>\n<p>\n<b>References</b><br/>\n<a href=\"http://projects.webappsec.org/w/page/13246920/Cross%20Site%20Scripting\">WASC-8: Cross Site Scripting</a><br/>\n<a href=\"https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet\">OWASP: XSS Prevention Cheat Sheet</a><br/>\n<a href=\"https://www.owasp.org/index.php/Top_10_2013-A3-Cross-Site_Scripting_%28XSS%29\">OWASP: Top 10 2013-A3: Cross-Site Scripting (XSS)</a><br/>\n<a href=\"http://cwe.mitre.org/data/definitions/79.html\">CWE-79: Improper Neutralization of Input During Web Page Generation (\'Cross-site Scripting\')</a><br/>\n<a href=\"https://code.google.com/p/owasp-java-encoder/\">OWASP Java Encoder</a><br/>\n</p>\n            \n    \n','2019-10-15 16:02:24'),(461,'SCALA_XSS_TWIRL',79,9,'\n      \n<p>\nA potential XSS was found. It could be used to execute unwanted JavaScript in a client\'s browser. (See references)\n</p>\n<p>\n    <b>Vulnerable Code:</b>\n<pre>@(value: Html)\n\n@value</pre>\n</p>\n<p>\n    <b>Solution:</b>\n<pre>@(value: String)\n\n@value</pre>\n</p>\n<p>\nThe best defense against XSS is context sensitive output encoding like the example above. There are typically 4 contexts to consider:\nHTML, JavaScript, CSS (styles), and URLs. Please follow the XSS protection rules defined in the OWASP XSS Prevention Cheat Sheet,\nwhich explains these defenses in significant detail.\n</p>\n<br/>\n<p>\n<b>References</b><br/>\n<a href=\"http://projects.webappsec.org/w/page/13246920/Cross%20Site%20Scripting\">WASC-8: Cross Site Scripting</a><br/>\n<a href=\"https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet\">OWASP: XSS Prevention Cheat Sheet</a><br/>\n<a href=\"https://www.owasp.org/index.php/Top_10_2013-A3-Cross-Site_Scripting_%28XSS%29\">OWASP: Top 10 2013-A3: Cross-Site Scripting (XSS)</a><br/>\n<a href=\"http://cwe.mitre.org/data/definitions/79.html\">CWE-79: Improper Neutralization of Input During Web Page Generation (\'Cross-site Scripting\')</a><br/>\n<a href=\"https://code.google.com/p/owasp-java-encoder/\">OWASP Java Encoder</a><br/>\n</p>\n            \n    \n','2019-10-15 16:02:24'),(462,'JAXRS_ENDPOINT',0,9,'\n      \n<p>This method is part of a REST Web Service (JSR311).</p>\n<p>\n<b>The security of this web service should be analyzed. For example:</b>\n<ul>\n<li>Authentication, if enforced, should be tested.</li>\n<li>Access control, if enforced, should be tested.</li>\n<li>The inputs should be tracked for potential vulnerabilities.</li>\n<li>The communication should ideally be over SSL.</li>\n<li>If the service supports writes (e.g., via POST), its vulnerability to CSRF should be investigated.<sup>[1]</sup></li>\n</ul>\n</p>\n<br/>\n<p>\n<b>References</b><br/>\n<a href=\"https://www.owasp.org/index.php/REST_Assessment_Cheat_Sheet\">OWASP: REST Assessment Cheat Sheet</a><br/>\n<a href=\"https://www.owasp.org/index.php/REST_Security_Cheat_Sheet\">OWASP: REST Security Cheat Sheet</a><br/>\n<a href=\"https://www.owasp.org/index.php/Web_Service_Security_Cheat_Sheet\">OWASP: Web Service Security Cheat Sheet</a><br/>\n1. <a href=\"https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)\">OWASP: Cross-Site Request Forgery</a><br/>\n<a href=\"https://www.owasp.org/index.php/Cross-Site_Request_Forgery_%28CSRF%29_Prevention_Cheat_Sheet\">OWASP: CSRF Prevention Cheat Sheet</a><br/>\n<a href=\"http://cwe.mitre.org/data/definitions/20.html\">CWE-20: Improper Input Validation</a>\n</p>\n\n    \n','2019-10-15 16:02:24'),(463,'JAXWS_ENDPOINT',0,9,'\n      \n<p>This method is part of a SOAP Web Service (JSR224).</p>\n<p>\n<b>The security of this web service should be analyzed. For example:</b>\n<ul>\n<li>Authentication, if enforced, should be tested.</li>\n<li>Access control, if enforced, should be tested.</li>\n<li>The inputs should be tracked for potential vulnerabilities.</li>\n<li>The communication should ideally be over SSL.</li>\n</ul>\n</p>\n<br/>\n<p>\n<b>References</b><br/>\n<a href=\"https://www.owasp.org/index.php/Web_Service_Security_Cheat_Sheet\">OWASP: Web Service Security Cheat Sheet</a><br/>\n<a href=\"http://cwe.mitre.org/data/definitions/20.html\">CWE-20: Improper Input Validation</a>\n</p>\n\n    \n','2019-10-15 16:02:24'),(464,'SERVLET_PARAMETER',0,9,'\n      \n<p>The Servlet can read GET and POST parameters from various methods. The value obtained should be considered unsafe.\nYou may need to validate or sanitize those values before passing them to sensitive APIs such as:</p>\n<ul>\n<li>SQL query (May lead to SQL injection)</li>\n<li>File opening (May lead to path traversal)</li>\n<li>Command execution (Potential Command injection)</li>\n<li>HTML construction (Potential XSS)</li>\n<li>etc...</li>\n</ul>\n\n<br/>\n<p>\n<b>Reference</b><br/>\n<a href=\"http://cwe.mitre.org/data/definitions/20.html\">CWE-20: Improper Input Validation</a>\n</p>\n\n    \n','2019-10-15 16:02:24'),(465,'SERVLET_CONTENT_TYPE',0,9,'\n      \n<p>\nThe HTTP header Content-Type can be controlled by the client. As such, its value should not be used in any security critical decisions.\n</p>\n<br/>\n<p>\n<b>Reference</b><br/>\n<a href=\"http://cwe.mitre.org/data/definitions/807.html\">CWE-807: Untrusted Inputs in a Security Decision</a>\n</p>\n\n    \n','2019-10-15 16:02:24'),(466,'SERVLET_SERVER_NAME',0,9,'\n      \n<p>The hostname header can be controlled by the client. As such, its value should not be used in any security critical decisions.\nBoth <code>ServletRequest.getServerName()</code> and <code>HttpServletRequest.getHeader(\"Host\")</code> have the same\nbehavior which is to extract the <code>Host</code> header.</p>\n<pre>\nGET /testpage HTTP/1.1\nHost: www.example.com\n[...]</pre>\n<p>\nThe web container serving your application may redirect requests to your application by default. This would allow\na malicious user to place any value in the Host header. It is recommended that you do not trust this value in any security\ndecisions you make with respect to a request.\n</p>\n<br/>\n<p>\n<b>Reference</b><br/>\n<a href=\"http://cwe.mitre.org/data/definitions/807.html\">CWE-807: Untrusted Inputs in a Security Decision</a>\n</p>\n\n    \n','2019-10-15 16:02:24'),(467,'SERVLET_SESSION_ID',0,9,'\n      \n<p>\nThe method <a href=\"http://docs.oracle.com/javaee/6/api/javax/servlet/http/HttpServletRequest.html#getRequestedSessionId()\"><code>HttpServletRequest.getRequestedSessionId()</code></a>\ntypically returns the value of the cookie <code>JSESSIONID</code>. This value is normally only accessed by the session management logic and not normal developer code.\n</p>\n<p>\nThe value passed to the client is generally an alphanumeric value (e.g., <code>JSESSIONID=jp6q31lq2myn</code>). However, the value can be altered by the client.\nThe following HTTP request illustrates the potential modification.\n<pre>\nGET /somePage HTTP/1.1\nHost: yourwebsite.com\nUser-Agent: Mozilla/5.0\nCookie: JSESSIONID=Any value of the user&#39;s choice!!??\'\'\'&quot;&gt;\n</pre>\n</p>\n<p>As such, the JSESSIONID should only be used to see if its value matches an existing session ID. If it does not, the user should be\nconsidered an unauthenticated user. In addition, the session ID value should never be logged. If it is, then the log file could contain\nvalid active session IDs, allowing an insider to hijack any sessions whose IDs have been logged and are still active.\n</p>\n<br/>\n<p>\n<b>References</b><br/>\n<a href=\"https://www.owasp.org/index.php/Session_Management_Cheat_Sheet\">OWASP: Session Management Cheat Sheet</a><br/>\n<a href=\"http://cwe.mitre.org/data/definitions/20.html\">CWE-20: Improper Input Validation</a>\n\n</p>\n\n    \n','2019-10-15 16:02:24'),(468,'SERVLET_QUERY_STRING',0,9,'\n      \n<p>The query string is the concatenation of the GET parameter names and values. Parameters other than those intended can\nbe passed in.</p>\n<p>For the URL request <code>/app/servlet.htm?a=1&b=2</code>, the query string extract will be <code>a=1&b=2</code></p>\n<p>Just as is true for individual parameter values retrieved via methods like <code>HttpServletRequest.getParameter()</code>,\nthe value obtained from <code>HttpServletRequest.getQueryString()</code> should be considered unsafe.\nYou may need to validate or sanitize anything pulled from the query string before passing it to sensitive APIs.\n</p>\n<br/>\n<p>\n<b>Reference</b><br/>\n<a href=\"http://cwe.mitre.org/data/definitions/20.html\">CWE-20: Improper Input Validation</a>\n</p>\n\n    \n','2019-10-15 16:02:24'),(469,'SERVLET_HEADER',0,9,'\n      \n<p>Request headers can easily be altered by the requesting user. In general, no assumption should be made that\nthe request came from a regular browser without modification by an attacker. As such, it is recommended that you\nnot trust this value in any security decisions you make with respect to a request.</p>\n<br/>\n<p>\n<b>Reference</b><br/>\n<a href=\"http://cwe.mitre.org/data/definitions/807.html\">CWE-807: Untrusted Inputs in a Security Decision</a>\n</p>\n\n    \n','2019-10-15 16:02:24'),(470,'SERVLET_HEADER_REFERER',0,9,'\n      \n<p>\nBehavior:\n<ul>\n<li>Any value can be assigned to this header if the request is coming from a malicious user.</li>\n<li>The \"Referer\" will not be present if the request was initiated from another origin that is secure (https).</li>\n</ul>\n</p>\n<p>\nRecommendations:\n<ul>\n<li>No access control should be based on the value of this header.</li>\n<li>No CSRF protection should be based only on this value (<a href=\"http://www.w3.org/Protocols/HTTP/HTRQ_Headers.html#z14\">because it is optional</a>).</li>\n</ul>\n</p>\n<br/>\n<p>\n<b>Reference</b><br/>\n<a href=\"http://cwe.mitre.org/data/definitions/807.html\">CWE-807: Untrusted Inputs in a Security Decision</a>\n</p>\n\n    \n','2019-10-15 16:02:24'),(471,'SERVLET_HEADER_USER_AGENT',0,9,'\n      \n<p>The header \"User-Agent\" can easily be spoofed by the client. Adopting different behaviors based on the User-Agent (for\ncrawler UA) is not recommended.</p>\n<br/>\n<p>\n<b>Reference</b><br/>\n<a href=\"http://cwe.mitre.org/data/definitions/807.html\">CWE-807: Untrusted Inputs in a Security Decision</a>\n</p>\n\n    \n','2019-10-15 16:02:24'),(472,'STRUTS1_ENDPOINT',0,9,'\n      \n<p>This class is a Struts 1 Action.</p>\n<p>Once a request is routed to this controller, a Form object will automatically be instantiated that contains the HTTP parameters.\nThe use of these parameters should be reviewed to make sure they are used safely.</p>\n\n    \n','2019-10-15 16:02:24'),(473,'STRUTS2_ENDPOINT',0,9,'\n      \n<p>In Struts 2, the endpoints are Plain Old Java Objects (POJOs) which means no Interface/Class needs to be implemented/extended.</p>\n<p>When a request is routed to its controller (like the selected class), the supplied HTTP parameters are automatically mapped to setters for\nthe class. Therefore, all setters of this class should be considered as untrusted input even if the form doesn\'t include those values.\nAn attacker can simply provide additional values in the request, and they will be set in the object anyway, as long as that object has\nsuch a setter. The use of these parameters should be reviewed to make sure they are used safely.</p>\n\n    \n','2019-10-15 16:02:24'),(474,'SPRING_ENDPOINT',0,9,'\n      \n<p>This class is a Spring Controller. All methods annotated with <code>RequestMapping</code> (as well as its shortcut annotations <code>GetMapping</code>, <code>PostMapping</code>, <code>PutMapping</code>, <code>DeleteMapping</code>, and <code>PatchMapping</code>) are reachable remotely.\nThis class should be analyzed to make sure that remotely exposed methods are safe to expose to potential attackers.</p>\n\n    \n','2019-10-15 16:02:24'),(475,'TAPESTRY_ENDPOINT',0,9,'\n      \n<p>A Tapestry endpoint was discovered at application startup. Tapestry apps are structured with a backing Java class and a corresponding\nTapestry Markup Language page (a .tml file) for each page. When a request is received, the GET/POST parameters are mapped to specific\ninputs in the backing Java class. The mapping is either done with fieldName:</p>\n<pre><code>\n    [...]\n    protected String input;\n    [...]\n</code></pre>\n<p>or the definition of an explicit annotation:\n</p>\n<pre><code>\n    [...]\n    @org.apache.tapestry5.annotations.Parameter\n    protected String parameter1;\n\n    @org.apache.tapestry5.annotations.Component(id = \"password\")\n    private PasswordField passwordField;\n    [...]\n</code></pre>\n<p>The page is mapped to the view <code>[/resources/package/PageName].tml.</code></p>\n<p>Each Tapestry page in this application should be researched to make sure all inputs that are automatically\nmapped in this way are properly validated before they are used.</p>\n<br/>\n<p>\n<b>References</b><br/>\n<a href=\"http://tapestry.apache.org/\">Apache Tapestry Home Page</a><br/>\n<a href=\"http://cwe.mitre.org/data/definitions/20.html\">CWE-20: Improper Input Validation</a>\n</p>\n\n    \n','2019-10-15 16:02:24'),(476,'WICKET_ENDPOINT',0,9,'\n      \n<p>This class represents a Wicket WebPage. Input is automatically read from a PageParameters instance passed to the constructor.\nThe current page is mapped to the view [/package/WebPageName].html.</p>\n<p>Each Wicket page in this application should be researched to make sure all inputs that are automatically\nmapped in this way are properly validated before they are used.</p>\n<br/>\n<p>\n<b>References</b><br/>\n<a href=\"https://wicket.apache.org/\">Apache Wicket Home Page</a><br/>\n<a href=\"http://cwe.mitre.org/data/definitions/20.html\">CWE-20: Improper Input Validation</a>\n</p>\n\n    \n','2019-10-15 16:02:24'),(477,'ANDROID_EXTERNAL_FILE_ACCESS',276,9,'\n      \n<p>\n    The application write data to external storage (potentially SD card). There are multiple security implication to this\n    action. First, file store on SD card will be accessible to the application having the\n    <a href=\"http://developer.android.com/reference/android/Manifest.permission.html#READ_EXTERNAL_STORAGE\"><code>READ_EXTERNAL_STORAGE</code></a> permission.\n    Also, if the data persisted contains confidential information about the user, encryption would be needed.\n</p>\n<p>\n    <b>Code at risk:</b><br/>\n<pre>\nfile file = new File(getExternalFilesDir(TARGET_TYPE), filename);\nfos = new FileOutputStream(file);\nfos.write(confidentialData.getBytes());\nfos.flush();\n</pre>\n</p>\n<p>\n    <b>Better alternative:</b><br/>\n<pre>\nfos = openFileOutput(filename, Context.MODE_PRIVATE);\nfos.write(string.getBytes());\n</pre>\n</p>\n<br/>\n<p>\n    <b>References</b><br/>\n    <a href=\"http://developer.android.com/training/articles/security-tips.html#ExternalStorage\">Android Official Doc: Security Tips</a><br/>\n    <a href=\"https://www.securecoding.cert.org/confluence/display/java/DRD00-J.+Do+not+store+sensitive+information+on+external+storage+%28SD+card%29+unless+encrypted+first\">CERT: DRD00-J: Do not store sensitive information on external storage [...]</a><br/>\n    <a href=\"http://developer.android.com/guide/topics/data/data-storage.html#filesExternal\">Android Official Doc: Using the External Storage</a><br/>\n    <a href=\"https://www.owasp.org/index.php/Mobile_Top_10_2014-M2\">OWASP Mobile Top 10 2014-M2: Insecure Data Storage</a><br/>\n    <a href=\"https://cwe.mitre.org/data/definitions/312.html\">CWE-312: Cleartext Storage of Sensitive Information</a>\n</p>\n\n    \n','2019-10-15 16:02:24'),(478,'ANDROID_BROADCAST',276,9,'\n      \n<p>\n    Broadcast intents can be listen by any application with the appropriate permission. It is suggested to avoid transmitting\n    sensitive information when possible.\n</p>\n<p>\n    <b>Code at risk:</b><br/>\n<pre>\nIntent i = new Intent();\ni.setAction(\"com.insecure.action.UserConnected\");\ni.putExtra(\"username\", user);\ni.putExtra(\"email\", email);\ni.putExtra(\"session\", newSessionId);\n\nthis.sendBroadcast(v1);\n</pre>\n</p>\n<br/>\n<p>\n    <b>Solution (if possible):</b><br/>\n<pre>\nIntent i = new Intent();\ni.setAction(\"com.secure.action.UserConnected\");\n\nsendBroadcast(v1);\n</pre>\n</p>\n<br/>\n<p>\n    <b>Configuration (receiver)<sup>[1] Source: StackOverflow</sup>:</b><br/>\n<pre>\n&lt;manifest ...&gt;\n\n    &lt;!-- Permission declaration --&gt;\n    &lt;permission android:name=\"my.app.PERMISSION\" /&gt;\n\n    &lt;receiver\n        android:name=\"my.app.BroadcastReceiver\"\n        android:permission=\"my.app.PERMISSION\"&gt; &lt;!-- Permission enforcement --&gt;\n        &lt;intent-filter>\n            &lt;action android:name=\"com.secure.action.UserConnected\" /&gt;\n        &lt;/intent-filter&gt;\n    &lt;/receiver&gt;\n\n    ...\n&lt;/manifest>\n</pre>\n</p>\n<p>\n    <b>Configuration (sender)<sup>[1] Source: StackOverflow</sup>:</b><br/>\n<pre>\n&lt;manifest&gt;\n    &lt;!-- We declare we own the permission to send broadcast to the above receiver --&gt;\n    &lt;uses-permission android:name=\"my.app.PERMISSION\"/&gt;\n\n    &lt;!-- With the following configuration, both the sender and the receiver apps need to be signed by the same developer certificate. --&gt;\n    &lt;permission android:name=\"my.app.PERMISSION\" android:protectionLevel=\"signature\"/&gt;\n&lt;/manifest&gt;\n</pre>\n</p>\n<br/>\n<p>\n    <b>References</b><br/>\n    <a href=\"https://www.securecoding.cert.org/confluence/display/java/DRD03-J.+Do+not+broadcast+sensitive+information+using+an+implicit+intent\">CERT: DRD03-J. Do not broadcast sensitive information using an implicit intent</a><br/>\n    <a href=\"http://developer.android.com/reference/android/content/BroadcastReceiver.html#Security\">Android Official Doc: BroadcastReceiver (Security)</a><br/>\n    <a href=\"http://developer.android.com/guide/topics/manifest/receiver-element.html\">Android Official Doc: Receiver configuration (see <code>android:permission</code>)</a><br/>\n    <sup>[1]</sup> <a href=\"http://stackoverflow.com/a/21513368/89769\">StackOverflow: How to set permissions in broadcast sender and receiver in android</a><br/>\n    <a href=\"https://cwe.mitre.org/data/definitions/925.html\">CWE-925: Improper Verification of Intent by Broadcast Receiver</a><br/>\n    <a href=\"https://cwe.mitre.org/data/definitions/927.html\">CWE-927: Use of Implicit Intent for Sensitive Communication</a>\n</p>\n\n    \n','2019-10-15 16:02:24'),(479,'ANDROID_WORLD_WRITABLE',276,9,'\n      \n<p>\n    The file written in this context is using the creation mode <code>MODE_WORLD_READABLE</code>. It might not be the\n    expected behavior to exposed the content being written.\n</p>\n<p>\n    <b>Code at risk:</b><br/>\n<pre>\nfos = openFileOutput(filename, MODE_WORLD_READABLE);\nfos.write(userInfo.getBytes());\n</pre>\n</p>\n<br/>\n<p>\n    <b>Solution (using MODE_PRIVATE):</b><br/>\n<pre>\nfos = openFileOutput(filename, MODE_PRIVATE);\n</pre>\n</p>\n<p>\n    <b>Solution (using local SQLite Database):</b><br/>\n\nUsing a local SQLite database is probably the best solution to store structured data. Make sure the database file is not\ncreate on external storage. See references below for implementation guidelines.\n</p>\n<br/>\n<p>\n    <b>References</b><br/>\n    <a href=\"https://www.securecoding.cert.org/confluence/display/java/DRD11-J.+Ensure+that+sensitive+data+is+kept+secure\">CERT: DRD11-J. Ensure that sensitive data is kept secure</a><br/>\n    <a href=\"http://developer.android.com/training/articles/security-tips.html#InternalStorage\">Android Official Doc: Security Tips</a><br/>\n    <a href=\"http://developer.android.com/reference/android/content/Context.html#MODE_PRIVATE\">Android Official Doc: Context.MODE_PRIVATE</a><br/>\n    <a href=\"http://www.vogella.com/tutorials/AndroidSQLite/article.html#databasetutorial_database\">vogella.com: Android SQLite database and content provider - Tutorial</a><br/>\n    <a href=\"https://www.owasp.org/index.php/Mobile_Top_10_2014-M2\">OWASP Mobile Top 10 2014-M2: Insecure Data Storage</a><br/>\n    <a href=\"https://cwe.mitre.org/data/definitions/312.html\">CWE-312: Cleartext Storage of Sensitive Information</a>\n</p>\n\n    \n','2019-10-15 16:02:24'),(480,'ANDROID_GEOLOCATION',0,9,'\n      \n<p>\n    It is suggested to ask the user for a confirmation about obtaining its geolocation.\n</p>\n<p>\n    <b>Code at risk:</b><br/>\n<pre>\nwebView.setWebChromeClient(new WebChromeClient() {\n    @Override\n    public void onGeolocationPermissionsShowPrompt(String origin, GeolocationPermissions.Callback callback) {\n        callback.invoke(origin, true, false);\n    }\n});\n</pre>\n</p>\n<p>\n    <b>Suggested code:</b><br/>\n\n    Limit the sampling of geolocation and ask the user for confirmation.\n<pre>\nwebView.setWebChromeClient(new WebChromeClient() {\n    @Override\n    public void onGeolocationPermissionsShowPrompt(String origin, GeolocationPermissions.Callback callback) {\n        callback.invoke(origin, true, false);\n\n        //Ask the user for confirmation\n    }\n});\n</pre>\n</p>\n<br/>\n<p>\n    <b>References</b><br/>\n    <a href=\"https://www.securecoding.cert.org/confluence/display/java/DRD15-J.+Consider+privacy+concerns+when+using+Geolocation+API\">CERT: DRD15-J. Consider privacy concerns when using Geolocation API</a><br/>\n    <a href=\"http://en.wikipedia.org/wiki/W3C_Geolocation_API\">Wikipedia: W3C Geolocation API</a><br/>\n    <a href=\"http://dev.w3.org/geo/api/spec-source.html\">W3C: Geolocation Specification</a><br/>\n</p>\n\n    \n','2019-10-15 16:02:24'),(481,'ANDROID_WEB_VIEW_JAVASCRIPT',79,9,'\n      \n<p>\n    Enabling JavaScript for the WebView means that it is now susceptible to XSS. The page render should be inspected\n    for potential reflected XSS, stored XSS and DOM XSS.<br/>\n<pre>\nWebView myWebView = (WebView) findViewById(R.id.webView);\nWebSettings webSettings = myWebView.getSettings();\nwebSettings.setJavaScriptEnabled(true);\n</pre>\n</p>\n\n<p>\n    <b>Code at risk:</b><br/>\nEnabling JavaScript is not a bad practice. It just means that the backend code need to be audited for potential XSS.\nThe XSS can also be introduce client-side with DOM XSS.\n<pre>\nfunction updateDescription(newDescription) {\n    $(\"#userDescription\").html(\"&lt;p&gt;\"+newDescription+\"&lt;/p&gt;\");\n}\n</pre>\n</p>\n<br/>\n<p>\n    <b>References</b><br/>\n    <a href=\"http://www.technotalkative.com/issue-using-setjavascriptenabled-can-introduce-xss-vulnerabilities-application-review-carefully/\">Issue: Using setJavaScriptEnabled can introduce XSS vulnerabilities</a><br/>\n    <a href=\"http://developer.android.com/guide/webapps/webview.html#UsingJavaScript\">Android Official Doc: WebView</a><br/>\n    <a href=\"http://projects.webappsec.org/w/page/13246920/Cross%20Site%20Scripting\">WASC-8: Cross Site Scripting</a><br/>\n    <a href=\"https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet\">OWASP: XSS Prevention Cheat Sheet</a><br/>\n    <a href=\"https://www.owasp.org/index.php/Top_10_2013-A3-Cross-Site_Scripting_%28XSS%29\">OWASP: Top 10 2013-A3: Cross-Site Scripting (XSS)</a><br/>\n    <a href=\"http://cwe.mitre.org/data/definitions/79.html\">CWE-79: Improper Neutralization of Input During Web Page Generation (\'Cross-site Scripting\')</a>\n</p>\n\n    \n','2019-10-15 16:02:24'),(482,'ANDROID_WEB_VIEW_JAVASCRIPT_INTERFACE',285,9,'\n      \n<p>\n    The use of JavaScript Interface could expose the WebView to risky API. If an XSS is triggered in the WebView, the class\n    could be called by the malicious JavaScript code.\n</p>\n\n<p>\n    <b>Code at risk:</b><br/>\n    <pre>\nWebView myWebView = (WebView) findViewById(R.id.webView);\n\nmyWebView.addJavascriptInterface(new FileWriteUtil(this), \"fileWriteUtil\");\n\nWebSettings webSettings = myWebView.getSettings();\nwebSettings.setJavaScriptEnabled(true);\n\n[...]\nclass FileWriteUtil {\n    Context mContext;\n\n    FileOpenUtil(Context c) {\n        mContext = c;\n    }\n\n    public void writeToFile(String data, String filename, String tag) {\n        [...]\n    }\n}\n    </pre>\n</p>\n<br/>\n<p>\n    <b>References</b><br/>\n    <a href=\"http://developer.android.com/reference/android/webkit/WebView.html#addJavascriptInterface%28java.lang.Object,%20java.lang.String%29\">Android Official Doc: WebView.addJavascriptInterface()</a><br/>\n    <a href=\"https://cwe.mitre.org/data/definitions/749.html\">CWE-749: Exposed Dangerous Method or Function</a>\n</p>\n\n    \n','2019-10-15 16:02:24'),(483,'SQL_INJECTION_ANDROID',89,9,'\n      \n<p>\nThe input values included in SQL queries need to be passed in safely.\nBind variables in prepared statements can be used to easily mitigate the risk of SQL injection.\n</p>\n\n<p>\n    <b>Vulnerable Code:</b><br/>\n    <pre>String query = \"SELECT * FROM  messages WHERE uid= \'\"+userInput+\"\'\" ;\nCursor cursor = this.getReadableDatabase().rawQuery(query,null);</pre>\n</p>\n<p>\n    <b>Solution:</b><br/>\n    <pre>String query = \"SELECT * FROM  messages WHERE uid= ?\" ;\nCursor cursor = this.getReadableDatabase().rawQuery(query,new String[] {userInput});</pre>\n</p>\n<br/>\n\n<b>References (Android SQLite)</b><br/>\n<a href=\"http://www.informit.com/articles/article.aspx?p=2268753&seqNum=5\">InformIT.com: Practical Advice for Building Secure Android Databases in SQLite</a><br/>\n<a href=\"https://www.packtpub.com/books/content/knowing-sql-injection-attacks-and-securing-our-android-applications-them\">Packtpub.com: Knowing the SQL-injection attacks and securing our Android applications from them</a><br/>\n<a href=\"https://books.google.ca/books?id=SXlMAQAAQBAJ&lpg=PR1&pg=PA64#v=onepage&q&f=false\">Android Database Support (Enterprise Android: Programming Android Database Applications for the Enterprise)</a><br/>\n<a href=\"https://stackoverflow.com/a/29797229/89769\">Safe example of Insert, Select, Update and Delete queryies provided by Suragch</a><br/>\n\n<b>References (SQL injection)</b><br/>\n<a href=\"http://projects.webappsec.org/w/page/13246963/SQL%20Injection\">WASC-19: SQL Injection</a><br/>\n<a href=\"http://capec.mitre.org/data/definitions/66.html\">CAPEC-66: SQL Injection</a><br/>\n<a href=\"http://cwe.mitre.org/data/definitions/89.html\">CWE-89: Improper Neutralization of Special Elements used in an SQL Command (\'SQL Injection\')</a><br/>\n<a href=\"https://www.owasp.org/index.php/Top_10_2013-A1-Injection\">OWASP: Top 10 2013-A1-Injection</a><br/>\n<a href=\"https://www.owasp.org/index.php/SQL_Injection_Prevention_Cheat_Sheet\">OWASP: SQL Injection Prevention Cheat Sheet</a><br/>\n<a href=\"https://www.owasp.org/index.php/Query_Parameterization_Cheat_Sheet\">OWASP: Query Parameterization Cheat Sheet</a><br/>\n</p>\n\n    \n','2019-10-15 16:02:24'),(484,'CAA_COVARIANT_ARRAY_FIELD',0,10,'\n\n<p>Array of covariant type is assigned to a field. This is confusing and may lead to ArrayStoreException at runtime\nif the reference of some other type will be stored in this array later like in the following code:\n</p>\n<pre><code>Number[] arr = new Integer[10];\narr[0] = 1.0;\n</code></pre>\n<p>Consider changing the type of created array or the field type.</p>\n\n    \n','2019-10-15 16:02:24'),(485,'CAA_COVARIANT_ARRAY_RETURN',0,10,'\n\n<p>Array of covariant type is returned from the method. This is confusing and may lead to ArrayStoreException at runtime\nif the calling code will try to store the reference of some other type in the returned array.\n</p>\n<p>Consider changing the type of created array or the method return type.</p>\n\n    \n','2019-10-15 16:02:24'),(486,'CAA_COVARIANT_ARRAY_LOCAL',0,10,'\n\n<p>Array of covariant type is assigned to a local variable. This is confusing and may lead to ArrayStoreException at runtime\nif the reference of some other type will be stored in this array later like in the following code:\n</p>\n<pre><code>Number[] arr = new Integer[10];\narr[0] = 1.0;\n</code></pre>\n<p>Consider changing the type of created array or the local variable type.</p>\n\n    \n','2019-10-15 16:02:24'),(487,'DMI_UNSUPPORTED_METHOD',0,10,'\n      \n    <p>All targets of this method invocation throw an UnsupportedOperationException.\n</p>\n\n\n    \n','2019-10-15 16:02:24'),(488,'DMI_THREAD_PASSED_WHERE_RUNNABLE_EXPECTED',0,10,'\n\n  <p> A Thread object is passed as a parameter to a method where\na Runnable is expected. This is rather unusual, and may indicate a logic error\nor cause unexpected behavior.\n   </p>\n\n    \n','2019-10-15 16:02:24'),(489,'NP_DEREFERENCE_OF_READLINE_VALUE',0,10,'\n\n  <p> The result of invoking readLine() is dereferenced without checking to see if the result is null. If there are no more lines of text\nto read, readLine() will return null and dereferencing that will generate a null pointer exception.\n</p>\n\n    \n','2019-10-15 16:02:24'),(490,'NP_IMMEDIATE_DEREFERENCE_OF_READLINE',0,10,'\n\n  <p> The result of invoking readLine() is immediately dereferenced. If there are no more lines of text\nto read, readLine() will return null and dereferencing that will generate a null pointer exception.\n</p>\n\n    \n','2019-10-15 16:02:24'),(491,'RV_REM_OF_RANDOM_INT',0,10,'\n\n<p> This code generates a random signed integer and then computes\nthe remainder of that value modulo another value. Since the random\nnumber can be negative, the result of the remainder operation\ncan also be negative. Be sure this is intended, and strongly\nconsider using the Random.nextInt(int) method instead.\n</p>\n\n    \n','2019-10-15 16:02:24'),(492,'RV_REM_OF_HASHCODE',0,10,'\n\n<p> This code computes a hashCode, and then computes\nthe remainder of that value modulo another value. Since the hashCode\ncan be negative, the result of the remainder operation\ncan also be negative. </p>\n<p> Assuming you want to ensure that the result of your computation is nonnegative,\nyou may need to change your code.\nIf you know the divisor is a power of 2,\nyou can use a bitwise and operator instead (i.e., instead of\nusing <code>x.hashCode()%n</code>, use <code>x.hashCode()&amp;(n-1)</code>).\nThis is probably faster than computing the remainder as well.\nIf you don\'t know that the divisor is a power of 2, take the absolute\nvalue of the result of the remainder operation (i.e., use\n<code>Math.abs(x.hashCode()%n)</code>).\n</p>\n\n    \n','2019-10-15 16:02:24'),(493,'EQ_UNUSUAL',0,10,'\n\n  <p> This class doesn\'t do any of the patterns we recognize for checking that the type of the argument\nis compatible with the type of the <code>this</code> object. There might not be anything wrong with\nthis code, but it is worth reviewing.\n</p>\n\n    \n','2019-10-15 16:02:24'),(494,'EQ_DOESNT_OVERRIDE_EQUALS',0,10,'\n\n  <p> This class extends a class that defines an equals method and adds fields, but doesn\'t\ndefine an equals method itself. Thus, equality on instances of this class will\nignore the identity of the subclass and the added fields. Be sure this is what is intended,\nand that you don\'t need to override the equals method. Even if you don\'t need to override\nthe equals method, consider overriding it anyway to document the fact\nthat the equals method for the subclass just return the result of\ninvoking super.equals(o).\n  </p>\n\n    \n','2019-10-15 16:02:24'),(495,'NS_NON_SHORT_CIRCUIT',0,10,'\n\n  <p> This code seems to be using non-short-circuit logic (e.g., &amp;\nor |)\nrather than short-circuit logic (&amp;&amp; or ||).\nNon-short-circuit logic causes both sides of the expression\nto be evaluated even when the result can be inferred from\nknowing the left-hand side. This can be less efficient and\ncan result in errors if the left-hand side guards cases\nwhen evaluating the right-hand side can generate an error.\n\n<p>See <a href=\"https://docs.oracle.com/javase/specs/jls/se7/html/jls-15.html#jls-15.22.2\">the Java\nLanguage Specification</a> for details.\n\n</p>\n\n    \n','2019-10-15 16:02:24'),(496,'NS_DANGEROUS_NON_SHORT_CIRCUIT',0,10,'\n\n  <p> This code seems to be using non-short-circuit logic (e.g., &amp;\nor |)\nrather than short-circuit logic (&amp;&amp; or ||). In addition,\nit seem possible that, depending on the value of the left hand side, you might not\nwant to evaluate the right hand side (because it would have side effects, could cause an exception\nor could be expensive.</p>\n<p>\nNon-short-circuit logic causes both sides of the expression\nto be evaluated even when the result can be inferred from\nknowing the left-hand side. This can be less efficient and\ncan result in errors if the left-hand side guards cases\nwhen evaluating the right-hand side can generate an error.\n</p>\n\n<p>See <a href=\"https://docs.oracle.com/javase/specs/jls/se7/html/jls-15.html#jls-15.22.2\">the Java\nLanguage Specification</a> for details.\n\n</p>\n\n    \n','2019-10-15 16:02:24'),(497,'IC_INIT_CIRCULARITY',0,10,'\n\n  <p> A circularity was detected in the static initializers of the two\n  classes referenced by the bug instance.&nbsp; Many kinds of unexpected\n  behavior may arise from such circularity.</p>\n\n    \n','2019-10-15 16:02:24'),(498,'IA_AMBIGUOUS_INVOCATION_OF_INHERITED_OR_OUTER_METHOD',0,10,'\n\n  <p>\nAn inner class is invoking a method that could be resolved to either a inherited method or a method defined in an outer class.\nFor example, you invoke <code>foo(17)</code>, which is defined in both a superclass and in an outer method.\nBy the Java semantics,\nit will be resolved to invoke the inherited method, but this may not be what\nyou intend.\n</p>\n<p>If you really intend to invoke the inherited method,\ninvoke it by invoking the method on super (e.g., invoke super.foo(17)), and\nthus it will be clear to other readers of your code and to SpotBugs\nthat you want to invoke the inherited method, not the method in the outer class.\n</p>\n<p>If you call <code>this.foo(17)</code>, then the inherited method will be invoked. However, since SpotBugs only looks at\nclassfiles, it\ncan\'t tell the difference between an invocation of <code>this.foo(17)</code> and <code>foo(17)</code>, it will still\ncomplain about a potential ambiguous invocation.\n</p>\n\n    \n','2019-10-15 16:02:24'),(499,'SE_PRIVATE_READ_RESOLVE_NOT_INHERITED',0,10,'\n\n  <p> This class defines a private readResolve method. Since it is private, it won\'t be inherited by subclasses.\nThis might be intentional and OK, but should be reviewed to ensure it is what is intended.\n</p>\n\n    \n','2019-10-15 16:02:24'),(500,'SE_TRANSIENT_FIELD_OF_NONSERIALIZABLE_CLASS',0,10,'\n\n  <p> The field is marked as transient, but the class isn\'t Serializable, so marking it as transient\nhas absolutely no effect.\nThis may be leftover marking from a previous version of the code in which the class was transient, or\nit may indicate a misunderstanding of how serialization works.\n</p>\n\n    \n','2019-10-15 16:02:24'),(501,'SF_SWITCH_FALLTHROUGH',484,10,'\n\n  <p> This method contains a switch statement where one case branch will fall through to the next case.\n  Usually you need to end this case with a break or return.</p>\n\n    \n','2019-10-15 16:02:24'),(502,'SF_SWITCH_NO_DEFAULT',0,10,'\n\n  <p> This method contains a switch statement where default case is missing.\n  Usually you need to provide a default case.</p>\n  <p>Because the analysis only looks at the generated bytecode, this warning can be incorrect triggered if\nthe default case is at the end of the switch statement and the switch statement doesn\'t contain break statements for other\ncases.\n\n    \n','2019-10-15 16:02:24'),(503,'UUF_UNUSED_PUBLIC_OR_PROTECTED_FIELD',0,10,'\n\n  <p> This field is never used.&nbsp;\nThe field is public or protected, so perhaps\n    it is intended to be used with classes not seen as part of the analysis. If not,\nconsider removing it from the class.</p>\n\n    \n','2019-10-15 16:02:24'),(504,'URF_UNREAD_PUBLIC_OR_PROTECTED_FIELD',0,10,'\n\n  <p> This field is never read.&nbsp;\nThe field is public or protected, so perhaps\n    it is intended to be used with classes not seen as part of the analysis. If not,\nconsider removing it from the class.</p>\n\n    \n','2019-10-15 16:02:24'),(505,'QF_QUESTIONABLE_FOR_LOOP',0,10,'\n\n   <p>Are you sure this for loop is incrementing the correct variable?\n   It appears that another variable is being initialized and checked\n   by the for loop.\n</p>\n\n    \n','2019-10-15 16:02:24'),(506,'NP_UNWRITTEN_PUBLIC_OR_PROTECTED_FIELD',0,10,'\n\n  <p> The program is dereferencing a public or protected\nfield that does not seem to ever have a non-null value written to it.\nUnless the field is initialized via some mechanism not seen by the analysis,\ndereferencing this value will generate a null pointer exception.\n</p>\n\n    \n','2019-10-15 16:02:24'),(507,'UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR',0,10,'\n\n  <p> This field is never initialized within any constructor, and is therefore could be null after\nthe object is constructed. Elsewhere, it is loaded and dereferenced without a null check.\nThis could be a either an error or a questionable design, since\nit means a null pointer exception will be generated if that field is dereferenced\nbefore being initialized.\n</p>\n\n    \n','2019-10-15 16:02:24'),(508,'UWF_UNWRITTEN_PUBLIC_OR_PROTECTED_FIELD',0,10,'\n\n  <p> No writes were seen to this public/protected field.&nbsp; All reads of it will return the default\nvalue. Check for errors (should it have been initialized?), or remove it if it is useless.</p>\n\n    \n','2019-10-15 16:02:24'),(509,'UC_USELESS_VOID_METHOD',0,10,'\n\n<p>Our analysis shows that this non-empty void method does not actually perform any useful work.\nPlease check it: probably there\'s a mistake in its code or its body can be fully removed.\n</p>\n<p>We are trying to reduce the false positives as much as possible, but in some cases this warning might be wrong.\nCommon false-positive cases include:</p>\n<ul>\n<li>The method is intended to trigger loading of some class which may have a side effect.</li>\n<li>The method is intended to implicitly throw some obscure exception.</li>\n</ul>\n\n    \n','2019-10-15 16:02:24'),(510,'UC_USELESS_CONDITION',0,10,'\n\n<p>This condition always produces the same result as the value of the involved variable that was narrowed before.\nProbably something else was meant or the condition can be removed.</p>\n\n    \n','2019-10-15 16:02:24'),(511,'UC_USELESS_CONDITION_TYPE',0,10,'\n\n<p>This condition always produces the same result due to the type range of the involved variable.\nProbably something else was meant or the condition can be removed.</p>\n\n    \n','2019-10-15 16:02:24'),(512,'UC_USELESS_OBJECT',0,10,'\n\n<p>Our analysis shows that this object is useless.\nIt\'s created and modified, but its value never go outside of the method or produce any side-effect.\nEither there is a mistake and object was intended to be used or it can be removed.</p>\n<p>This analysis rarely produces false-positives. Common false-positive cases include:</p>\n<p>- This object used to implicitly throw some obscure exception.</p>\n<p>- This object used as a stub to generalize the code.</p>\n<p>- This object used to hold strong references to weak/soft-referenced objects.</p>\n\n    \n','2019-10-15 16:02:24'),(513,'UC_USELESS_OBJECT_STACK',0,10,'\n\n<p>This object is created just to perform some modifications which don\'t have any side-effect.\nProbably something else was meant or the object can be removed.</p>\n\n    \n','2019-10-15 16:02:24'),(514,'RV_RETURN_VALUE_IGNORED_INFERRED',0,10,'\n\n<p>This code calls a method and ignores the return value. The return value\nis the same type as the type the method is invoked on, and from our analysis it looks\nlike the return value might be important (e.g., like ignoring the\nreturn value of <code>String.toLowerCase()</code>).\n</p>\n<p>We are guessing that ignoring the return value might be a bad idea just from\na simple analysis of the body of the method. You can use a @CheckReturnValue annotation\nto instruct SpotBugs as to whether ignoring the return value of this method\nis important or acceptable.\n</p>\n<p>Please investigate this closely to decide whether it is OK to ignore the return value.\n</p>\n\n    \n','2019-10-15 16:02:24'),(515,'RV_RETURN_VALUE_IGNORED_NO_SIDE_EFFECT',0,10,'\n\n<p>This code calls a method and ignores the return value. However our analysis shows that\nthe method (including its implementations in subclasses if any) does not produce any effect\nother than return value. Thus this call can be removed.\n</p>\n<p>We are trying to reduce the false positives as much as possible, but in some cases this warning might be wrong.\nCommon false-positive cases include:</p>\n<p>- The method is designed to be overridden and produce a side effect in other projects which are out of the scope of the analysis.</p>\n<p>- The method is called to trigger the class loading which may have a side effect.</p>\n<p>- The method is called just to get some exception.</p>\n<p>If you feel that our assumption is incorrect, you can use a @CheckReturnValue annotation\nto instruct SpotBugs that ignoring the return value of this method is acceptable.\n</p>\n\n    \n','2019-10-15 16:02:24'),(516,'RV_CHECK_FOR_POSITIVE_INDEXOF',0,10,'\n\n   <p> The method invokes String.indexOf and checks to see if the result is positive or non-positive.\n   It is much more typical to check to see if the result is negative or non-negative. It is\n   positive only if the substring checked for occurs at some place other than at the beginning of\n   the String.</p>\n\n    \n','2019-10-15 16:02:24'),(517,'RV_DONT_JUST_NULL_CHECK_READLINE',0,10,'\n\n   <p> The value returned by readLine is discarded after checking to see if the return\nvalue is non-null. In almost all situations, if the result is non-null, you will want\nto use that non-null value. Calling readLine again will give you a different line.</p>\n\n    \n','2019-10-15 16:02:24'),(518,'NP_PARAMETER_MUST_BE_NONNULL_BUT_MARKED_AS_NULLABLE',0,10,'\n\n<p> This parameter is always used in a way that requires it to be non-null,\nbut the parameter is explicitly annotated as being Nullable. Either the use\nof the parameter or the annotation is wrong.\n</p>\n\n    \n','2019-10-15 16:02:24'),(519,'NP_NULL_ON_SOME_PATH_FROM_RETURN_VALUE',0,10,'\n      \n<p> The return value from a method is dereferenced without a null check,\nand the return value of that method is one that should generally be checked\nfor null.  This may lead to a <code>NullPointerException</code> when the code is executed.\n</p>\n      \n   \n','2019-10-15 16:02:24'),(520,'NP_NULL_ON_SOME_PATH_MIGHT_BE_INFEASIBLE',0,10,'\n\n<p> There is a branch of statement that, <em>if executed,</em>  guarantees that\na null value will be dereferenced, which\nwould generate a <code>NullPointerException</code> when the code is executed.\nOf course, the problem might be that the branch or statement is infeasible and that\nthe null pointer exception can\'t ever be executed; deciding that is beyond the ability of SpotBugs.\nDue to the fact that this value had been previously tested for nullness,\nthis is a definite possibility.\n</p>\n\n    \n','2019-10-15 16:02:24'),(521,'NP_LOAD_OF_KNOWN_NULL_VALUE',0,10,'\n\n  <p> The variable referenced at this point is known to be null due to an earlier\n   check against null. Although this is valid, it might be a mistake (perhaps you\nintended to refer to a different variable, or perhaps the earlier check to see if the\nvariable is null should have been a check to see if it was non-null).\n</p>\n\n    \n','2019-10-15 16:02:24'),(522,'PZLA_PREFER_ZERO_LENGTH_ARRAYS',0,10,'\n\n<p> It is often a better design to\nreturn a length zero array rather than a null reference to indicate that there\nare no results (i.e., an empty list of results).\nThis way, no explicit check for null is needed by clients of the method.</p>\n\n<p>On the other hand, using null to indicate\n\"there is no answer to this question\" is probably appropriate.\nFor example, <code>File.listFiles()</code> returns an empty list\nif given a directory containing no files, and returns null if the file\nis not a directory.</p>\n\n    \n','2019-10-15 16:02:24'),(523,'UCF_USELESS_CONTROL_FLOW',0,10,'\n\n<p> This method contains a useless control flow statement, where\ncontrol flow continues onto the same place regardless of whether or not\nthe branch is taken. For example,\nthis is caused by having an empty statement\nblock for an <code>if</code> statement:</p>\n<pre><code>if (argv.length == 0) {\n    // TODO: handle this case\n}\n</code></pre>\n\n    \n','2019-10-15 16:02:24'),(524,'UCF_USELESS_CONTROL_FLOW_NEXT_LINE',0,10,'\n\n<p> This method contains a useless control flow statement in which control\nflow follows to the same or following line regardless of whether or not\nthe branch is taken.\nOften, this is caused by inadvertently using an empty statement as the\nbody of an <code>if</code> statement, e.g.:</p>\n<pre><code>if (argv.length == 1);\n    System.out.println(\"Hello, \" + argv[0]);\n</code></pre>\n\n    \n','2019-10-15 16:02:24'),(525,'RCN_REDUNDANT_NULLCHECK_OF_NULL_VALUE',0,10,'\n\n<p> This method contains a redundant check of a known null value against\nthe constant null.</p>\n\n    \n','2019-10-15 16:02:24'),(526,'RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE',0,10,'\n\n<p> This method contains a redundant check of a known non-null value against\nthe constant null.</p>\n\n    \n','2019-10-15 16:02:24'),(527,'RCN_REDUNDANT_COMPARISON_TWO_NULL_VALUES',0,10,'\n\n<p> This method contains a redundant comparison of two references known to\nboth be definitely null.</p>\n\n    \n','2019-10-15 16:02:24'),(528,'RCN_REDUNDANT_COMPARISON_OF_NULL_AND_NONNULL_VALUE',0,10,'\n\n<p> This method contains a reference known to be non-null with another reference\nknown to be null.</p>\n\n    \n','2019-10-15 16:02:24'),(529,'SA_LOCAL_SELF_ASSIGNMENT',0,10,'\n\n<p> This method contains a self assignment of a local variable; e.g.</p>\n<pre><code>public void foo() {\n    int x = 3;\n    x = x;\n}\n</code></pre>\n<p>\nSuch assignments are useless, and may indicate a logic error or typo.\n</p>\n\n    \n','2019-10-15 16:02:24'),(530,'INT_BAD_REM_BY_1',0,10,'\n\n<p> Any expression (exp % 1) is guaranteed to always return zero.\nDid you mean (exp &amp; 1) or (exp % 2) instead?\n</p>\n\n    \n','2019-10-15 16:02:24'),(531,'INT_VACUOUS_COMPARISON',0,10,'\n\n<p> There is an integer comparison that always returns\nthe same value (e.g., x &lt;= Integer.MAX_VALUE).\n</p>\n\n    \n','2019-10-15 16:02:24'),(532,'INT_VACUOUS_BIT_OPERATION',0,10,'\n\n<p> This is an integer bit operation (and, or, or exclusive or) that doesn\'t do any useful work\n(e.g., <code>v & 0xffffffff</code>).\n\n</p>\n\n    \n','2019-10-15 16:02:24'),(533,'SA_LOCAL_DOUBLE_ASSIGNMENT',0,10,'\n\n<p> This method contains a double assignment of a local variable; e.g.\n</p>\n<pre><code>public void foo() {\n    int x,y;\n    x = x = 17;\n}\n</code></pre>\n<p>Assigning the same value to a variable twice is useless, and may indicate a logic error or typo.</p>\n\n    \n','2019-10-15 16:02:24'),(534,'SA_FIELD_DOUBLE_ASSIGNMENT',0,10,'\n\n<p> This method contains a double assignment of a field; e.g.\n</p>\n<pre><code>int x,y;\npublic void foo() {\n    x = x = 17;\n}\n</code></pre>\n<p>Assigning to a field twice is useless, and may indicate a logic error or typo.</p>\n\n    \n','2019-10-15 16:02:24'),(535,'DLS_DEAD_LOCAL_STORE_IN_RETURN',0,10,'\n      \n<p>\nThis statement assigns to a local variable in a return statement. This assignment\nhas effect. Please verify that this statement does the right thing.\n</p>\n\n    \n','2019-10-15 16:02:24'),(536,'DLS_DEAD_LOCAL_STORE',0,10,'\n\n<p>\nThis instruction assigns a value to a local variable,\nbut the value is not read or used in any subsequent instruction.\nOften, this indicates an error, because the value computed is never\nused.\n</p>\n<p>\nNote that Sun\'s javac compiler often generates dead stores for\nfinal local variables.  Because SpotBugs is a bytecode-based tool,\nthere is no easy way to eliminate these false positives.\n</p>\n\n    \n','2019-10-15 16:02:24'),(537,'DLS_DEAD_LOCAL_STORE_SHADOWS_FIELD',0,10,'\n\n<p>\nThis instruction assigns a value to a local variable,\nbut the value is not read or used in any subsequent instruction.\nOften, this indicates an error, because the value computed is never\nused. There is a field with the same name as the local variable. Did you\nmean to assign to that variable instead?\n</p>\n\n    \n','2019-10-15 16:02:24'),(538,'DLS_DEAD_LOCAL_STORE_OF_NULL',0,10,'\n\n<p>The code stores null into a local variable, and the stored value is not\nread. This store may have been introduced to assist the garbage collector, but\nas of Java SE 6.0, this is no longer needed or useful.\n</p>\n\n    \n','2019-10-15 16:02:24'),(539,'REC_CATCH_EXCEPTION',396,10,'\n  \n  <p>\n  This method uses a try-catch block that catches Exception objects, but Exception is not\n  thrown within the try block, and RuntimeException is not explicitly caught.  It is a common bug pattern to\n  say try { ... } catch (Exception e) { something } as a shorthand for catching a number of types of exception\n  each of whose catch blocks is identical, but this construct also accidentally catches RuntimeException as well,\n  masking potential bugs.\n  </p>\n  <p>A better approach is to either explicitly catch the specific exceptions that are thrown,\n  or to explicitly catch RuntimeException exception, rethrow it, and then catch all non-Runtime Exceptions, as shown below:</p>\n<pre><code>try {\n    ...\n} catch (RuntimeException e) {\n    throw e;\n} catch (Exception e) {\n    ... deal with all non-runtime exceptions ...\n}\n</code></pre>\n  \n     \n','2019-10-15 16:02:24'),(540,'FE_FLOATING_POINT_EQUALITY',0,10,'\n   \n    <p>\n    This operation compares two floating point values for equality.\n    Because floating point calculations may involve rounding,\n   calculated float and double values may not be accurate.\n    For values that must be precise, such as monetary values,\n   consider using a fixed-precision type such as BigDecimal.\n    For values that need not be precise, consider comparing for equality\n    within some range, for example:\n    <code>if ( Math.abs(x - y) &lt; .0000001 )</code>.\n   See the Java Language Specification, section 4.2.4.\n    </p>\n    \n     \n','2019-10-15 16:02:24'),(541,'CD_CIRCULAR_DEPENDENCY',0,10,'\n   \n    <p>\n    This class has a circular dependency with other classes. This makes building these classes\n    difficult, as each is dependent on the other to build correctly. Consider using interfaces\n    to break the hard dependency.\n    </p>\n    \n     \n','2019-10-15 16:02:24'),(542,'RI_REDUNDANT_INTERFACES',0,10,'\n   \n    <p>\n    This class declares that it implements an interface that is also implemented by a superclass.\n    This is redundant because once a superclass implements an interface, all subclasses by default also\n    implement this interface. It may point out that the inheritance hierarchy has changed since\n    this class was created, and consideration should be given to the ownership of\n    the interface\'s implementation.\n    </p>\n    \n     \n','2019-10-15 16:02:24'),(543,'MTIA_SUSPECT_STRUTS_INSTANCE_FIELD',0,10,'\n   \n    <p>\n    This class extends from a Struts Action class, and uses an instance member variable. Since only\n    one instance of a struts Action class is created by the Struts framework, and used in a\n    multithreaded way, this paradigm is highly discouraged and most likely problematic. Consider\n    only using method local variables. Only instance fields that are written outside of a monitor\n    are reported.\n    </p>\n    \n      \n','2019-10-15 16:02:24'),(544,'MTIA_SUSPECT_SERVLET_INSTANCE_FIELD',0,10,'\n   \n    <p>\n    This class extends from a Servlet class, and uses an instance member variable. Since only\n    one instance of a Servlet class is created by the J2EE framework, and used in a\n    multithreaded way, this paradigm is highly discouraged and most likely problematic. Consider\n    only using method local variables.\n    </p>\n    \n      \n','2019-10-15 16:02:24'),(545,'PS_PUBLIC_SEMAPHORES',0,10,'\n   \n    <p>\n    This class uses synchronization along with wait(), notify() or notifyAll() on itself (the this\n    reference). Client classes that use this class, may, in addition, use an instance of this class\n    as a synchronizing object. Because two classes are using the same object for synchronization,\n    Multithread correctness is suspect. You should not synchronize nor call semaphore methods on\n    a public reference. Consider using a internal private member variable to control synchronization.\n    </p>\n    \n      \n','2019-10-15 16:02:24'),(546,'ICAST_INTEGER_MULTIPLY_CAST_TO_LONG',0,10,'\n\n<p>\nThis code performs integer multiply and then converts the result to a long,\nas in:</p>\n<pre><code>long convertDaysToMilliseconds(int days) { return 1000*3600*24*days; }\n</code></pre>\n<p>\nIf the multiplication is done using long arithmetic, you can avoid\nthe possibility that the result will overflow. For example, you\ncould fix the above code to:</p>\n<pre><code>long convertDaysToMilliseconds(int days) { return 1000L*3600*24*days; }\n</code></pre>\n<p>\nor\n</p>\n<pre><code>static final long MILLISECONDS_PER_DAY = 24L*3600*1000;\nlong convertDaysToMilliseconds(int days) { return days * MILLISECONDS_PER_DAY; }\n</code></pre>\n\n    \n','2019-10-15 16:02:24'),(547,'ICAST_IDIV_CAST_TO_DOUBLE',0,10,'\n\n<p>\nThis code casts the result of an integral division (e.g., int or long division)\noperation to double or\nfloat.\nDoing division on integers truncates the result\nto the integer value closest to zero.  The fact that the result\nwas cast to double suggests that this precision should have been retained.\nWhat was probably meant was to cast one or both of the operands to\ndouble <em>before</em> performing the division.  Here is an example:\n</p>\n<pre><code>int x = 2;\nint y = 5;\n// Wrong: yields result 0.0\ndouble value1 = x / y;\n\n// Right: yields result 0.4\ndouble value2 = x / (double) y;\n</code></pre>\n\n    \n','2019-10-15 16:02:24'),(548,'BC_BAD_CAST_TO_CONCRETE_COLLECTION',0,10,'\n\n<p>\nThis code casts an abstract collection (such as a Collection, List, or Set)\nto a specific concrete implementation (such as an ArrayList or HashSet).\nThis might not be correct, and it may make your code fragile, since\nit makes it harder to switch to other concrete implementations at a future\npoint. Unless you have a particular reason to do so, just use the abstract\ncollection class.\n</p>\n\n    \n','2019-10-15 16:02:24'),(549,'BC_UNCONFIRMED_CAST',0,10,'\n\n<p>\nThis cast is unchecked, and not all instances of the type casted from can be cast to\nthe type it is being cast to. Check that your program logic ensures that this\ncast will not fail.\n</p>\n\n    \n','2019-10-15 16:02:24'),(550,'BC_UNCONFIRMED_CAST_OF_RETURN_VALUE',0,10,'\n\n<p>\nThis code performs an unchecked cast of the return value of a method.\nThe code might be calling the method in such a way that the cast is guaranteed to be\nsafe, but SpotBugs is unable to verify that the cast is safe.  Check that your program logic ensures that this\ncast will not fail.\n</p>\n\n    \n','2019-10-15 16:02:24'),(551,'BC_VACUOUS_INSTANCEOF',571,10,'\n\n<p>\nThis instanceof test will always return true (unless the value being tested is null).\nAlthough this is safe, make sure it isn\'t\nan indication of some misunderstanding or some other logic error.\nIf you really want to test the value for being null, perhaps it would be clearer to do\nbetter to do a null test rather than an instanceof test.\n</p>\n\n    \n','2019-10-15 16:02:24'),(552,'BC_BAD_CAST_TO_ABSTRACT_COLLECTION',0,10,'\n\n<p>\nThis code casts a Collection to an abstract collection\n(such as <code>List</code>, <code>Set</code>, or <code>Map</code>).\nEnsure that you are guaranteed that the object is of the type\nyou are casting to. If all you need is to be able\nto iterate through a collection, you don\'t need to cast it to a Set or List.\n</p>\n\n    \n','2019-10-15 16:02:24'),(553,'IM_BAD_CHECK_FOR_ODD',0,10,'\n\n<p>\nThe code uses x % 2 == 1 to check to see if a value is odd, but this won\'t work\nfor negative numbers (e.g., (-5) % 2 == -1). If this code is intending to check\nfor oddness, consider using x &amp; 1 == 1, or x % 2 != 0.\n</p>\n\n    \n','2019-10-15 16:02:24'),(554,'IM_AVERAGE_COMPUTATION_COULD_OVERFLOW',0,10,'\n\n<p>The code computes the average of two integers using either division or signed right shift,\nand then uses the result as the index of an array.\nIf the values being averaged are very large, this can overflow (resulting in the computation\nof a negative average).  Assuming that the result is intended to be nonnegative, you\ncan use an unsigned right shift instead. In other words, rather that using <code>(low+high)/2</code>,\nuse <code>(low+high) &gt;&gt;&gt; 1</code>\n</p>\n<p>This bug exists in many earlier implementations of binary search and merge sort.\nMartin Buchholz <a href=\"http://bugs.java.com/bugdatabase/view_bug.do?bug_id=6412541\">found and fixed it</a>\nin the JDK libraries, and Joshua Bloch\n<a href=\"http://googleresearch.blogspot.com/2006/06/extra-extra-read-all-about-it-nearly.html\">widely\npublicized the bug pattern</a>.\n</p>\n\n    \n','2019-10-15 16:02:24'),(555,'ICAST_QUESTIONABLE_UNSIGNED_RIGHT_SHIFT',0,10,'\n\n<p>\nThe code performs an unsigned right shift, whose result is then\ncast to a short or byte, which discards the upper bits of the result.\nSince the upper bits are discarded, there may be no difference between\na signed and unsigned right shift (depending upon the size of the shift).\n</p>\n\n    \n','2019-10-15 16:02:24'),(556,'DMI_HARDCODED_ABSOLUTE_FILENAME',0,10,'\n\n<p>This code constructs a File object using a hard coded to an absolute pathname\n(e.g., <code>new File(\"/home/dannyc/workspace/j2ee/src/share/com/sun/enterprise/deployment\");</code>\n</p>\n\n    \n','2019-10-15 16:02:24'),(557,'DMI_USELESS_SUBSTRING',0,10,'\n\n<p>\nThis code invokes substring(0) on a String, which returns the original value.\n</p>\n\n    \n','2019-10-15 16:02:24'),(558,'ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD',0,10,'\n\n  <p> This instance method writes to a static field. This is tricky to get\ncorrect if multiple instances are being manipulated,\nand generally bad practice.\n</p>\n\n    \n','2019-10-15 16:02:24'),(559,'DMI_NONSERIALIZABLE_OBJECT_WRITTEN',0,10,'\n\n<p>\nThis code seems to be passing a non-serializable object to the ObjectOutput.writeObject method.\nIf the object is, indeed, non-serializable, an error will result.\n</p>\n\n    \n','2019-10-15 16:02:24'),(560,'DB_DUPLICATE_BRANCHES',0,10,'\n      \n      <p>\n      This method uses the same code to implement two branches of a conditional branch.\n    Check to ensure that this isn\'t a coding mistake.\n      </p>\n      \n   \n','2019-10-15 16:02:24'),(561,'DB_DUPLICATE_SWITCH_CLAUSES',0,10,'\n      \n      <p>\n      This method uses the same code to implement two clauses of a switch statement.\n    This could be a case of duplicate code, but it might also indicate\n    a coding mistake.\n      </p>\n      \n   \n','2019-10-15 16:02:24'),(562,'XFB_XML_FACTORY_BYPASS',0,10,'\n      \n      <p>\n      This method allocates a specific implementation of an xml interface. It is preferable to use\n      the supplied factory classes to create these objects so that the implementation can be\n      changed at runtime. See\n      </p>\n      <ul>\n         <li>javax.xml.parsers.DocumentBuilderFactory</li>\n         <li>javax.xml.parsers.SAXParserFactory</li>\n         <li>javax.xml.transform.TransformerFactory</li>\n         <li>org.w3c.dom.Document.create<i>XXXX</i></li>\n      </ul>\n      <p>for details.</p>\n      \n    \n','2019-10-15 16:02:24'),(563,'USM_USELESS_SUBCLASS_METHOD',0,10,'\n      \n      <p>\n      This derived method merely calls the same superclass method passing in the exact parameters\n      received. This method can be removed, as it provides no additional value.\n      </p>\n      \n    \n','2019-10-15 16:02:24'),(564,'USM_USELESS_ABSTRACT_METHOD',0,10,'\n      \n      <p>\n      This abstract method is already defined in an interface that is implemented by this abstract\n      class. This method can be removed, as it provides no additional value.\n      </p>\n      \n    \n','2019-10-15 16:02:24'),(565,'CI_CONFUSED_INHERITANCE',0,10,'\n      \n      <p>\n      This class is declared to be final, but declares fields to be protected. Since the class\n      is final, it can not be derived from, and the use of protected is confusing. The access\n      modifier for the field should be changed to private or public to represent the true\n      use for the field.\n      </p>\n      \n    \n','2019-10-15 16:02:24'),(566,'TQ_EXPLICIT_UNKNOWN_SOURCE_VALUE_REACHES_NEVER_SINK',0,10,'\n      \n      <p>\n      A value is used in a way that requires it to be never be a value denoted by a type qualifier, but\n    there is an explicit annotation stating that it is not known where the value is prohibited from having that type qualifier.\n    Either the usage or the annotation is incorrect.\n      </p>\n      \n    \n','2019-10-15 16:02:24'),(567,'TQ_EXPLICIT_UNKNOWN_SOURCE_VALUE_REACHES_ALWAYS_SINK',0,10,'\n      \n      <p>\n      A value is used in a way that requires it to be always be a value denoted by a type qualifier, but\n    there is an explicit annotation stating that it is not known where the value is required to have that type qualifier.\n    Either the usage or the annotation is incorrect.\n      </p>\n      \n    \n','2019-10-15 16:02:24'),(568,'NP_METHOD_RETURN_RELAXING_ANNOTATION',0,10,'\n        <p>\n        A method should always implement the contract of a method it overrides. Thus, if a method takes is annotated\n    as returning a @Nonnull value,\n    you shouldn\'t override that method in a subclass with a method annotated as returning a @Nullable or @CheckForNull value.\n    Doing so violates the contract that the method shouldn\'t return null.\n        </p>\n      \n','2019-10-15 16:02:24'),(569,'NP_METHOD_PARAMETER_TIGHTENS_ANNOTATION',0,10,'\n        <p>\n        A method should always implement the contract of a method it overrides. Thus, if a method takes a parameter\n    that is marked as @Nullable, you shouldn\'t override that method in a subclass with a method where that parameter is @Nonnull.\n    Doing so violates the contract that the method should handle a null parameter.\n        </p>\n      \n','2019-10-15 16:02:24');
/*!40000 ALTER TABLE `bug_information` ENABLE KEYS */;
UNLOCK TABLES;
/*!40103 SET TIME_ZONE=@OLD_TIME_ZONE */;

/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;

-- Dump completed on 2019-10-21 15:18:32
